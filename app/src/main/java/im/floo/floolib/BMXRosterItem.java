/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package im.floo.floolib;

/**
 *  联系人
 **/
public class BMXRosterItem extends BMXBaseObject {
  public transient long swigCPtr;
  private transient boolean swigCMemOwnDerived;

  protected BMXRosterItem(long cPtr, boolean cMemoryOwn) {
    super(flooJNI.BMXRosterItem_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public BMXRosterItem() {
    super(flooJNI.BMXRosterItem_SWIGSmartPtrUpcast(0), true);
    swigCMemOwnDerived = false;
    swigCPtr = 0;
  }

  protected static long getCPtr(BMXRosterItem obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        flooJNI.delete_BMXRosterItem(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   *  好友Id
   * @return int64_t
   **/
  public long rosterId() {
    return flooJNI.BMXRosterItem_rosterId(swigCPtr, this);
  }

  /**
   *  好友名
   * @return std::string
   **/
  public String username() {
    return flooJNI.BMXRosterItem_username(swigCPtr, this);
  }

  /**
   *  好友昵称
   * @return std::string
   **/
  public String nickname() {
    return flooJNI.BMXRosterItem_nickname(swigCPtr, this);
  }

  /**
   *  好友头像ratel服务器地址
   * @return std::string
   **/
  public String avatarRatelUrl() {
    return flooJNI.BMXRosterItem_avatarRatelUrl(swigCPtr, this);
  }

  /**
   *  好友头像服务器地址
   * @return std::string
   **/
  public String avatarUrl() {
    return flooJNI.BMXRosterItem_avatarUrl(swigCPtr, this);
  }

  /**
   *  好友头像本地存储路径
   * @return std::string
   **/
  public String avatarPath() {
    return flooJNI.BMXRosterItem_avatarPath(swigCPtr, this);
  }

  /**
   *  好友头像缩略图地址
   * @return std::string
   **/
  public String avatarThumbnailUrl() {
    return flooJNI.BMXRosterItem_avatarThumbnailUrl(swigCPtr, this);
  }

  /**
   *  好友头像缩略图本地存储路径
   * @return std::string
   **/
  public String avatarThumbnailPath() {
    return flooJNI.BMXRosterItem_avatarThumbnailPath(swigCPtr, this);
  }

  /**
   *  扩展信息，用户设置的好友可以看到的信息，比如地址，个性签名等
   * @return JSON(std::string)
   **/
  public String publicInfo() {
    return flooJNI.BMXRosterItem_publicInfo(swigCPtr, this);
  }

  /**
   *  用户对好友添加的备注等信息
   * @return JSON(std::string)
   **/
  public String alias() {
    return flooJNI.BMXRosterItem_alias(swigCPtr, this);
  }

  /**
   *  用户的服务器扩展信息
   * @return JSON(std::string)
   **/
  public String ext() {
    return flooJNI.BMXRosterItem_ext(swigCPtr, this);
  }

  /**
   *  用户的本地扩展信息
   * @return JSON(std::string)
   **/
  public String localExt() {
    return flooJNI.BMXRosterItem_localExt(swigCPtr, this);
  }

  /**
   *  联系人关系
   * @return RosterRelation
   **/
  public BMXRosterItem.RosterRelation relation() {
    return BMXRosterItem.RosterRelation.swigToEnum(flooJNI.BMXRosterItem_relation(swigCPtr, this));
  }

  /**
   *  是否提醒用户消息
   * @return bool
   **/
  public boolean isMuteNotification() {
    return flooJNI.BMXRosterItem_isMuteNotification(swigCPtr, this);
  }

  /**
   *  roster的好友添加验证方式。
   * @return AddFriendAuthMode
   **/
  public BMXRosterItem.AddFriendAuthMode addFriendAuthMode() {
    return BMXRosterItem.AddFriendAuthMode.swigToEnum(flooJNI.BMXRosterItem_addFriendAuthMode(swigCPtr, this));
  }

  /**
   *  roster的好友验证问题。
   * @return std::string
   **/
  public String authQuestion() {
    return flooJNI.BMXRosterItem_authQuestion(swigCPtr, this);
  }

  /**
   *  好友关系
   **/
  public enum RosterRelation {
    Friend,
    Deleted,
    Stranger,
    Blocked;

    public final int swigValue() {
      return swigValue;
    }

    public static RosterRelation swigToEnum(int swigValue) {
      RosterRelation[] swigValues = RosterRelation.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (RosterRelation swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + RosterRelation.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private RosterRelation() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private RosterRelation(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private RosterRelation(RosterRelation swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   *  roster 被申请加好友时的验证方式
   **/
  public enum AddFriendAuthMode {
    Open,
    NeedApproval,
    AnswerQuestion,
    RejectAll;

    public final int swigValue() {
      return swigValue;
    }

    public static AddFriendAuthMode swigToEnum(int swigValue) {
      AddFriendAuthMode[] swigValues = AddFriendAuthMode.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (AddFriendAuthMode swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + AddFriendAuthMode.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private AddFriendAuthMode() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private AddFriendAuthMode(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private AddFriendAuthMode(AddFriendAuthMode swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
