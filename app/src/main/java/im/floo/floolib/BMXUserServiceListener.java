/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package im.floo.floolib;

/**
 *  用户状态监听者
 **/
public class BMXUserServiceListener {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected BMXUserServiceListener(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BMXUserServiceListener obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        flooJNI.delete_BMXUserServiceListener(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    flooJNI.BMXUserServiceListener_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    flooJNI.BMXUserServiceListener_change_ownership(this, swigCPtr, true);
  }

  /**
   *  链接状态发生变化
   * @param status 连接状态
   **/
  public void onConnectStatusChanged(BMXConnectStatus status) {
    if (getClass() == BMXUserServiceListener.class) flooJNI.BMXUserServiceListener_onConnectStatusChanged(swigCPtr, this, status.swigValue()); else flooJNI.BMXUserServiceListener_onConnectStatusChangedSwigExplicitBMXUserServiceListener(swigCPtr, this, status.swigValue());
  }

  /**
   *  用户登陆
   * @param profile 用户profile
   **/
  public void onUserSignIn(BMXUserProfile profile) {
    if (getClass() == BMXUserServiceListener.class) flooJNI.BMXUserServiceListener_onUserSignIn(swigCPtr, this, BMXUserProfile.getCPtr(profile), profile); else flooJNI.BMXUserServiceListener_onUserSignInSwigExplicitBMXUserServiceListener(swigCPtr, this, BMXUserProfile.getCPtr(profile), profile);
  }

  /**
   *  用户登出
   * @param error 状态错误码
   **/
  public void onUserSignOut(BMXErrorCode error, long userId) {
    if (getClass() == BMXUserServiceListener.class) flooJNI.BMXUserServiceListener_onUserSignOut(swigCPtr, this, error.swigValue(), userId); else flooJNI.BMXUserServiceListener_onUserSignOutSwigExplicitBMXUserServiceListener(swigCPtr, this, error.swigValue(), userId);
  }

  /**
   *  同步用户信息更新（其他设备操作发生用户信息变更）
   * @param profile 用户profile
   **/
  public void onInfoUpdated(BMXUserProfile profile) {
    if (getClass() == BMXUserServiceListener.class) flooJNI.BMXUserServiceListener_onInfoUpdated(swigCPtr, this, BMXUserProfile.getCPtr(profile), profile); else flooJNI.BMXUserServiceListener_onInfoUpdatedSwigExplicitBMXUserServiceListener(swigCPtr, this, BMXUserProfile.getCPtr(profile), profile);
  }

  /**
   *  用户在其他设备上登陆
   * @param deviceSN 设备序列号
   **/
  public void onOtherDeviceSingIn(int deviceSN) {
    if (getClass() == BMXUserServiceListener.class) flooJNI.BMXUserServiceListener_onOtherDeviceSingIn(swigCPtr, this, deviceSN); else flooJNI.BMXUserServiceListener_onOtherDeviceSingInSwigExplicitBMXUserServiceListener(swigCPtr, this, deviceSN);
  }

  /**
   *  用户在其他设备上登出
   * @param deviceSN 设备序列号
   **/
  public void onOtherDeviceSingOut(int deviceSN) {
    if (getClass() == BMXUserServiceListener.class) flooJNI.BMXUserServiceListener_onOtherDeviceSingOut(swigCPtr, this, deviceSN); else flooJNI.BMXUserServiceListener_onOtherDeviceSingOutSwigExplicitBMXUserServiceListener(swigCPtr, this, deviceSN);
  }

  public BMXUserServiceListener() {
    this(flooJNI.new_BMXUserServiceListener(), true);
    flooJNI.BMXUserServiceListener_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public void registerUserService(BMXUserService service) {
    flooJNI.BMXUserServiceListener_registerUserService(swigCPtr, this, BMXUserService.getCPtr(service), service);
  }

}
