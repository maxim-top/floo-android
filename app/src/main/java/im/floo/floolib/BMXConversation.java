/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package im.floo.floolib;

import im.floo.AsyncExecutor;
import im.floo.BMXCallBack;
import im.floo.BMXDataCallBack;

/**
 *  会话
 **/
public class BMXConversation extends BMXBaseObject {
  private transient long swigCPtr;
  private transient boolean swigCMemOwnDerived;

  protected BMXConversation(long cPtr, boolean cMemoryOwn) {
    super(flooJNI.BMXConversation_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BMXConversation obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @Override
  protected void finalize() {
    delete();
  }

  @Override
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        flooJNI.delete_BMXConversation(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   *  会话Id
   * @return int64_t
   **/
  public long conversationId() {
    return flooJNI.BMXConversation_conversationId(swigCPtr, this);
  }

  /**
   *  会话类型
   * @return Type
   **/
  public BMXConversation.Type type() {
    return BMXConversation.Type.swigToEnum(flooJNI.BMXConversation_type(swigCPtr, this));
  }

  /**
   *  最新消息
   * @return BMXMessagePtr
   **/
  public BMXMessage lastMsg() {
    long cPtr = flooJNI.BMXConversation_lastMsg(swigCPtr, this);
    return (cPtr == 0) ? null : new BMXMessage(cPtr, true);
  }

  /**
   *  未读消息数
   * @return int32_t
   **/
  public int unreadNumber() {
    return flooJNI.BMXConversation_unreadNumber(swigCPtr, this);
  }

  /**
   *  会话中所有消息的数量
   * @return int32_t
   **/
  public int messageCount() {
    return flooJNI.BMXConversation_messageCount(swigCPtr, this);
  }

  /**
   *  是否提醒用户消息,不提醒的情况下会话总未读数不会统计该会话计数。
   * @return bool
   **/
  public boolean isMuteNotification() {
    return flooJNI.BMXConversation_isMuteNotification(swigCPtr, this);
  }

  /**
   *  扩展信息
   * @return JSON(std::string)
   **/
  public String extension() {
    return flooJNI.BMXConversation_extension(swigCPtr, this);
  }

  /**
   *  设置扩展信息
   * @param ext 会话扩展消息
   * @return BMXErrorCode
   **/
  public BMXErrorCode setExtension(String ext) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_setExtension(swigCPtr, this, ext));
  }

  /**
   *  编辑消息
   * @return std::string
   **/
  public String editMessage() {
    return flooJNI.BMXConversation_editMessage(swigCPtr, this);
  }

  /**
   *  设置编辑消息
   * @param editMessage 会话正在编辑的文本消息
   * @return BMXErrorCode
   **/
  public BMXErrorCode setEditMessage(String editMessage) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_setEditMessage(swigCPtr, this, editMessage));
  }

  /**
   *  设置消息播放状态（只对语音/视频消息有效）
   * @param msg 需要设置播放状态的消息
   * @param status 消息是否已经播放
   * @return BMXErrorCode
   **/
  private BMXErrorCode setMessagePlayedStatus(BMXMessage msg, boolean status) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_setMessagePlayedStatus(swigCPtr, this, BMXMessage.getCPtr(msg), msg, status));
  }

  /**
   *  设置消息未读状态，更新未读消息数
   * @param msg 需要设置消息已读状态的消息
   * @param status 消息是否设置已读
   * @return BMXErrorCode
   **/
  private BMXErrorCode setMessageReadStatus(BMXMessage msg, boolean status) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_setMessageReadStatus(swigCPtr, this, BMXMessage.getCPtr(msg), msg, status));
  }

  /**
   *  把所有消息设置为已读，更新未读消息数
   * @return BMXErrorCode
   **/
  private BMXErrorCode setAllMessagesRead() {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_setAllMessagesRead(swigCPtr, this));
  }

  /**
   *  更新一条数据库存储消息的扩展字段信息
   * @param msg 需要更改扩展信息的消息此时msg部分已经更新扩展字椴信息
   * @return BMXErrorCode
   **/
  private BMXErrorCode updateMessageExtension(BMXMessage msg) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_updateMessageExtension(swigCPtr, this, BMXMessage.getCPtr(msg), msg));
  }

  /**
   *  插入一条消息
   * @param msg 插入的消息
   * @param isHistory 历史消息
   * @return BMXErrorCode
   **/
  public BMXErrorCode insertMessage(BMXMessage msg, boolean isHistory) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_insertMessage__SWIG_0(swigCPtr, this, BMXMessage.getCPtr(msg), msg, isHistory));
  }

  /**
   *  读取一条消息
   * @param msgId 需要读取的消息的消息id
   * @return BMXMessagePtr
   **/
  private BMXMessage loadMessage(long msgId) {
    long cPtr = flooJNI.BMXConversation_loadMessage(swigCPtr, this, msgId);
    return (cPtr == 0) ? null : new BMXMessage(cPtr, true);
  }

  /**
   *  删除会话中的所有消息
   * @return BMXErrorCode
   **/
  private BMXErrorCode removeAllMessages() {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_removeAllMessages(swigCPtr, this));
  }

  /**
   *  加载消息，如果不指定则从最新消息开始
   * @param refMsgId 加载消息的起始id
   * @param size 最大加载消息条数
   * @param result 数据库返回的加载消息列表
   * @param arg3 加载消息的方向，默认是加载更早的消息
   * @return BMXErrorCode
   **/
  private BMXErrorCode loadMessages(long refMsgId, long size, BMXMessageList result, BMXConversation.Direction arg3) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_loadMessages__SWIG_0(swigCPtr, this, refMsgId, size, BMXMessageList.getCPtr(result), result, arg3.swigValue()));
  }

  private BMXErrorCode loadMessages(long refMsgId, long size, BMXMessageList result) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_loadMessages__SWIG_1(swigCPtr, this, refMsgId, size, BMXMessageList.getCPtr(result), result));
  }

  /**
   *  搜索消息，如果不指定则从最新消息开始
   * @param keywords 搜索消息的关键字
   * @param refTime 搜索消息的起始时间
   * @param size 最大加载消息条数
   * @param result 搜索到的消息结果列表
   * @param arg4 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
   * @return BMXErrorCode
   **/
  public BMXErrorCode searchMessagesByKeyWords(String keywords, long refTime, long size, BMXMessageList result, BMXConversation.Direction arg4) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_searchMessagesByKeyWords__SWIG_0(swigCPtr, this, keywords, refTime, size, BMXMessageList.getCPtr(result), result, arg4.swigValue()));
  }

  public BMXErrorCode searchMessagesByKeyWords(String keywords, long refTime, long size, BMXMessageList result) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_searchMessagesByKeyWords__SWIG_1(swigCPtr, this, keywords, refTime, size, BMXMessageList.getCPtr(result), result));
  }

  /**
   *  搜索消息，如果不指定则从最新消息开始
   * @param keywords 搜索消息的关键字
   * @param refTime 搜索消息的起始时间
   * @param size 最大加载消息条数
   * @param result 搜索到的消息结果列表
   * @param arg4 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
   * @return BMXErrorCode
   **/
  private BMXErrorCode searchMessages(String keywords, long refTime, long size, BMXMessageList result, BMXConversation.Direction arg4) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_searchMessages__SWIG_0(swigCPtr, this, keywords, refTime, size, BMXMessageList.getCPtr(result), result, arg4.swigValue()));
  }

  private BMXErrorCode searchMessages(String keywords, long refTime, long size, BMXMessageList result) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_searchMessages__SWIG_1(swigCPtr, this, keywords, refTime, size, BMXMessageList.getCPtr(result), result));
  }


  /**
   *  按照类型搜索消息，如果不指定则从最新消息开始
   * @param type 搜索消息的类型
   * @param refTime 搜索消息的起始时间
   * @param size 最大加载消息条数
   * @param result 搜索到的消息结果列表
   * @param arg4 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
   * @return BMXErrorCode
   **/
  public BMXErrorCode searchMessagesByType(BMXMessage.ContentType type, long refTime, long size, BMXMessageList result, BMXConversation.Direction arg4) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_searchMessagesByType__SWIG_0(swigCPtr, this, type.swigValue(), refTime, size, BMXMessageList.getCPtr(result), result, arg4.swigValue()));
  }

  public BMXErrorCode searchMessagesByType(BMXMessage.ContentType type, long refTime, long size, BMXMessageList result) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_searchMessagesByType__SWIG_1(swigCPtr, this, type.swigValue(), refTime, size, BMXMessageList.getCPtr(result), result));
  }

  /**
   *  按照类型搜索消息，如果不指定则从最新消息开始
   * @param type 搜索消息的类型
   * @param refTime 搜索消息的起始时间
   * @param size 最大加载消息条数
   * @param result 搜索到的消息结果列表
   * @param arg4 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
   * @return BMXErrorCode
   **/
  private BMXErrorCode searchMessages(BMXMessage.ContentType type, long refTime, long size, BMXMessageList result, BMXConversation.Direction arg4) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_searchMessages__SWIG_2(swigCPtr, this, type.swigValue(), refTime, size, BMXMessageList.getCPtr(result), result, arg4.swigValue()));
  }

  private BMXErrorCode searchMessages(BMXMessage.ContentType type, long refTime, long size, BMXMessageList result) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_searchMessages__SWIG_3(swigCPtr, this, type.swigValue(), refTime, size, BMXMessageList.getCPtr(result), result));
  }

  /**
   *  读取数据库当前会话所有消息数量，强制更新conversation的消息总数和未读消息数。
   * @return BMXErrorCode
   **/
  private BMXErrorCode refreshConversation() {
    return BMXErrorCode.swigToEnum(flooJNI.BMXConversation_refreshConversation(swigCPtr, this));
  }

  /**
   *  会话类型
   **/
  public enum Type {
    Single,
    Group,
    System;

    public final int swigValue() {
      return swigValue;
    }

    public static Type swigToEnum(int swigValue) {
      Type[] swigValues = Type.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (Type swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + Type.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private Type() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private Type(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private Type(Type swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   *  消息搜索方向
   **/
  public enum Direction {
    Up,
    Down;

    public final int swigValue() {
      return swigValue;
    }

    public static Direction swigToEnum(int swigValue) {
      Direction[] swigValues = Direction.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (Direction swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + Direction.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private Direction() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private Direction(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private Direction(Direction swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   *  设置消息播放状态（只对语音/视频消息有效）
   * @param msg 需要设置播放状态的消息
   * @param status 消息是否已经播放
   * @param callBack 回调
   **/
  public void setMessagePlayedStatus(final BMXMessage msg, final boolean status, final BMXCallBack callBack) {
    new AsyncExecutor().exec(new AsyncExecutor.Task() {
      @Override
      public BMXErrorCode exec() {
        return setMessagePlayedStatus(msg, status);
      }

      @Override
      public void onPostExecute(BMXErrorCode code) {
                if (callBack == null){
                    return;
                }
        callBack.onResult(code);
      }
    });
  }

  /**
   *  设置消息未读状态，更新未读消息数
   * @param msg 需要设置消息已读状态的消息
   * @param status 消息是否设置已读
   * @param callBack 回调
   **/
  public void setMessageReadStatus(final BMXMessage msg, final  boolean status,final BMXCallBack callBack) {
    new AsyncExecutor().exec(new AsyncExecutor.Task() {
      @Override
      public BMXErrorCode exec() {
        return setMessagePlayedStatus(msg, status);
      }

      @Override
      public void onPostExecute(BMXErrorCode code) {
                if (callBack == null){
                    return;
                }
        callBack.onResult(code);
      }
    });
  }

  /**
   *  把所有消息设置为已读，更新未读消息数
   * @param callBack 回调
   **/
  public void setAllMessagesRead(final BMXCallBack callBack) {
    new AsyncExecutor().exec(new AsyncExecutor.Task() {
      @Override
      public BMXErrorCode exec() {
        return setAllMessagesRead();
      }

      @Override
      public void onPostExecute(BMXErrorCode code) {
                if (callBack == null){
                    return;
                }
        callBack.onResult(code);
      }
    });
  }

  /**
   *  更新一条数据库存储消息的扩展字段信息
   * @param msg 需要更改扩展信息的消息此时msg部分已经更新扩展字椴信息
   * @param callBack 回调
   **/
  public void updateMessageExtension(final BMXMessage msg,final BMXCallBack callBack) {
    new AsyncExecutor().exec(new AsyncExecutor.Task() {
      @Override
      public BMXErrorCode exec() {
        return updateMessageExtension(msg);
      }

      @Override
      public void onPostExecute(BMXErrorCode code) {
                if (callBack == null){
                    return;
                }
        callBack.onResult(code);
      }
    });
  }

  /**
   *  插入一条消息
   * @param msg 插入的消息
   * @param callBack 回调
   **/
  public void insertMessage(final BMXMessage msg, final boolean isHistory, final BMXCallBack callBack) {
    new AsyncExecutor().exec(new AsyncExecutor.Task() {
      @Override
      public BMXErrorCode exec() {
        return insertMessage(msg, isHistory);
      }

      @Override
      public void onPostExecute(BMXErrorCode code) {
                if (callBack == null){
                    return;
                }
        callBack.onResult(code);
      }
    });
  }

  /**
   *  读取一条消息
   * @param msgId 需要读取的消息的消息id
   * @param callBack 回调
   **/
  public void loadMessage(final long msgId, final BMXDataCallBack<BMXMessage> callBack) {
    final BMXMessageList messageList = new BMXMessageList();
    new AsyncExecutor().exec(new AsyncExecutor.Task() {
      @Override
      public BMXErrorCode exec() {
        messageList.add(loadMessage(msgId));
        return BMXErrorCode.NoError;
      }

      @Override
      public void onPostExecute(BMXErrorCode code) {
                if (callBack == null){
                    return;
                }
        callBack.onResult(code, messageList.get(0));
      }
    });
  }

  /**
   *  删除会话中的所有消息
   * @param callBack 回调
   **/
  public void removeAllMessages(final BMXCallBack callBack) {
    new AsyncExecutor().exec(new AsyncExecutor.Task() {
      @Override
      public BMXErrorCode exec() {
        return removeAllMessages();
      }

      @Override
      public void onPostExecute(BMXErrorCode code) {
                if (callBack == null){
                    return;
                }
        callBack.onResult(code);
      }
    });
  }

  /**
   *  加载消息，如果不指定则从最新消息开始
   * @param refMsgId 加载消息的起始id
   * @param size 最大加载消息条数
   * @param arg3 加载消息的方向，默认是加载更早的消息
   * @param callBack 回调
   **/
  public void loadMessages(final long refMsgId, final  long size,
                           final  BMXConversation.Direction arg3,final BMXDataCallBack<BMXMessageList> callBack) {
    final  BMXMessageList result = new BMXMessageList();
    new AsyncExecutor().exec(new AsyncExecutor.Task() {
      @Override
      public BMXErrorCode exec() {
        return loadMessages(refMsgId, size, result, arg3);
      }

      @Override
      public void onPostExecute(BMXErrorCode code) {
        if (callBack == null){
            return;
        }
        callBack.onResult(code, result);
      }
    });
  }

  public void loadMessages(final long refMsgId, final  long size,
                           final BMXDataCallBack<BMXMessageList> callBack) {
    final  BMXMessageList result = new BMXMessageList();
    new AsyncExecutor().exec(new AsyncExecutor.Task() {
      @Override
      public BMXErrorCode exec() {
        return loadMessages(refMsgId, size,result);
      }

      @Override
      public void onPostExecute(BMXErrorCode code) {
        if (callBack == null){
            return;
        }
        callBack.onResult(code, result);
      }
    });
  }

  /**
   *  搜索消息，如果不指定则从最新消息开始
   * @param keywords 搜索消息的关键字
   * @param refTime 搜索消息的起始时间
   * @param size 最大加载消息条数
   * @param arg4 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
   * @param callBack 回调
   **/
  public void searchMessages(final String keywords, final  long refTime, final  long size,
                             final  BMXConversation.Direction arg4,final BMXDataCallBack<BMXMessageList> callBack) {
    final  BMXMessageList result = new BMXMessageList();
    new AsyncExecutor().exec(new AsyncExecutor.Task() {
      @Override
      public BMXErrorCode exec() {
        return searchMessages(keywords, refTime, size, result, arg4);
      }

      @Override
      public void onPostExecute(BMXErrorCode code) {
        if (callBack == null){
            return;
        }
        callBack.onResult(code, result);
      }
    });
  }

  public void searchMessages(final String keywords, final  long refTime, final  long size,
                             final BMXDataCallBack<BMXMessageList> callBack) {
    final  BMXMessageList result = new BMXMessageList();
    new AsyncExecutor().exec(new AsyncExecutor.Task() {
      @Override
      public BMXErrorCode exec() {
        return searchMessages(keywords, refTime, size, result);
      }

      @Override
      public void onPostExecute(BMXErrorCode code) {
        if (callBack == null){
            return;
        }
        callBack.onResult(code, result);
      }
    });
  }

  /**
   *  按照类型搜索消息，如果不指定则从最新消息开始
   * @param type 搜索消息的类型
   * @param refTime 搜索消息的起始时间
   * @param size 最大加载消息条数
   * @param arg4 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
   * @param callBack 回调
   **/
  public void searchMessages(final BMXMessage.ContentType type, final  long refTime,
                             final  long size, final  BMXConversation.Direction arg4,
                             final BMXDataCallBack<BMXMessageList> callBack) {
    final  BMXMessageList result = new BMXMessageList();
    new AsyncExecutor().exec(new AsyncExecutor.Task() {
      @Override
      public BMXErrorCode exec() {
        return searchMessages(type, refTime, size, result, arg4);
      }

      @Override
      public void onPostExecute(BMXErrorCode code) {
        if (callBack == null){
            return;
        }
        callBack.onResult(code, result);
      }
    });
  }

  public void searchMessages(final BMXMessage.ContentType type, final  long refTime,
                             final  long size, final BMXDataCallBack<BMXMessageList> callBack) {
    final  BMXMessageList result = new BMXMessageList();
    new AsyncExecutor().exec(new AsyncExecutor.Task() {
      @Override
      public BMXErrorCode exec() {
        return searchMessages(type, refTime, size, result);
      }

      @Override
      public void onPostExecute(BMXErrorCode code) {
        if (callBack == null){
            return;
        }
        callBack.onResult(code, result);
      }
    });
  }

  /**
   *  读取数据库当前会话所有消息数量，强制更新conversation的消息总数和未读消息数。
   * @param callBack 回调
   **/
  public void refreshConversation(final BMXCallBack callBack) {
    new AsyncExecutor().exec(new AsyncExecutor.Task() {
      @Override
      public BMXErrorCode exec() {
        return refreshConversation();
      }

      @Override
      public void onPostExecute(BMXErrorCode code) {
        if (callBack == null){
            return;
        }
        callBack.onResult(code);
      }
    });
  }
}
