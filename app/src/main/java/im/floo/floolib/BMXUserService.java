/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package im.floo.floolib;

/**
 *  用户Service
 **/
public class BMXUserService {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected BMXUserService(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BMXUserService obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        flooJNI.delete_BMXUserService(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   *  绑定设备推送token
   * @param token 设备token
   * @return BMXErrorCode
   **/
  public BMXErrorCode bindDevice(String token) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_bindDevice(swigCPtr, this, token));
  }

  /**
   *  获取设备列表
   * @param deviceList 设备列表，传入空列表函数返回后从此处获取返回的设备列表
   * @return BMXErrorCode
   */
  public BMXErrorCode getDeviceList(BMXDeviceList deviceList) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_getDeviceList(swigCPtr, this, BMXDeviceList.getCPtr(deviceList), deviceList));
  }

  /**
   *  获取用户详情，如果forceRefresh == true，则强制从服务端拉取
   * @param profile 用户profile信息，初始传入指向为空的shared_ptr对象，函数返回后从此处获取用户profile信息。
   * @param forceRefresh 是否强制从服务器拉取，本地获取失败的情况下会自动从服务器拉取
   * @return BMXErrorCode
   **/
  public BMXErrorCode getProfile(BMXUserProfile profile,boolean forceRefresh) {
    ListOfLongLong listOfLongLong = new ListOfLongLong();
    int iRet = flooJNI.BMXUserService_getProfile(swigCPtr, this, ListOfLongLong.getCPtr(listOfLongLong), listOfLongLong, forceRefresh);
    profile.swigCPtr = listOfLongLong.get(0);
    return BMXErrorCode.swigToEnum(iRet);
  }

  /**
   *  删除设备
   * @param device_sn 设备序列号
   * @return BMXErrorCode
   */
  public BMXErrorCode deleteDevice(int device_sn) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_deleteDevice(swigCPtr, this, device_sn));
  }


  /**
   *  设置昵称
   * @param nickname 用户昵称
   * @return BMXErrorCode
   **/
  public BMXErrorCode setNickname(String nickname) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_setNickname(swigCPtr, this, nickname));
  }

  /**
   *  上传头像
   * @param avatarPath 上传头像的本地地址
   * @param callback 上传回调函数
   * @return BMXErrorCode
   **/
  public BMXErrorCode uploadAvatar(String avatarPath, FileProgressListener callback) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_uploadAvatar(swigCPtr, this, avatarPath, callback));
  }

  /**
   *  下载头像，默认下载缩略图
   * @param profile 用户profile
   * @param thumbnail 是否下载缩略图，true下载缩略图，false下载原图
   * @param callback 下载回调函数
   * @return BMXErrorCode
   **/
  public BMXErrorCode downloadAvatar(BMXUserProfile profile, boolean thumbnail, FileProgressListener callback) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_downloadAvatar(swigCPtr, this, BMXUserProfile.getCPtr(profile), profile, thumbnail, callback));
  }

  /**
   *  设置公开扩展信息
   * @param publicInfo 公开扩展信息
   * @return BMXErrorCode
   **/
  public BMXErrorCode setPublicInfo(String publicInfo) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_setPublicInfo(swigCPtr, this, publicInfo));
  }

  /**
   *  设置私有扩展信息
   * @param privateInfo 私有扩展信息
   * @return BMXErrorCode
   **/
  public BMXErrorCode setPrivateInfo(String privateInfo) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_setPrivateInfo(swigCPtr, this, privateInfo));
  }

  /**
   *  设置加好友验证方式
   * @param mode 加好友验证方式
   * @return BMXErrorCode
   **/
  public BMXErrorCode setAddFriendAuthMode(BMXUserProfile.AddFriendAuthMode mode) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_setAddFriendAuthMode(swigCPtr, this, mode.swigValue()));
  }

  /**
   *  设置加好友验证问题
   * @param authQuestion 加好友验证问题
   * @return BMXErrorCode
   **/
  public BMXErrorCode setAuthQuestion(BMXUserProfile.AuthQuestion authQuestion) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_setAuthQuestion(swigCPtr, this, BMXUserProfile.AuthQuestion.getCPtr(authQuestion), authQuestion));
  }

  /**
   *  设置是否允许推送
   * @param enable 是否允许推送，true推送，false不推送
   * @return BMXErrorCode
   **/
  public BMXErrorCode setEnablePush(boolean enable) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_setEnablePush(swigCPtr, this, enable));
  }

  /**
   *  设置是否推送详情
   * @param enable 是否推送详情，true推送，false不推送
   * @return BMXErrorCode
   **/
  public BMXErrorCode setEnablePushDetaile(boolean enable) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_setEnablePushDetaile(swigCPtr, this, enable));
  }

  /**
   *  设置推送昵称
   * @param nickname 推送昵称
   * @return BMXErrorCode
   **/
  public BMXErrorCode setPushNickname(String nickname) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_setPushNickname(swigCPtr, this, nickname));
  }
  /**
   *  设置推送别名
   * @param alias 别名
   * @param bmxPushToken 推送token
   * @return BMXErrorCode
   **/
  public BMXErrorCode setPushAlias(String alias, String bmxPushToken) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_setPushAlias(swigCPtr, this, alias, bmxPushToken));
  }

  /**
   *  设置收到新消息是否声音提醒
   * @param enable 收到新消息是否声音提醒，true提醒，false不提醒
   * @return BMXErrorCode
   **/
  public BMXErrorCode setNotificationSound(boolean enable) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_setNotificationSound(swigCPtr, this, enable));
  }

  /**
   *  设置收到新消息是否震动
   * @param enable 收到新消息是否震动，true震动，false不震动
   * @return BMXErrorCode
   **/
  public BMXErrorCode setNotificationVibrate(boolean enable) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_setNotificationVibrate(swigCPtr, this, enable));
  }

  /**
   *  设置是否自动缩略图和语音附件
   * @param enable 是否自动缩略图和语音附件，true自动下载，false不会自动下载
   * @return BMXErrorCode
   **/
  public BMXErrorCode setAutoDownloadAttachment(boolean enable) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_setAutoDownloadAttachment(swigCPtr, this, enable));
  }

  /**
   *  设置是否自动同意入群邀请
   * @param enable 是否自动同意入群邀请，true同意，false不同意
   * @return BMXErrorCode
   **/
  public BMXErrorCode setAutoAcceptGroupInvite(boolean enable) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXUserService_setAutoAcceptGroupInvite(swigCPtr, this, enable));
  }

  /**
   *  添加用户状态监听者
   * @param listener 用户状态监听者
   **/
  public void addUserListener(BMXUserServiceListener listener) {
    flooJNI.BMXUserService_addUserListener(swigCPtr, this, BMXUserServiceListener.getCPtr(listener), listener);
  }

  /**
   *  移除用户状态监听者
   * @param listener 用户状态监听者
   **/
  public void removeUserListener(BMXUserServiceListener listener) {
    flooJNI.BMXUserService_removeUserListener(swigCPtr, this, BMXUserServiceListener.getCPtr(listener), listener);
  }

}
