/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package im.floo.floolib;

public class BMXPushService {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected BMXPushService(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BMXPushService obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        flooJNI.delete_BMXPushService(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   初始化推送sdk。在仅使用推送的情况下使用该接口初始化推送sdk。在同时使用IM功能的时候直接在BMXClient调用登陆功能即可。config对象初始化的时候需要传入平台类型和设备id。
   @param alias 推送初始化使用的当前用户别名
   @param bmxToken 推送初始化的时候App传入的使用的用户的token，无用户的状态下不传入即可。
   @return BMXErrorCode
   **/
  public BMXErrorCode start(String alias, String bmxToken) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_start__SWIG_0(swigCPtr, this, alias, bmxToken));
  }

  public BMXErrorCode start(String alias) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_start__SWIG_1(swigCPtr, this, alias));
  }

  public BMXErrorCode start() {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_start__SWIG_2(swigCPtr, this));
  }

  /**
   停止推送功能接口。
   @return BMXErrorCode
   **/
  public BMXErrorCode stop() {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_stop(swigCPtr, this));
  }

  /**
   恢复推送功能接口。
   @return BMXErrorCode
   **/
  public BMXErrorCode resume() {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_resume(swigCPtr, this));
  }

  /**
   解除用户别名绑定。
   @param alias 需要解除绑定的用户别名。
   @return BMXErrorCode
   **/
  public BMXErrorCode unbindAlias(String alias) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_unbindAlias(swigCPtr, this, alias));
  }

  /**
   获取登陆后使用的用户token。
   **/
  public String getToken() {
    return flooJNI.BMXPushService_getToken(swigCPtr, this);
  }

  /**
   获取推送token。
   **/
  public String getPushToken() {
    return flooJNI.BMXPushService_getPushToken(swigCPtr, this);
  }

  /**
   获取登陆后服务器返回的推送证书。
   **/
  public String getCert() {
    return flooJNI.BMXPushService_getCert(swigCPtr, this);
  }

  /**
   获取登陆后服务器返回的推送证书。
   **/
  public String getPushCert() {
    return flooJNI.BMXPushService_getPushCert(swigCPtr, this);
  }

  /**
   推送sdk当前的状态。
   @return PushSdkStatus
   **/
  public BMXPushService.PushSdkStatus status() {
    return BMXPushService.PushSdkStatus.swigToEnum(flooJNI.BMXPushService_status(swigCPtr, this));
  }

  /**
   推送绑定设备token。
   @param token 设备的推送token
   @return BMXErrorCode
   **/
  public BMXErrorCode bindDeviceToken(String token) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_bindDeviceToken(swigCPtr, this, token));
  }

  /**
   绑定推送设备的voiptoken。
   @param token 设备的voip推送token
   @return BMXErrorCode
   **/
  public BMXErrorCode bindVoipToken(String token) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_bindVoipToken(swigCPtr, this, token));
  }

  /**
   获取推送用户详情，如果forceRefresh == true，则强制从服务端拉取
   @param pushProfile 推送用户profile信息，初始传入指向为空的shared_ptr对象，函数返回后从此处获取用户profile信息。
   @param forceRefresh 是否强制从服务器拉取，本地获取失败的情况下会自动从服务器拉取
   @return BMXErrorCode
   **/
  public BMXErrorCode getPushProfile(BMXPushUserProfile pushProfile, boolean forceRefresh) {
    ListOfLongLong listOfLongLong = new ListOfLongLong();
    int iRet = flooJNI.BMXPushService_getPushProfile(swigCPtr, this, ListOfLongLong.getCPtr(listOfLongLong), listOfLongLong, forceRefresh);
    pushProfile.swigCPtr = listOfLongLong.get(0);
    return BMXErrorCode.swigToEnum(iRet);
  }

  /**
   设置推送用户的标签。
   @param tags 用户标签
   @param operationId 操作id。在回调通知中对应通知提醒。
   @return BMXErrorCode
   **/
  public BMXErrorCode setTags(TagList tags, String operationId) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_setTags(swigCPtr, this, TagList.getCPtr(tags), tags, operationId));
  }

  /**
   获取推送用户的标签。
   @param tags 用户标签
   @param operationId 操作id。在回调通知中对应通知提醒。
   @return BMXErrorCode
   **/
  public BMXErrorCode getTags(TagList tags, String operationId) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_getTags(swigCPtr, this, TagList.getCPtr(tags), tags, operationId));
  }

  /**
   删除推送用户的标签。
   @param tags 要删除用户标签
   @param operationId 操作id。在回调通知中对应通知提醒。
   @return BMXErrorCode
   **/
  public BMXErrorCode deleteTags(TagList tags, String operationId) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_deleteTags(swigCPtr, this, TagList.getCPtr(tags), tags, operationId));
  }

  /**
   清空推送用户的标签。
   @param operationId 操作id。在回调通知中对应通知提醒。
   @return BMXErrorCode
   **/
  public BMXErrorCode clearTags(String operationId) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_clearTags(swigCPtr, this, operationId));
  }

  /**
   设置推送用户的未读角标。
   @param count 用户未读角标数
   @return BMXErrorCode
   **/
  public BMXErrorCode setBadge(int count) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_setBadge(swigCPtr, this, count));
  }

  /**
   设置推送启用状态。默认为使用推送。
   @param enable 推送的启用状态
   @return BMXErrorCode
   **/
  public BMXErrorCode setPushMode(boolean enable) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_setPushMode__SWIG_0(swigCPtr, this, enable));
  }

  public BMXErrorCode setPushMode() {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_setPushMode__SWIG_1(swigCPtr, this));
  }

  /**
   设置允许推送时间。
   @param startHour 静默允许推送的起始时间小时
   @param endHour 静默允许推送的结束时间小时
   @return BMXErrorCode
   **/
  public BMXErrorCode setPushTime(int startHour, int endHour) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_setPushTime(swigCPtr, this, startHour, endHour));
  }

  /**
   设置推送静默的起始结束时间。
   @param startHour 静默推送的起始时间小时
   @param endHour 静默推送的结束时间小时
   @return BMXErrorCode
   **/
  public BMXErrorCode setSilenceTime(int startHour, int endHour) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_setSilenceTime(swigCPtr, this, startHour, endHour));
  }

  /**
   设置推送是否可以后台运行。默认是false。
   @param enable 推送后台运行状态。
   @return BMXErrorCode
   **/
  public BMXErrorCode setRunBackgroundMode(boolean enable) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_setRunBackgroundMode__SWIG_0(swigCPtr, this, enable));
  }

  public BMXErrorCode setRunBackgroundMode() {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_setRunBackgroundMode__SWIG_1(swigCPtr, this));
  }

  /**
   设置推送的地理围栏功能是否运行。
   @param enable 地理围栏功能是否运行。
   @param isAllow 用户是否主动弹出用户定位请求。
   @return BMXErrorCode
   **/
  public BMXErrorCode setGeoFenceMode(boolean enable, boolean isAllow) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_setGeoFenceMode__SWIG_0(swigCPtr, this, enable, isAllow));
  }

  public BMXErrorCode setGeoFenceMode(boolean enable) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_setGeoFenceMode__SWIG_1(swigCPtr, this, enable));
  }

  public BMXErrorCode setGeoFenceMode() {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_setGeoFenceMode__SWIG_2(swigCPtr, this));
  }

  /**
   清除指定id的通知。
   @param notificationId 通知id
   **/
  public void clearNotification(long notificationId) {
    flooJNI.BMXPushService_clearNotification(swigCPtr, this, notificationId);
  }

  public void clearAllNotifications() {
    flooJNI.BMXPushService_clearAllNotifications(swigCPtr, this);
  }

  /**
   发送推送上行消息，消息状态变化会通过listener通知
   @param content 发送的上行推送消息内容
   **/
  public void sendMessage(String content) {
    flooJNI.BMXPushService_sendMessage(swigCPtr, this, content);
  }

  /**
   加载数据库本地存储的推送消息。如果不指定则从最新消息开始
   @param refMsgId 加载推送消息的起始id
   @param size 最大加载消息条数
   @param result 数据库返回的加载本地推送消息列表
   @param arg3 加载推送消息的方向，默认是加载更早的消息
   **/
  public BMXErrorCode loadLocalPushMessages(long refMsgId, long size, BMXMessageList result, BMXPushService.PushDirection arg3) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_loadLocalPushMessages__SWIG_0(swigCPtr, this, refMsgId, size, BMXMessageList.getCPtr(result), result, arg3.swigValue()));
  }

  public BMXErrorCode loadLocalPushMessages(long refMsgId, long size, BMXMessageList result) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXPushService_loadLocalPushMessages__SWIG_1(swigCPtr, this, refMsgId, size, BMXMessageList.getCPtr(result), result));
  }

  /**
   * 添加推送监听者
   * @param listener 推送监听者
   **/
  public void addPushListener(BMXPushServiceListener listener) {
    flooJNI.BMXPushService_addPushListener(swigCPtr, this, BMXPushServiceListener.getCPtr(listener), listener);
  }

  /**
   * 移除推送监听者
   * @param listener 推送监听者
   **/
  public void removePushListener(BMXPushServiceListener listener) {
    flooJNI.BMXPushService_removePushListener(swigCPtr, this, BMXPushServiceListener.getCPtr(listener), listener);
  }

  /**
   * push sdk状态
   **/
  public enum PushSdkStatus {
    // 正在启动
    Starting(1),
    // 启动，在线
    Started,
    // 停止
    Stoped,
    // 离线
    Offline;

    public final int swigValue() {
      return swigValue;
    }

    public static PushSdkStatus swigToEnum(int swigValue) {
      PushSdkStatus[] swigValues = PushSdkStatus.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (PushSdkStatus swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + PushSdkStatus.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private PushSdkStatus() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private PushSdkStatus(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private PushSdkStatus(PushSdkStatus swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   * 本地推送消息搜索方向
   **/
  public enum PushDirection {
    // 取更旧消息
    Up,
    // 取更新消息
    Down;

    public final int swigValue() {
      return swigValue;
    }

    public static PushDirection swigToEnum(int swigValue) {
      PushDirection[] swigValues = PushDirection.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (PushDirection swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + PushDirection.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private PushDirection() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private PushDirection(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private PushDirection(PushDirection swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
