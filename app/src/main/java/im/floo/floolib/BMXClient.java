/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package im.floo.floolib;

import im.floo.AsyncExecutor;

/**
 *  客户端
 **/
public class BMXClient extends BMXNetworkListener {

  static {
    System.loadLibrary("floo");
  }

  private transient long swigCPtr;
  private transient boolean swigCMemOwnDerived;
  private BMXUserManager userManger;
  private BMXChatManager chatManager;
  private BMXRosterManager rosterManager;
  private BMXGroupManager groupManager;
  private BMXPushManager pushManager;

  protected BMXClient(long cPtr, boolean cMemoryOwn) {
    super(flooJNI.BMXClient_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BMXClient obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @Override
  protected void finalize() {
    delete();
  }

  @Override
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        flooJNI.delete_BMXClient(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   *  创建BMXClient
   * @param config 客户端本地已经创建好的BMXSDKConfig SDK配置对象
   * @return BMXClientPtr
   **/
  public static BMXClient create(BMXSDKConfig config) {
    long cPtr = flooJNI.BMXClient_create(BMXSDKConfig.getCPtr(config), config);
    return (cPtr == 0) ? null : new BMXClient(cPtr, true);
  }

  /**
   *  获取SDK设置
   * @return BMXSDKConfigPtr
   **/
  public BMXSDKConfig getSDKConfig() {
    long cPtr = flooJNI.BMXClient_getSDKConfig(swigCPtr, this);
    return (cPtr == 0) ? null : new BMXSDKConfig(cPtr, true);
  }

  /**
   *  获取用户Service
   * @return BMXUserService
   **/
  public BMXUserService getUserService() {
    return new BMXUserService(flooJNI.BMXClient_getUserService(swigCPtr, this), false);
  }

  /**
   *  获取聊天Service
   * @return BMXChatService
   **/
  public BMXChatService getChatService() {
    return new BMXChatService(flooJNI.BMXClient_getChatService(swigCPtr, this), false);
  }

  /**
   *  获取群组Service
   * @return BMXGroupService
   **/
  public BMXGroupService getGroupService() {
    return new BMXGroupService(flooJNI.BMXClient_getGroupService(swigCPtr, this), false);
  }

  /**
   *  获取好友Service
   * @return BMXRosterService
   **/
  public BMXRosterService getRosterService() {
    return new BMXRosterService(flooJNI.BMXClient_getRosterService(swigCPtr, this), false);
  }

  /**
   *  获取推送Service
   * @return BMXPushService
   **/
  public BMXPushService getPushService() {
    return new BMXPushService(flooJNI.BMXClient_getPushService(swigCPtr, this), false);
  }

  /**
   *  获取用户Manager
   * @return BMXUserManager
   **/
  public BMXUserManager getUserManager() {
    if (userManger == null) {
      userManger = new BMXUserManager(getUserService(), this);
    }
    return userManger;
  }

  /**
   *  获取聊天Manager
   * @return BMXChatManager
   **/
  public BMXChatManager getChatManager() {
    if (chatManager == null) {
      chatManager = new BMXChatManager(getChatService());
    }
    return chatManager;
  }

  /**
   *  获取群组Manager
   * @return BMXGroupManager
   **/
  public BMXGroupManager getGroupManager() {
    if (groupManager == null) {
      groupManager = new BMXGroupManager(getGroupService());
    }
    return groupManager;
  }

  /**
   *  获取好友Manager
   * @return BMXRosterManager
   **/
  public BMXRosterManager getRosterManager() {
    if (rosterManager == null) {
      rosterManager = new BMXRosterManager(getRosterService());
    }
    return rosterManager;
  }


  /**
   *  获取推送Manager
   * @return BMXPushManager
   **/
  public BMXPushManager getPushManager() {
    if (pushManager == null) {
      pushManager = new BMXPushManager(getPushService());
    }
    return pushManager;
  }

  /**
   *  注册新用户，username和password是必填参数
   * @param username 用户名
   * @param password 用户密码
   * @param bmxUserProfilePtr 注册成功后从该函数处获取新注册用户的Profile信息，初始传入指向为空的shared_ptr对象即可。
   * @return BMXErrorCode
   **/
  public BMXErrorCode signUpNewUser(String username, String password, BMXUserProfile bmxUserProfilePtr) {
    ListOfLongLong listOfLongLong = new ListOfLongLong();
    int iRet = flooJNI.BMXClient_signUpNewUser(swigCPtr, this, username, password, ListOfLongLong.getCPtr(listOfLongLong), listOfLongLong);
    bmxUserProfilePtr.swigCPtr = listOfLongLong.get(0);
    return  BMXErrorCode.swigToEnum(iRet);
  }

  /**
   *  通过用户名登录
   * @param name 用户名
   * @param password 用户密码
   * @return BMXErrorCode
   **/
  public BMXErrorCode signInByName(String name, String password) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXClient_signInByName(swigCPtr, this, name, password));
  }

  /**
   *  通过用户ID登录
   * @param arg0 用户id
   * @param password 用户密码
   * @return BMXErrorCode
   **/
  public BMXErrorCode signInById(long arg0, String password) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXClient_signInById(swigCPtr, this, arg0, password));
  }

  /**
   *  通过用户名快速登录（要求之前成功登录过，登录速度较快）
   * @param name 用户名
   * @param password 用户密码(用于sdk在内部token到期时自动更新用户token)
   * @return BMXErrorCode
   **/
  public BMXErrorCode fastSignInByName(String name, String password) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXClient_fastSignInByName(swigCPtr, this, name, password));
  }

  /**
   *  通过用户ID快速登录（要求之前成功登录过，登录速度较快）
   * @param uid 用户id
   * @param password 用户密码(用于sdk在内部token到期时自动更新用户token)
   * @return BMXErrorCode
   **/
  public BMXErrorCode fastSignInById(long uid, String password) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXClient_fastSignInById(swigCPtr, this, uid, password));
  }

  /**
   *  退出登录
   * @param uid 退出用户的uid（默认输入0则退出当前登陆用户）
   * @return BMXErrorCode
   **/
  public BMXErrorCode signOut(long uid, boolean ignoreUnbindDevice) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXClient_signOut__SWIG_0(swigCPtr, this, uid, ignoreUnbindDevice));
  }

  public BMXErrorCode signOut(long uid) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXClient_signOut__SWIG_1(swigCPtr, this, uid));
  }

  public BMXErrorCode signOut() {
    return BMXErrorCode.swigToEnum(flooJNI.BMXClient_signOut__SWIG_2(swigCPtr, this));
  }

  /**
   *  获取当前和服务器的连接状态
   * @return BMXConnectStatus
   **/
  public BMXConnectStatus connectStatus() {
    return BMXConnectStatus.swigToEnum(flooJNI.BMXClient_connectStatus(swigCPtr, this));
  }

  /**
   *  获取当前的登录状态
   * @return BMXSignInStatus
   **/
  public BMXSignInStatus signInStatus() {
    return BMXSignInStatus.swigToEnum(flooJNI.BMXClient_signInStatus(swigCPtr, this));
  }

  /**
   *  强制重新连接
   **/
  private void _reconnect() {
    flooJNI.BMXClient_reconnect(swigCPtr, this);
  }

  /**
   *  强制重新连接
   **/
  public void reconnect() {
    new AsyncExecutor().exec(new AsyncExecutor.SimpleTask() {
      @Override
      public void exec() {
        _reconnect();
      }
    });
  }

  /**
   *  处理网络状态发送变化
   * @param type 变化后的网络类型
   * @param reconnect 网络是否需要重连
   **/
  @Override
  public void onNetworkChanged(BMXNetworkType type, boolean reconnect) {
    flooJNI.BMXClient_onNetworkChanged(swigCPtr, this, type.swigValue(), reconnect);
  }

  /**
   *  断开网络连接
   **/
  private void _disconnect() {
    flooJNI.BMXClient_disconnect(swigCPtr, this);
  }

  /**
   *  断开网络连接
   **/
  public void disconnect() {
    new AsyncExecutor().exec(new AsyncExecutor.SimpleTask() {
      @Override
      public void exec() {
        _disconnect();
      }
    });
  }

  /**
   *  更改SDK的appId，本操作会同时更新BMXConfig中的appId。
   * @param appId 新变更的appId
   * @param appSecret 新变更的appSecret
   **/
  public BMXErrorCode changeAppId(String appId, String appSecret) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXClient_changeAppId__SWIG_0(swigCPtr, this, appId, appSecret));
  }

  /**
   *  更改SDK的appId，本操作会同时更新BMXConfig中的appId。
   * @param appId 新变更的appId
   **/
  public BMXErrorCode changeAppId(String appId) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXClient_changeAppId__SWIG_1(swigCPtr, this, appId));
  }

  /**
   *  获取app的服务器网络配置，在初始化SDK之后登陆之前调用，可以提前获取服务器配置加快登陆速度。
   * @param isLocal 为true则使用本地缓存的dns配置，为false则从服务器获取最新的配置。
   **/
  public BMXErrorCode initializeServerConfig(boolean isLocal) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXClient_initializeServerConfig(swigCPtr, this, isLocal));
  }

  /**
   *  发送消息，消息状态变化会通过listener通知，在发送群组消息且指定的群组为开启群组已读回执的情况下，
   * 该接口会自动获取群成员列表id并且填充到message config中去，无需客户端自己进行群组成员列表的填充操作。
   * @param msg 发送的消息
   **/
  public void sendMessage(BMXMessage msg) {
    flooJNI.BMXClient_sendMessage(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

}
