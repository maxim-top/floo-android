/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package im.floo.floolib;

public class BMXRTCSignalServiceListener {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected BMXRTCSignalServiceListener(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BMXRTCSignalServiceListener obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        flooJNI.delete_BMXRTCSignalServiceListener(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    flooJNI.BMXRTCSignalServiceListener_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    flooJNI.BMXRTCSignalServiceListener_change_ownership(this, swigCPtr, true);
  }

  public BMXRTCSignalServiceListener() {
    this(flooJNI.new_BMXRTCSignalServiceListener(), true);
    flooJNI.BMXRTCSignalServiceListener_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public void onSessionCreate(BMXRTCSession session, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onSessionCreate(swigCPtr, this, BMXRTCSession.getCPtr(session), session, error, reason); else flooJNI.BMXRTCSignalServiceListener_onSessionCreateSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, error, reason);
  }

  public void onSessionAttach(BMXRTCSession session, BMXRTCSignalService.HandlerType type, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onSessionAttach(swigCPtr, this, BMXRTCSession.getCPtr(session), session, type.swigValue(), error, reason); else flooJNI.BMXRTCSignalServiceListener_onSessionAttachSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, type.swigValue(), error, reason);
  }

  public void onRoomCreate(BMXRTCSession session, BMXRTCRoom room, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onRoomCreate(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, error, reason); else flooJNI.BMXRTCSignalServiceListener_onRoomCreateSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, error, reason);
  }

  public void onRoomDestroy(BMXRTCSession session, long roomId, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onRoomDestroy(swigCPtr, this, BMXRTCSession.getCPtr(session), session, roomId, error, reason); else flooJNI.BMXRTCSignalServiceListener_onRoomDestroySwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, roomId, error, reason);
  }

  public void onRoomEdit(BMXRTCSession session, BMXRTCRoom room, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onRoomEdit(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, error, reason); else flooJNI.BMXRTCSignalServiceListener_onRoomEditSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, error, reason);
  }

  public void onRoomExist(BMXRTCSession session, long roomId, boolean exist, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onRoomExist(swigCPtr, this, BMXRTCSession.getCPtr(session), session, roomId, exist, error, reason); else flooJNI.BMXRTCSignalServiceListener_onRoomExistSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, roomId, exist, error, reason);
  }

  public void onRoomAllowed(BMXRTCSession session, BMXRTCRoom room, TagList tokens, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onRoomAllowed(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, TagList.getCPtr(tokens), tokens, error, reason); else flooJNI.BMXRTCSignalServiceListener_onRoomAllowedSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, TagList.getCPtr(tokens), tokens, error, reason);
  }

  public void onRoomKick(BMXRTCSession session, BMXRTCRoom room, long userId, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onRoomKick(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, userId, error, reason); else flooJNI.BMXRTCSignalServiceListener_onRoomKickSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, userId, error, reason);
  }

  public void onRoomModerate(BMXRTCSession session, BMXRTCRoom room, long userId, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onRoomModerate(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, userId, error, reason); else flooJNI.BMXRTCSignalServiceListener_onRoomModerateSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, userId, error, reason);
  }

  public void onRoomList(BMXRTCSession session, BMXRTCRooms rooms, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onRoomList(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRooms.getCPtr(rooms), rooms, error, reason); else flooJNI.BMXRTCSignalServiceListener_onRoomListSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRooms.getCPtr(rooms), rooms, error, reason);
  }

  public void onRoomListParticipants(BMXRTCSession session, BMXRTCRoom room, BMXRTCRoomParticipants participants, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onRoomListParticipants(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, BMXRTCRoomParticipants.getCPtr(participants), participants, error, reason); else flooJNI.BMXRTCSignalServiceListener_onRoomListParticipantsSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, BMXRTCRoomParticipants.getCPtr(participants), participants, error, reason);
  }

  public void onPubJoinRoom(BMXRTCSession session, BMXRTCRoom room, BMXRTCPublishers publishers, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onPubJoinRoom(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, BMXRTCPublishers.getCPtr(publishers), publishers, error, reason); else flooJNI.BMXRTCSignalServiceListener_onPubJoinRoomSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, BMXRTCPublishers.getCPtr(publishers), publishers, error, reason);
  }

  public void onOtherPubJoinRoom(BMXRTCSession session, BMXRTCRoom room, BMXRTCPublishers publishers) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onOtherPubJoinRoom(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, BMXRTCPublishers.getCPtr(publishers), publishers); else flooJNI.BMXRTCSignalServiceListener_onOtherPubJoinRoomSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, BMXRTCPublishers.getCPtr(publishers), publishers);
  }

  public void onPubConfigure(BMXRTCSession session, BMXRTCRoom room, BMXRoomSDPInfo sdp, BMXRTCStreams streams, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onPubConfigure(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, BMXRoomSDPInfo.getCPtr(sdp), sdp, BMXRTCStreams.getCPtr(streams), streams, error, reason); else flooJNI.BMXRTCSignalServiceListener_onPubConfigureSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, BMXRoomSDPInfo.getCPtr(sdp), sdp, BMXRTCStreams.getCPtr(streams), streams, error, reason);
  }

  public void onPubUnPublish(BMXRTCSession session, BMXRTCRoom room, int senderId, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onPubUnPublish(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, senderId, error, reason); else flooJNI.BMXRTCSignalServiceListener_onPubUnPublishSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, senderId, error, reason);
  }

  public void onPublishWebrtcUp(BMXRTCSession session) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onPublishWebrtcUp(swigCPtr, this, BMXRTCSession.getCPtr(session), session); else flooJNI.BMXRTCSignalServiceListener_onPublishWebrtcUpSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session);
  }

  public void onSubJoinRoomUpdate(BMXRTCSession session, BMXRTCRoom room, BMXRoomSDPInfo sdp, long senderId, BMXRTCStreams streams, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onSubJoinRoomUpdate(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, BMXRoomSDPInfo.getCPtr(sdp), sdp, senderId, BMXRTCStreams.getCPtr(streams), streams, error, reason); else flooJNI.BMXRTCSignalServiceListener_onSubJoinRoomUpdateSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, BMXRoomSDPInfo.getCPtr(sdp), sdp, senderId, BMXRTCStreams.getCPtr(streams), streams, error, reason);
  }

  public void onSubStart(BMXRTCSession session, BMXRTCRoom room, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onSubStart(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, error, reason); else flooJNI.BMXRTCSignalServiceListener_onSubStartSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, error, reason);
  }

  public void onSubPause(BMXRTCSession session, BMXRTCRoom room, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onSubPause(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, error, reason); else flooJNI.BMXRTCSignalServiceListener_onSubPauseSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, error, reason);
  }

  public void onSubUnsubscribe(BMXRTCSession session, BMXRTCRoom room, BMXRTCStreams streams, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onSubUnsubscribe(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, BMXRTCStreams.getCPtr(streams), streams, error, reason); else flooJNI.BMXRTCSignalServiceListener_onSubUnsubscribeSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, BMXRTCStreams.getCPtr(streams), streams, error, reason);
  }

  public void onSubConfigure(BMXRTCSession session, BMXRTCRoom room, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onSubConfigure(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, error, reason); else flooJNI.BMXRTCSignalServiceListener_onSubConfigureSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, error, reason);
  }

  public void onSubSwitch(BMXRTCSession session, BMXRTCRoom room, long publisher, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onSubSwitch(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, publisher, error, reason); else flooJNI.BMXRTCSignalServiceListener_onSubSwitchSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, BMXRTCRoom.getCPtr(room), room, publisher, error, reason);
  }

  public void onLeaveRoom(BMXRTCSession session, long roomId, long senderId, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onLeaveRoom(swigCPtr, this, BMXRTCSession.getCPtr(session), session, roomId, senderId, error, reason); else flooJNI.BMXRTCSignalServiceListener_onLeaveRoomSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, roomId, senderId, error, reason);
  }

  public void onSubscribeWebrtcUp(BMXRTCSession session, long senderId) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onSubscribeWebrtcUp(swigCPtr, this, BMXRTCSession.getCPtr(session), session, senderId); else flooJNI.BMXRTCSignalServiceListener_onSubscribeWebrtcUpSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, senderId);
  }

  public void onMediaInfo(BMXRTCSession session, long senderId, BMXTrackType type, boolean receiving, String mid) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onMediaInfo(swigCPtr, this, BMXRTCSession.getCPtr(session), session, senderId, type.swigValue(), receiving, mid); else flooJNI.BMXRTCSignalServiceListener_onMediaInfoSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, senderId, type.swigValue(), receiving, mid);
  }

  public void onSlowlink(BMXRTCSession session, long senderId, boolean uplink, int nacks) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onSlowlink(swigCPtr, this, BMXRTCSession.getCPtr(session), session, senderId, uplink, nacks); else flooJNI.BMXRTCSignalServiceListener_onSlowlinkSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, senderId, uplink, nacks);
  }

  public void onHangup(BMXRTCSession session, long senderId, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onHangup(swigCPtr, this, BMXRTCSession.getCPtr(session), session, senderId, reason); else flooJNI.BMXRTCSignalServiceListener_onHangupSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, senderId, reason);
  }

  public void onSessionHangup(BMXRTCSession session, long error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onSessionHangup(swigCPtr, this, BMXRTCSession.getCPtr(session), session, error, reason); else flooJNI.BMXRTCSignalServiceListener_onSessionHangupSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, error, reason);
  }

  public void onSessionDetach(BMXRTCSession session, BMXRTCSignalService.HandlerType type, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onSessionDetach(swigCPtr, this, BMXRTCSession.getCPtr(session), session, type.swigValue(), error, reason); else flooJNI.BMXRTCSignalServiceListener_onSessionDetachSwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, BMXRTCSession.getCPtr(session), session, type.swigValue(), error, reason);
  }

  public void onSessionDestroy(long sessionId, int error, String reason) {
    if (getClass() == BMXRTCSignalServiceListener.class) flooJNI.BMXRTCSignalServiceListener_onSessionDestroy(swigCPtr, this, sessionId, error, reason); else flooJNI.BMXRTCSignalServiceListener_onSessionDestroySwigExplicitBMXRTCSignalServiceListener(swigCPtr, this, sessionId, error, reason);
  }

  public void registerRTCSignalService(BMXRTCSignalService service) {
    flooJNI.BMXRTCSignalServiceListener_registerRTCSignalService(swigCPtr, this, BMXRTCSignalService.getCPtr(service), service);
  }

}
