/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package im.floo.floolib;

/**
 *  聊天Service
 **/
public class BMXChatService {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected BMXChatService(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BMXChatService obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @Override
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        flooJNI.delete_BMXChatService(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
    发送消息，消息状态变化会通过listener通知
   @param msg 发送的消息
   **/
  public void sendMessage(BMXMessage msg) {
    flooJNI.BMXChatService_sendMessage(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

  /**
    重新发送消息，消息状态变化会通过listener通知
   @param msg 重新发送的消息
   **/
  public void resendMessage(BMXMessage msg) {
    flooJNI.BMXChatService_resendMessage(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

  /**
    撤回消息，消息状态变化会通过listener通知
   @param msg 撤回的消息
   **/
  public void recallMessage(BMXMessage msg) {
    flooJNI.BMXChatService_recallMessage(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

  /**
    合并转发消息
   @param list 转发的消息列表
   @param to 消息被转发到的会话
   @param newMsg 转发的消息列表合并后生成的新的单条转发消息
   @return BMXErrorCode
   **/
  public BMXErrorCode forwardMessage(BMXMessageList list, BMXConversation to, BMXMessage newMsg) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXChatService_forwardMessage__SWIG_0(swigCPtr, this, BMXMessageList.getCPtr(list), list, BMXConversation.getCPtr(to), to, BMXMessage.getCPtr(newMsg), newMsg));
  }

  /**
    简单转发消息，用户应当通过BMXMessage::createForwardMessage()先创建转发消息
   @param msg 转发的消息
   **/
  public void forwardMessage(BMXMessage msg) {
    flooJNI.BMXChatService_forwardMessage__SWIG_1(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

  /**
   *  发送已读回执
   * @param msg 需要发送已读回执的消息
   **/
  public void ackMessage(BMXMessage msg) {
    flooJNI.BMXChatService_ackMessage(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

  /**
   *  发送送达回执
   * @param msg 需要发送送达回执的消息
   **/
  public void ackMessageDelivered(BMXMessage msg) {
    flooJNI.BMXChatService_ackMessageDelivered(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

  /**
   *  发送已播放回执
   * @param msg 需要发送已读回播放的消息
   **/
  public void ackPlayMessage(BMXMessage msg) {
    flooJNI.BMXChatService_ackPlayMessage(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

  /**
   *  标记此消息为未读，该消息同步到当前用户的所有设备
   * @param msg 需要发送消息已读取消的消息
   **/
  public void readCancel(BMXMessage msg) {
    flooJNI.BMXChatService_readCancel(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

  /**
   *  标记此消息及之前全部消息为已读，该消息同步到当前用户的所有设备
   * @param msg 需要标记为此消息以前全部消息为已读的消息
   **/
  public void readAllMessage(BMXMessage msg) {
    flooJNI.BMXChatService_readAllMessage(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

  /**
   *  删除此消息，该消息同步到当前用户的其它设备
   * @param msg 需要删除的消息
   * @param synchronize 是否同步到其它设备，不同步的情况下只会删除本地存储的该条消息
   **/
  public void removeMessage(BMXMessage msg, boolean synchronize) {
    flooJNI.BMXChatService_removeMessage__SWIG_0(swigCPtr, this, BMXMessage.getCPtr(msg), msg, synchronize);
  }

  public void removeMessage(BMXMessage msg) {
    flooJNI.BMXChatService_removeMessage__SWIG_1(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

  /**
   *  下载缩略图，下载状态变化和进度通过listener通知
   * 缩略图生成策略，1 - 第三方服务器生成， 2 - 本地服务器生成，默认值是 1。
   * @param msg 需要下载缩略图的消息
   * @param strategy 缩略图生成策略，1 - 第三方服务器生成， 2 - 本地服务器生成，默认值是 1。
   **/
  public void downloadThumbnail(BMXMessage msg, BMXChatService.ThumbnailStrategy strategy) {
    flooJNI.BMXChatService_downloadThumbnail__SWIG_0(swigCPtr, this, BMXMessage.getCPtr(msg), msg, strategy.swigValue());
  }

  public void downloadThumbnail(BMXMessage msg) {
    flooJNI.BMXChatService_downloadThumbnail__SWIG_1(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

  /**
   *  下载附件，下载状态变化和进度通过listener通知
   * @param msg 需要下载附件的消息
   **/
  public void downloadAttachment(BMXMessage msg) {
    flooJNI.BMXChatService_downloadAttachment(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

  /**
   *  下载附件，下载状态变化和进度通过listener通知
   * @param msgId 需要下载附件的消息
   * @param url 文件远程地址
   * @param path 文件本地路径
   **/
  public void downloadAttachmentByUrl(long msgId, String url, String path) {
    flooJNI.BMXChatService_downloadAttachmentByUrl(swigCPtr, this, msgId, url, path);
  }

  /**
   *  取消上传附件
   * @param msg 需要取消上传附件的消息
   **/
  public void cancelUploadAttachment(BMXMessage msg) {
    flooJNI.BMXChatService_cancelUploadAttachment(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

  /**
   *  取消上传附件
   * @param msg 需要取消上传附件的消息
   **/
  public void cancelDownloadAttachment(BMXMessage msg) {
    flooJNI.BMXChatService_cancelDownloadAttachment(swigCPtr, this, BMXMessage.getCPtr(msg), msg);
  }

  /**
   *  上传或下载中的文件数
   * @return 文件数
   **/
  public int transferingNum() {
    return flooJNI.BMXChatService_transferingNum(swigCPtr, this);
  }

  /**
   *  插入消息
   * @param list 插入消息列表
   * @return BMXErrorCode
   **/
  public BMXErrorCode insertMessages(BMXMessageList list) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXChatService_insertMessages(swigCPtr, this, BMXMessageList.getCPtr(list), list));
  }

  /**
   *  读取一条消息
   * @param msgId 需要获取消息的消息id
   * @return BMXMessage
   **/
  public BMXMessage getMessage(long msgId) {
    long cPtr = flooJNI.BMXChatService_getMessage(swigCPtr, this, msgId);
    return (cPtr == 0) ? null : new BMXMessage(cPtr, true);
  }

  /**
   *  删除会话
   * @param conversationId 需要删除会话的会话id
   * @param synchronize 是否同步删除其它设备该会话，默认为false，仅删除本设备会话
   **/
  public void deleteConversation(long conversationId, boolean synchronize) {
    flooJNI.BMXChatService_deleteConversation__SWIG_0(swigCPtr, this, conversationId, synchronize);
  }

  public void deleteConversation(long conversationId) {
    flooJNI.BMXChatService_deleteConversation__SWIG_1(swigCPtr, this, conversationId);
  }

  /**
   *  打开一个会话
   * @param conversationId 需要打开的会话的会话id
   * @param type 会话的类型，单聊还是群聊。
   * @param createIfNotExist 会话不存在的情况下是否要创建本地会话，默认为创建
   * @return BMXConversation
   **/
  public BMXConversation openConversation(long conversationId, BMXConversation.Type type, boolean createIfNotExist) {
    long cPtr = flooJNI.BMXChatService_openConversation__SWIG_0(swigCPtr, this, conversationId, type.swigValue(), createIfNotExist);
    return (cPtr == 0) ? null : new BMXConversation(cPtr, true);
  }

  public BMXConversation openConversation(long conversationId, BMXConversation.Type type) {
    long cPtr = flooJNI.BMXChatService_openConversation__SWIG_1(swigCPtr, this, conversationId, type.swigValue());
    return (cPtr == 0) ? null : new BMXConversation(cPtr, true);
  }

  /**
   *  获取附件保存路径
   * @return std::string
   **/
  public String attachmentDir() {
    return flooJNI.BMXChatService_attachmentDir(swigCPtr, this);
  }

  /**
   *  获取会话的附件保存路径
   * @param conversationId 需要获取会话附件路径的会话id
   * @return std::string
   **/
  public String attachmentDirForConversation(long conversationId) {
    return flooJNI.BMXChatService_attachmentDirForConversation(swigCPtr, this, conversationId);
  }

  /**
   *  获取所有会话
   * @return BMXConversationList
   **/
  public BMXConversationList getAllConversations() {
    return new BMXConversationList(flooJNI.BMXChatService_getAllConversations(swigCPtr, this), true);
  }

  /**
   *  获取所有会话的全部未读数（标记为屏蔽的个人和群组的未读数不统计在内）
   * @return int
   **/
  public int getAllConversationsUnreadCount() {
    return flooJNI.BMXChatService_getAllConversationsUnreadCount(swigCPtr, this);
  }

  /**
   *  拉取历史消息
   * @param conversation 需要拉取历史消息的会话
   * @param refMsgId 拉取会话消息的起始消息Id
   * @param size 拉取的最大消息条数
   * @param result 拉取操作获取的消息列表，外部初始化传入空列表。
   * @return BMXErrorCode
   **/
  public BMXErrorCode retrieveHistoryMessages(BMXConversation conversation, long refMsgId, long size, BMXMessageList result) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXChatService_retrieveHistoryMessages(swigCPtr, this, BMXConversation.getCPtr(conversation), conversation, refMsgId, size, BMXMessageList.getCPtr(result), result));
  }

  /**
   *  搜索消息
   * @param keywords 搜索的关键字
   * @param refTime 搜索消息的起始时间
   * @param size 搜索的最大消息条数
   * @param result 搜索到的消息结果列表，外部初始化传入空列表。
   * @param arg4 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
   * @return BMXErrorCode
   **/
  public BMXErrorCode searchMessagesByKeyWords(String keywords, long refTime, long size, BMXMessageListList result, BMXConversation.Direction arg4) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXChatService_searchMessagesByKeyWords__SWIG_0(swigCPtr, this, keywords, refTime, size, BMXMessageListList.getCPtr(result), result, arg4.swigValue()));
  }

  public BMXErrorCode searchMessagesByKeyWords(String keywords, long refTime, long size, BMXMessageListList result) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXChatService_searchMessagesByKeyWords__SWIG_1(swigCPtr, this, keywords, refTime, size, BMXMessageListList.getCPtr(result), result));
  }


  /**
   *  搜索消息
   * @param keywords 搜索的关键字
   * @param refTime 搜索消息的起始时间
   * @param size 搜索的最大消息条数
   * @param result 搜索到的消息结果列表，外部初始化传入空列表。
   * @param arg4 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
   * @return BMXErrorCode
   **/
  public BMXErrorCode searchMessages(String keywords, long refTime, long size, BMXMessageListList result, BMXConversation.Direction arg4) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXChatService_searchMessages__SWIG_0(swigCPtr, this, keywords, refTime, size, BMXMessageListList.getCPtr(result), result, arg4.swigValue()));
  }

  public BMXErrorCode searchMessages(String keywords, long refTime, long size, BMXMessageListList result) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXChatService_searchMessages__SWIG_1(swigCPtr, this, keywords, refTime, size, BMXMessageListList.getCPtr(result), result));
  }

  /**
   *  获取发送的群组消息已读用户id列表
   * @param msg 需要获取已读用户id列表的消息
   * @param groupMemberIdList 对该条消息已读的用户id列表，初始传入为空列表
   * @return BMXErrorCode
   **/
  public BMXErrorCode getGroupAckMessageUserIdList(BMXMessage msg, ListOfLongLong groupMemberIdList) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXChatService_getGroupAckMessageUserIdList(swigCPtr, this, BMXMessage.getCPtr(msg), msg, ListOfLongLong.getCPtr(groupMemberIdList), groupMemberIdList));
  }

  /**
   *  获取发送的群组消息未读用户id列表
   * @param msg 需要获取未读用户id列表的消息
   * @param groupMemberIdList 对该条消息未读的用户id列表，初始传入为空列表
   * @return BMXErrorCode
   **/
  public BMXErrorCode getGroupAckMessageUnreadUserIdList(BMXMessage msg, ListOfLongLong groupMemberIdList) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXChatService_getGroupAckMessageUnreadUserIdList(swigCPtr, this, BMXMessage.getCPtr(msg), msg, ListOfLongLong.getCPtr(groupMemberIdList), groupMemberIdList));
  }

  /**
   *  获取发送的群组消息已播放用户id列表
   * @param msg 需要获取已播放用户id列表的消息
   * @param groupMemberIdList 对该条消息已播放的用户id列表，初始传入为空列表
   * @return BMXErrorCode
   **/
  public BMXErrorCode getGroupPlayAckMessageUserIdList(BMXMessage msg, ListOfLongLong groupMemberIdList) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXChatService_getGroupPlayAckMessageUserIdList(swigCPtr, this, BMXMessage.getCPtr(msg), msg, ListOfLongLong.getCPtr(groupMemberIdList), groupMemberIdList));
  }

  /**
   *  获取发送的群组消息未播放用户id列表
   * @param msg 需要获取未播放用户id列表的消息
   * @param groupMemberIdList 对该条消息未播放的用户id列表，初始传入为空列表
   * @return BMXErrorCode
   **/
  public BMXErrorCode getGroupUnPlayAckMessageUserIdList(BMXMessage msg, ListOfLongLong groupMemberIdList) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXChatService_getGroupUnPlayAckMessageUserIdList(swigCPtr, this, BMXMessage.getCPtr(msg), msg, ListOfLongLong.getCPtr(groupMemberIdList), groupMemberIdList));
  }

  /**
   *  添加聊天监听者
   * @param listener 聊天监听者
   **/
  public void addChatListener(BMXChatServiceListener listener) {
    flooJNI.BMXChatService_addChatListener(swigCPtr, this, BMXChatServiceListener.getCPtr(listener), listener);
  }

  /**
   *  移除聊天监听者
   * @param listener 聊天监听者
   **/
  public void removeChatListener(BMXChatServiceListener listener) {
    flooJNI.BMXChatService_removeChatListener(swigCPtr, this, BMXChatServiceListener.getCPtr(listener), listener);
  }

  /**
   *  缩略图生成策略,
   **/
  public enum ThumbnailStrategy {
    ThirdpartyServerCreate(1),
    LocalServerCreate;

    public final int swigValue() {
      return swigValue;
    }

    public static ThumbnailStrategy swigToEnum(int swigValue) {
      ThumbnailStrategy[] swigValues = ThumbnailStrategy.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (ThumbnailStrategy swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + ThumbnailStrategy.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private ThumbnailStrategy() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private ThumbnailStrategy(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private ThumbnailStrategy(ThumbnailStrategy swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
