/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package im.floo.floolib;

/**
 *  群组
 **/
public class BMXGroup extends BMXBaseObject {
  public transient long swigCPtr;
  private transient boolean swigCMemOwnDerived;

  protected BMXGroup(long cPtr, boolean cMemoryOwn) {
    super(flooJNI.BMXGroup_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public BMXGroup() {
    super(flooJNI.BMXGroup_SWIGSmartPtrUpcast(0), true);
    swigCMemOwnDerived = false;
    swigCPtr = 0;
  }

  protected static long getCPtr(BMXGroup obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        flooJNI.delete_BMXGroup(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   *  群成员
   **/
  static public class Member {
    private transient long swigCPtr;
    private transient boolean swigCMemOwn;
  
    protected Member(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Member obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          flooJNI.delete_BMXGroup_Member(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public Member(long uid, String nickname, long createTime) {
      this(flooJNI.new_BMXGroup_Member(uid, nickname, createTime), true);
    }
  
    public void setMUid(long value) {
      flooJNI.BMXGroup_Member_mUid_set(swigCPtr, this, value);
    }
  
    public long getMUid() {
      return flooJNI.BMXGroup_Member_mUid_get(swigCPtr, this);
    }
  
    public void setMGroupNickname(String value) {
      flooJNI.BMXGroup_Member_mGroupNickname_set(swigCPtr, this, value);
    }
  
    public String getMGroupNickname() {
      return flooJNI.BMXGroup_Member_mGroupNickname_get(swigCPtr, this);
    }
  
    public void setMCreateTime(long value) {
      flooJNI.BMXGroup_Member_mCreateTime_set(swigCPtr, this, value);
    }
  
    public long getMCreateTime() {
      return flooJNI.BMXGroup_Member_mCreateTime_get(swigCPtr, this);
    }
  
  }

  /**
   *  群禁言成员
   **/
  static public class BannedMember {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected BannedMember(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(BannedMember obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          flooJNI.delete_BMXGroup_BannedMember(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public BannedMember() {
      this(flooJNI.new_BMXGroup_BannedMember(), true);
    }
  
    public void setMUid(long value) {
      flooJNI.BMXGroup_BannedMember_mUid_set(swigCPtr, this, value);
    }
  
    public long getMUid() {
      return flooJNI.BMXGroup_BannedMember_mUid_get(swigCPtr, this);
    }
  
    public void setMGroupNickname(String value) {
      flooJNI.BMXGroup_BannedMember_mGroupNickname_set(swigCPtr, this, value);
    }
  
    public String getMGroupNickname() {
      return flooJNI.BMXGroup_BannedMember_mGroupNickname_get(swigCPtr, this);
    }
  
    public void setMCreateTime(long value) {
      flooJNI.BMXGroup_BannedMember_mCreateTime_set(swigCPtr, this, value);
    }
  
    public long getMCreateTime() {
      return flooJNI.BMXGroup_BannedMember_mCreateTime_get(swigCPtr, this);
    }
  
    public void setMExpired(long value) {
      flooJNI.BMXGroup_BannedMember_mExpired_set(swigCPtr, this, value);
    }
  
    public long getMExpired() {
      return flooJNI.BMXGroup_BannedMember_mExpired_get(swigCPtr, this);
    }
  
  }

  /**
   *  群共享文件
   **/
  static public class SharedFile {
    private transient long swigCPtr;
    private transient boolean swigCMemOwn;
  
    protected SharedFile(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(SharedFile obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          flooJNI.delete_BMXGroup_SharedFile(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public SharedFile() {
      this(flooJNI.new_BMXGroup_SharedFile(), true);
    }
  
    public void setMFileId(long value) {
      flooJNI.BMXGroup_SharedFile_mFileId_set(swigCPtr, this, value);
    }
  
    public long getMFileId() {
      return flooJNI.BMXGroup_SharedFile_mFileId_get(swigCPtr, this);
    }
  
    public void setMGroupId(long value) {
      flooJNI.BMXGroup_SharedFile_mGroupId_set(swigCPtr, this, value);
    }
  
    public long getMGroupId() {
      return flooJNI.BMXGroup_SharedFile_mGroupId_get(swigCPtr, this);
    }
  
    public void setMUploader(long value) {
      flooJNI.BMXGroup_SharedFile_mUploader_set(swigCPtr, this, value);
    }
  
    public long getMUploader() {
      return flooJNI.BMXGroup_SharedFile_mUploader_get(swigCPtr, this);
    }
  
    public void setMSize(int value) {
      flooJNI.BMXGroup_SharedFile_mSize_set(swigCPtr, this, value);
    }
  
    public int getMSize() {
      return flooJNI.BMXGroup_SharedFile_mSize_get(swigCPtr, this);
    }
  
    public void setMCreateTime(long value) {
      flooJNI.BMXGroup_SharedFile_mCreateTime_set(swigCPtr, this, value);
    }
  
    public long getMCreateTime() {
      return flooJNI.BMXGroup_SharedFile_mCreateTime_get(swigCPtr, this);
    }
  
    public void setMUpdateTime(long value) {
      flooJNI.BMXGroup_SharedFile_mUpdateTime_set(swigCPtr, this, value);
    }
  
    public long getMUpdateTime() {
      return flooJNI.BMXGroup_SharedFile_mUpdateTime_get(swigCPtr, this);
    }
  
    public void setMRatelUrl(String value) {
      flooJNI.BMXGroup_SharedFile_mRatelUrl_set(swigCPtr, this, value);
    }
  
    public String getMRatelUrl() {
      return flooJNI.BMXGroup_SharedFile_mRatelUrl_get(swigCPtr, this);
    }
  
    public void setMUrl(String value) {
      flooJNI.BMXGroup_SharedFile_mUrl_set(swigCPtr, this, value);
    }
  
    public String getMUrl() {
      return flooJNI.BMXGroup_SharedFile_mUrl_get(swigCPtr, this);
    }
  
    public void setMPath(String value) {
      flooJNI.BMXGroup_SharedFile_mPath_set(swigCPtr, this, value);
    }
  
    public String getMPath() {
      return flooJNI.BMXGroup_SharedFile_mPath_get(swigCPtr, this);
    }
  
    public void setMDisplayName(String value) {
      flooJNI.BMXGroup_SharedFile_mDisplayName_set(swigCPtr, this, value);
    }
  
    public String getMDisplayName() {
      return flooJNI.BMXGroup_SharedFile_mDisplayName_get(swigCPtr, this);
    }
  
    public void setMType(String value) {
      flooJNI.BMXGroup_SharedFile_mType_set(swigCPtr, this, value);
    }
  
    public String getMType() {
      return flooJNI.BMXGroup_SharedFile_mType_get(swigCPtr, this);
    }
  
  }

  /**
   *  群公告
   **/
  static public class Announcement {
    private transient long swigCPtr;
    private transient boolean swigCMemOwn;
  
    protected Announcement(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Announcement obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          flooJNI.delete_BMXGroup_Announcement(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public Announcement() {
      this(flooJNI.new_BMXGroup_Announcement(), true);
    }
  
    public void setMTitle(String value) {
      flooJNI.BMXGroup_Announcement_mTitle_set(swigCPtr, this, value);
    }
  
    public String getMTitle() {
      return flooJNI.BMXGroup_Announcement_mTitle_get(swigCPtr, this);
    }
  
    public void setMContent(String value) {
      flooJNI.BMXGroup_Announcement_mContent_set(swigCPtr, this, value);
    }
  
    public String getMContent() {
      return flooJNI.BMXGroup_Announcement_mContent_get(swigCPtr, this);
    }
  
    public void setMAuthor(long value) {
      flooJNI.BMXGroup_Announcement_mAuthor_set(swigCPtr, this, value);
    }
  
    public long getMAuthor() {
      return flooJNI.BMXGroup_Announcement_mAuthor_get(swigCPtr, this);
    }
  
    public void setMCreateTime(long value) {
      flooJNI.BMXGroup_Announcement_mCreateTime_set(swigCPtr, this, value);
    }
  
    public long getMCreateTime() {
      return flooJNI.BMXGroup_Announcement_mCreateTime_get(swigCPtr, this);
    }
  
    public void setMId(long value) {
      flooJNI.BMXGroup_Announcement_mId_set(swigCPtr, this, value);
    }
  
    public long getMId() {
      return flooJNI.BMXGroup_Announcement_mId_get(swigCPtr, this);
    }
  
  }

  /**
   *  群邀请
   **/
  static public class Invitation {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Invitation(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Invitation obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          flooJNI.delete_BMXGroup_Invitation(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public Invitation() {
      this(flooJNI.new_BMXGroup_Invitation(), true);
    }
  
    public void setMGroupId(long value) {
      flooJNI.BMXGroup_Invitation_mGroupId_set(swigCPtr, this, value);
    }
  
    public long getMGroupId() {
      return flooJNI.BMXGroup_Invitation_mGroupId_get(swigCPtr, this);
    }
  
    public void setMInviterId(long value) {
      flooJNI.BMXGroup_Invitation_mInviterId_set(swigCPtr, this, value);
    }
  
    public long getMInviterId() {
      return flooJNI.BMXGroup_Invitation_mInviterId_get(swigCPtr, this);
    }
  
    public void setMReason(String value) {
      flooJNI.BMXGroup_Invitation_mReason_set(swigCPtr, this, value);
    }
  
    public String getMReason() {
      return flooJNI.BMXGroup_Invitation_mReason_get(swigCPtr, this);
    }
  
    public void setMStatus(BMXGroup.InvitationStatus value) {
      flooJNI.BMXGroup_Invitation_mStatus_set(swigCPtr, this, value.swigValue());
    }
  
    public BMXGroup.InvitationStatus getMStatus() {
      return BMXGroup.InvitationStatus.swigToEnum(flooJNI.BMXGroup_Invitation_mStatus_get(swigCPtr, this));
    }
  
    public void setMExpired(long value) {
      flooJNI.BMXGroup_Invitation_mExpired_set(swigCPtr, this, value);
    }
  
    public long getMExpired() {
      return flooJNI.BMXGroup_Invitation_mExpired_get(swigCPtr, this);
    }
  
  }

  /**
   *  群申请
   **/
  static public class Application {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Application(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Application obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          flooJNI.delete_BMXGroup_Application(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public Application() {
      this(flooJNI.new_BMXGroup_Application(), true);
    }
  
    public void setMGroupId(long value) {
      flooJNI.BMXGroup_Application_mGroupId_set(swigCPtr, this, value);
    }
  
    public long getMGroupId() {
      return flooJNI.BMXGroup_Application_mGroupId_get(swigCPtr, this);
    }
  
    public void setMApplicationId(long value) {
      flooJNI.BMXGroup_Application_mApplicationId_set(swigCPtr, this, value);
    }
  
    public long getMApplicationId() {
      return flooJNI.BMXGroup_Application_mApplicationId_get(swigCPtr, this);
    }
  
    public void setMReason(String value) {
      flooJNI.BMXGroup_Application_mReason_set(swigCPtr, this, value);
    }
  
    public String getMReason() {
      return flooJNI.BMXGroup_Application_mReason_get(swigCPtr, this);
    }
  
    public void setMStatus(BMXGroup.ApplicationStatus value) {
      flooJNI.BMXGroup_Application_mStatus_set(swigCPtr, this, value.swigValue());
    }
  
    public BMXGroup.ApplicationStatus getMStatus() {
      return BMXGroup.ApplicationStatus.swigToEnum(flooJNI.BMXGroup_Application_mStatus_get(swigCPtr, this));
    }
  
    public void setMExpired(long value) {
      flooJNI.BMXGroup_Application_mExpired_set(swigCPtr, this, value);
    }
  
    public long getMExpired() {
      return flooJNI.BMXGroup_Application_mExpired_get(swigCPtr, this);
    }
  
  }

  /**
   *  群Id
   * @return int64_t
   **/
  public long groupId() {
    return flooJNI.BMXGroup_groupId(swigCPtr, this);
  }

  /**
   *  当前群组的群组类型（Private 私有群组，Public 公开群组，Chatroom 聊天室）
   * @return GroupType
   **/
  public BMXGroup.GroupType groupType() {
    return BMXGroup.GroupType.swigToEnum(flooJNI.BMXGroup_groupType(swigCPtr, this));
  }

  /**
   *  在群里的昵称
   * @return std::string
   **/
  public String myNickname() {
    return flooJNI.BMXGroup_myNickname(swigCPtr, this);
  }

  /**
   *  群名称
   * @return std::string
   **/
  public String name() {
    return flooJNI.BMXGroup_name(swigCPtr, this);
  }

  /**
   *  群描述
   * @return std::string
   **/
  public String description() {
    return flooJNI.BMXGroup_description(swigCPtr, this);
  }

  /**
   *  群头像ratel地址
   * @return std::string
   **/
  public String avatarRatelUrl() {
    return flooJNI.BMXGroup_avatarRatelUrl(swigCPtr, this);
  }

  /**
   *  群头像
   * @return std::string
   **/
  public String avatarUrl() {
    return flooJNI.BMXGroup_avatarUrl(swigCPtr, this);
  }

  /**
   *  群头像下载后的本地路径
   * @return std::string
   **/
  public String avatarPath() {
    return flooJNI.BMXGroup_avatarPath(swigCPtr, this);
  }

  /**
   *  群头像缩略图地址
   * @return std::string
   **/
  public String avatarThumbnailUrl() {
    return flooJNI.BMXGroup_avatarThumbnailUrl(swigCPtr, this);
  }

  /**
   *  群头像缩略图下载后的本地路径
   * @return std::string
   **/
  public String avatarThumbnailPath() {
    return flooJNI.BMXGroup_avatarThumbnailPath(swigCPtr, this);
  }

  /**
   *  群创建时间
   * @return int64_t
   **/
  public long createTime() {
    return flooJNI.BMXGroup_createTime(swigCPtr, this);
  }

  /**
   *  群扩展信息
   * @return JSON(std::string)
   **/
  public String extension() {
    return flooJNI.BMXGroup_extension(swigCPtr, this);
  }

  /**
   *  群Owner
   * @return int64_t
   **/
  public long ownerId() {
    return flooJNI.BMXGroup_ownerId(swigCPtr, this);
  }

  /**
   *  最大人数
   * @return int
   **/
  public int capacity() {
    return flooJNI.BMXGroup_capacity(swigCPtr, this);
  }

  /**
   *  群成员数量，包含Owner，admins 和members
   * @return int
   **/
  public int membersCount() {
    return flooJNI.BMXGroup_membersCount(swigCPtr, this);
  }

  /**
   *  群管理员数量
   * @return int
   **/
  public int adminsCount() {
    return flooJNI.BMXGroup_adminsCount(swigCPtr, this);
  }

  /**
   *  黑名单数量
   * @return int
   **/
  public int blockListSize() {
    return flooJNI.BMXGroup_blockListSize(swigCPtr, this);
  }

  /**
   *  禁言数量
   * @return int
   **/
  public int bannedListSize() {
    return flooJNI.BMXGroup_bannedListSize(swigCPtr, this);
  }

  /**
   *  群共享文件数量
   * @return int
   **/
  public int sharedFilesCount() {
    return flooJNI.BMXGroup_sharedFilesCount(swigCPtr, this);
  }

  /**
   *  最新群公告id
   * @return int64_t
   **/
  public long latestAnnouncementId() {
    return flooJNI.BMXGroup_latestAnnouncementId(swigCPtr, this);
  }

  /**
   *  群消息通知类型
   * @return MsgPushMode
   **/
  public BMXGroup.MsgPushMode msgPushMode() {
    return BMXGroup.MsgPushMode.swigToEnum(flooJNI.BMXGroup_msgPushMode(swigCPtr, this));
  }

  /**
   *  群信息修改模式
   * @return ModifyMode
   **/
  public BMXGroup.ModifyMode modifyMode() {
    return BMXGroup.ModifyMode.swigToEnum(flooJNI.BMXGroup_modifyMode(swigCPtr, this));
  }

  /**
   *  入群审批模式
   * @return JoinAuthMode
   **/
  public BMXGroup.JoinAuthMode joinAuthMode() {
    return BMXGroup.JoinAuthMode.swigToEnum(flooJNI.BMXGroup_joinAuthMode(swigCPtr, this));
  }

  /**
   *  入群邀请模式
   * @return InviteMode
   **/
  public BMXGroup.InviteMode inviteMode() {
    return BMXGroup.InviteMode.swigToEnum(flooJNI.BMXGroup_inviteMode(swigCPtr, this));
  }

  /**
   *  群消息屏蔽模式
   * @return MsgMuteMode
   **/
  public BMXGroup.MsgMuteMode msgMuteMode() {
    return BMXGroup.MsgMuteMode.swigToEnum(flooJNI.BMXGroup_msgMuteMode(swigCPtr, this));
  }

  /**
   *  当前群组的状态。（Normal 正常， Destroyed 以销毁）
   * @return GroupStatus
   **/
  public BMXGroup.GroupStatus groupStatus() {
    return BMXGroup.GroupStatus.swigToEnum(flooJNI.BMXGroup_groupStatus(swigCPtr, this));
  }

  /**
   * Deprecated use roleType instead.
   *  当前用户是否是群成员
   * @return bool
   **/
  public boolean isMember() {
    return flooJNI.BMXGroup_isMember(swigCPtr, this);
  }

  /**
   *  是否开启群消息已读功能
   * @return bool
   **/
  public boolean enableReadAck() {
    return flooJNI.BMXGroup_enableReadAck(swigCPtr, this);
  }

  /**
   *  是否可以加载显示历史聊天记录
   * @return bool
   **/
  public boolean historyVisible() {
    return flooJNI.BMXGroup_historyVisible(swigCPtr, this);
  }

  /**
   *  成员在群组内的角色类型
   * @return MemberRoleType
   **/
  public BMXGroup.MemberRoleType roleType() {
    return BMXGroup.MemberRoleType.swigToEnum(flooJNI.BMXGroup_roleType(swigCPtr, this));
  }

  /**
   *  群邀请状态
   **/
  public enum InvitationStatus {
    Pending,
    Accepted,
    Declined;

    public final int swigValue() {
      return swigValue;
    }

    public static InvitationStatus swigToEnum(int swigValue) {
      InvitationStatus[] swigValues = InvitationStatus.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (InvitationStatus swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + InvitationStatus.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private InvitationStatus() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private InvitationStatus(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private InvitationStatus(InvitationStatus swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   *  群申请状态
   **/
  public enum ApplicationStatus {
    Pending,
    Accepted,
    Declined;

    public final int swigValue() {
      return swigValue;
    }

    public static ApplicationStatus swigToEnum(int swigValue) {
      ApplicationStatus[] swigValues = ApplicationStatus.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (ApplicationStatus swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + ApplicationStatus.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private ApplicationStatus() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private ApplicationStatus(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private ApplicationStatus(ApplicationStatus swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   *  消息通知类型
   **/
  public enum MsgPushMode {
    All,
    None,
    AdminOrAt,
    Admin,
    At;

    public final int swigValue() {
      return swigValue;
    }

    public static MsgPushMode swigToEnum(int swigValue) {
      MsgPushMode[] swigValues = MsgPushMode.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (MsgPushMode swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + MsgPushMode.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private MsgPushMode() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private MsgPushMode(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private MsgPushMode(MsgPushMode swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   *  群信息修改模式
   **/
  public enum ModifyMode {
    AdminOnly,
    Open;

    public final int swigValue() {
      return swigValue;
    }

    public static ModifyMode swigToEnum(int swigValue) {
      ModifyMode[] swigValues = ModifyMode.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (ModifyMode swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + ModifyMode.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private ModifyMode() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private ModifyMode(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private ModifyMode(ModifyMode swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   *  进群验证方式
   **/
  public enum JoinAuthMode {
    Open,
    NeedApproval,
    RejectAll;

    public final int swigValue() {
      return swigValue;
    }

    public static JoinAuthMode swigToEnum(int swigValue) {
      JoinAuthMode[] swigValues = JoinAuthMode.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (JoinAuthMode swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + JoinAuthMode.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private JoinAuthMode() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private JoinAuthMode(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private JoinAuthMode(JoinAuthMode swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   *  邀请入群模式
   **/
  public enum InviteMode {
    AdminOnly,
    Open;

    public final int swigValue() {
      return swigValue;
    }

    public static InviteMode swigToEnum(int swigValue) {
      InviteMode[] swigValues = InviteMode.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (InviteMode swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + InviteMode.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private InviteMode() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private InviteMode(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private InviteMode(InviteMode swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   *  群组信息更新类型
   **/
  public enum UpdateInfoType {
    UnKnown,
    Name,
    Description,
    Avatar,
    Owner,
    Ext,
    NickName,
    ModifyMode,
    JoinAuthMode,
    InviteMode,
    MsgPushMode,
    MsgMuteMode,
    ReadAckMode,
    HistoryVisibleMode;

    public final int swigValue() {
      return swigValue;
    }

    public static UpdateInfoType swigToEnum(int swigValue) {
      UpdateInfoType[] swigValues = UpdateInfoType.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (UpdateInfoType swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + UpdateInfoType.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private UpdateInfoType() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private UpdateInfoType(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private UpdateInfoType(UpdateInfoType swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   *  群组状态
   **/
  public enum GroupStatus {
    Normal,
    Destroyed;

    public final int swigValue() {
      return swigValue;
    }

    public static GroupStatus swigToEnum(int swigValue) {
      GroupStatus[] swigValues = GroupStatus.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (GroupStatus swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + GroupStatus.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private GroupStatus() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private GroupStatus(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private GroupStatus(GroupStatus swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   *  群组消息屏蔽模式
   **/
  public enum MsgMuteMode {
    None,
    MuteNotification,
    MuteChat;

    public final int swigValue() {
      return swigValue;
    }

    public static MsgMuteMode swigToEnum(int swigValue) {
      MsgMuteMode[] swigValues = MsgMuteMode.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (MsgMuteMode swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + MsgMuteMode.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private MsgMuteMode() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private MsgMuteMode(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private MsgMuteMode(MsgMuteMode swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   *  群成员角色
   **/
  public enum MemberRoleType {
    GroupMember,
    GroupAdmin,
    GroupOwner,
    NotGroupMember;

    public final int swigValue() {
      return swigValue;
    }

    public static MemberRoleType swigToEnum(int swigValue) {
      MemberRoleType[] swigValues = MemberRoleType.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (MemberRoleType swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + MemberRoleType.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private MemberRoleType() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private MemberRoleType(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private MemberRoleType(MemberRoleType swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   *  群类型
   **/
  public enum GroupType {
    Private,
    Public,
    Chatroom;

    public final int swigValue() {
      return swigValue;
    }

    public static GroupType swigToEnum(int swigValue) {
      GroupType[] swigValues = GroupType.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (GroupType swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + GroupType.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private GroupType() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private GroupType(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private GroupType(GroupType swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
