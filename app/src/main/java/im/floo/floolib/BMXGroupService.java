/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package im.floo.floolib;

/**
 *  群组Service
 **/
public class BMXGroupService {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected BMXGroupService(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BMXGroupService obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @Override
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        flooJNI.delete_BMXGroupService(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   *  创建群组选项
   **/
  static public class CreateGroupOptions {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected CreateGroupOptions(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(CreateGroupOptions obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          flooJNI.delete_BMXGroupService_CreateGroupOptions(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public CreateGroupOptions() {
      this(flooJNI.new_BMXGroupService_CreateGroupOptions__SWIG_0(), true);
    }
  
    public CreateGroupOptions(String name, String description, boolean isPublic, boolean isChatroom) {
      this(flooJNI.new_BMXGroupService_CreateGroupOptions__SWIG_1(name, description, isPublic, isChatroom), true);
    }

    public CreateGroupOptions(String name, String description, boolean isPublic) {
      this(flooJNI.new_BMXGroupService_CreateGroupOptions__SWIG_2(name, description, isPublic), true);
    }
  
    public CreateGroupOptions(String name, String description) {
      this(flooJNI.new_BMXGroupService_CreateGroupOptions__SWIG_3(name, description), true);
    }
  
    public void setMName(String value) {
      flooJNI.BMXGroupService_CreateGroupOptions_mName_set(swigCPtr, this, value);
    }
  
    public String getMName() {
      return flooJNI.BMXGroupService_CreateGroupOptions_mName_get(swigCPtr, this);
    }
  
    public void setMDescription(String value) {
      flooJNI.BMXGroupService_CreateGroupOptions_mDescription_set(swigCPtr, this, value);
    }
  
    public String getMDescription() {
      return flooJNI.BMXGroupService_CreateGroupOptions_mDescription_get(swigCPtr, this);
    }
  
    public void setMIsPublic(boolean value) {
      flooJNI.BMXGroupService_CreateGroupOptions_mIsPublic_set(swigCPtr, this, value);
    }
  
    public boolean getMIsPublic() {
      return flooJNI.BMXGroupService_CreateGroupOptions_mIsPublic_get(swigCPtr, this);
    }
  
    public void setMIsChatroom(boolean value) {
      flooJNI.BMXGroupService_CreateGroupOptions_mIsChatroom_set(swigCPtr, this, value);
    }

    public boolean getMIsChatroom() {
      return flooJNI.BMXGroupService_CreateGroupOptions_mIsChatroom_get(swigCPtr, this);
    }

    public void setMMessage(String value) {
      flooJNI.BMXGroupService_CreateGroupOptions_mMessage_set(swigCPtr, this, value);
    }
  
    public String getMMessage() {
      return flooJNI.BMXGroupService_CreateGroupOptions_mMessage_get(swigCPtr, this);
    }
  
    public void setMMembers(ListOfLongLong value) {
      flooJNI.BMXGroupService_CreateGroupOptions_mMembers_set(swigCPtr, this, ListOfLongLong.getCPtr(value), value);
    }
  
    public ListOfLongLong getMMembers() {
      long cPtr = flooJNI.BMXGroupService_CreateGroupOptions_mMembers_get(swigCPtr, this);
      return (cPtr == 0) ? null : new ListOfLongLong(cPtr, false);
    }
  
  }

  /**
   *  获取群组列表，如果设置了forceRefresh则从服务器拉取
   * @param list 群组id列表，传入空列表函数返回后从此处获取返回的群组id列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
  public BMXErrorCode get(BMXGroupList list, boolean forceRefresh) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_get(swigCPtr, this, BMXGroupList.getCPtr(list), list, forceRefresh));
  }

  /**
   *  获取群组列表，如果设置了forceRefresh则从服务器拉取
   * @param list 群组id列表，传入空列表函数返回后从此处获取返回的群组id列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
  public BMXErrorCode search(BMXGroupList list, boolean forceRefresh) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_search__SWIG_0(swigCPtr, this, BMXGroupList.getCPtr(list), list, forceRefresh));
  }

  /**
   *  获取传入群组id的群组信息列表，如果设置了forceRefresh则从服务器拉取
   * @param groupIdList 群组id列表
   * @param list 群组详细信息列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
  public BMXErrorCode fetchGroupsByIdList(ListOfLongLong groupIdList, BMXGroupList list, boolean forceRefresh) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_fetchGroupsByIdList(swigCPtr, this, ListOfLongLong.getCPtr(groupIdList), groupIdList, BMXGroupList.getCPtr(list), list, forceRefresh));
  }

  /**
   *  获取传入群组id的群组信息列表，如果设置了forceRefresh则从服务器拉取
   * @param groupIdList 群组id列表
   * @param list 群组详细信息列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
  public BMXErrorCode search(ListOfLongLong groupIdList, BMXGroupList list, boolean forceRefresh) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_search__SWIG_1(swigCPtr, this, ListOfLongLong.getCPtr(groupIdList), groupIdList, BMXGroupList.getCPtr(list), list, forceRefresh));
  }

  /**
   *  获取群信息，如果设置了forceRefresh则从服务器拉取
   * @param groupId 要搜索的群组id
   * @param group 搜索返回的群组信息，传入指向为空的shared_ptr对象函数执行后从此获取返回结果
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
  public BMXErrorCode fetchGroupById(long groupId, BMXGroup group, boolean forceRefresh) {
    ListOfLongLong listOfLongLong = new ListOfLongLong();
    int iRet = flooJNI.BMXGroupService_fetchGroupById(swigCPtr, this, groupId, ListOfLongLong.getCPtr(listOfLongLong), listOfLongLong, forceRefresh);
    group.swigCPtr = listOfLongLong.get(0);
    return BMXErrorCode.swigToEnum(iRet);
  }

  /**
   *  获取群信息，如果设置了forceRefresh则从服务器拉取
   * @param groupId 要搜索的群组id
   * @param group 搜索返回的群组信息，传入指向为空的shared_ptr对象函数执行后从此获取返回结果
   * @param forceUpdate 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
  public BMXErrorCode search(long groupId, BMXGroup group, boolean forceUpdate) {
    ListOfLongLong listOfLongLong = new ListOfLongLong();
    int iRet = flooJNI.BMXGroupService_search__SWIG_2(swigCPtr, this, groupId, ListOfLongLong.getCPtr(listOfLongLong), listOfLongLong, forceUpdate);
    group.swigCPtr = listOfLongLong.get(0);
    return BMXErrorCode.swigToEnum(iRet);
  }

  /**
   *  通过群名称查询本地群信息，从本地数据库中通过群名称查询获取群组
   * @param list 搜索结果返回的群列表信息
   * @param name 查询的群名称关键字
   * @return BMXErrorCode
   **/
  public BMXErrorCode fetchLocalGroupsByName(BMXGroupList list, String name) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_fetchLocalGroupsByName(swigCPtr, this, BMXGroupList.getCPtr(list), list, name));
  }

  /**
   *  通过群名称查询本地群信息，从本地数据库中通过群名称查询获取群组
   * @param list 搜索结果返回的群列表信息
   * @param name 查询的群名称关键字
   * @return BMXErrorCode
   **/
  public BMXErrorCode search(BMXGroupList list, String name) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_search__SWIG_3(swigCPtr, this, BMXGroupList.getCPtr(list), list, name));
  }

  /**
   *  创建群
   * @param options 创建群组时传入的参数选项
   * @param group 创建好的群，传入指向为空的shared_ptr对象函数执行后从此获取返回结果
   * @return BMXErrorCode
   **/
  public BMXErrorCode create(BMXGroupService.CreateGroupOptions options, BMXGroup group) {
    ListOfLongLong listOfLongLong = new ListOfLongLong();
    int iRet = flooJNI.BMXGroupService_create(swigCPtr, this, BMXGroupService.CreateGroupOptions.getCPtr(options), options, ListOfLongLong.getCPtr(listOfLongLong), listOfLongLong);
    group.swigCPtr = listOfLongLong.get(0);
    return BMXErrorCode.swigToEnum(iRet);
  }

  /**
   *  销毁群
   * @param group 要销毁的群组
   * @return BMXErrorCode
   **/
  public BMXErrorCode destroy(BMXGroup group) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_destroy(swigCPtr, this, BMXGroup.getCPtr(group), group));
  }

  /**
   *  加入一个群，根据群设置可能需要管理员批准
   * @param group 要加入的群组
   * @param message 申请入群的信息
   * @return BMXErrorCode
   **/
  public BMXErrorCode join(BMXGroup group, String message) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_join(swigCPtr, this, BMXGroup.getCPtr(group), group, message));
  }

  /**
   *  退出群
   * @param group 要退出的群组
   * @return BMXErrorCode
   **/
  public BMXErrorCode leave(BMXGroup group) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_leave(swigCPtr, this, BMXGroup.getCPtr(group), group));
  }

  /**
   *  获取群详情，从服务端拉取最新信息
   * @param group 要获取群组最新信息的群组
   * @return BMXErrorCode
   **/
  public BMXErrorCode getInfo(BMXGroup group) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_getInfo(swigCPtr, this, BMXGroup.getCPtr(group), group));
  }

  /**
   *  获取群组成员详细信息
   * @param group 进行操作的群组
   * @param members 要获取群组成员信息详情的群成员id
   * @param list 返回的群成员详细，传入空列表在函数操作后从此处获取群成员详细信息列表
   * @return BMXErrorCode
   **/
  public BMXErrorCode getMembersNickname(BMXGroup group, ListOfLongLong members, BMXGroupMemberList list) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_getMembersNickname(swigCPtr, this, BMXGroup.getCPtr(group), group, ListOfLongLong.getCPtr(members), members, BMXGroupMemberList.getCPtr(list), list));
  }

  /**
   *  分页获取群组邀请列表
   * @param result 分页获取的群组邀请列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
  public BMXErrorCode getInvitationList(GroupInvitaionPage result, String cursor, int pageSize) {
    ListOfLongLong listOfLongLong = new ListOfLongLong();
    int iRet = flooJNI.BMXGroupService_getInvitationList__SWIG_0(swigCPtr, this, ListOfLongLong.getCPtr(listOfLongLong), listOfLongLong, cursor, pageSize);
    result.swigCPtr = listOfLongLong.get(0);
    return BMXErrorCode.swigToEnum(iRet);
  }

  /**
   *  分页获取群组申请列表
   * @param list 需要获取群组申请列表信息的群组id列表
   * @param result 分页获取的群组申请列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
  public BMXErrorCode getApplicationList(BMXGroupList list, GroupApplicationPage result, String cursor, int pageSize) {
    ListOfLongLong listOfLongLong = new ListOfLongLong();
    int iRet = flooJNI.BMXGroupService_getApplicationList__SWIG_0(swigCPtr, this, BMXGroupList.getCPtr(list), list, ListOfLongLong.getCPtr(listOfLongLong), listOfLongLong, cursor, pageSize);
    result.swigCPtr = listOfLongLong.get(0);
    return BMXErrorCode.swigToEnum(iRet);
  }

  /**
   *  分页获取群成员列表，如果设置了forceRefresh则从服务器拉取，单页最大数量为500.
   * @param group 进行操作的群组
   * @param result 分页获取的群成员列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
  public BMXErrorCode getMembers(BMXGroup group, BMXGroupMemberResultPage result, String cursor, int pageSize) {
    ListOfLongLong listOfLongLong = new ListOfLongLong();
    int iRet = flooJNI.BMXGroupService_getMembers__SWIG_0(swigCPtr, this, BMXGroup.getCPtr(group), group, ListOfLongLong.getCPtr(listOfLongLong), listOfLongLong, cursor, pageSize);
    result.swigCPtr = listOfLongLong.get(0);
    return BMXErrorCode.swigToEnum(iRet);
  }

  /**
   *  获取群成员列表，如果设置了forceRefresh则从服务器拉取，最多拉取1000人
   * @param group 进行操作的群组
   * @param list 群成员列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
  public BMXErrorCode getMembers(BMXGroup group, BMXGroupMemberList list, boolean forceRefresh) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_getMembers__SWIG_3(swigCPtr, this, BMXGroup.getCPtr(group), group, BMXGroupMemberList.getCPtr(list), list, forceRefresh));
  }

  /**
   *  添加群成员
   * @param group 进行操作的群组
   * @param members 要添加进群的成员id列表
   * @param message 添加成员原因信息
   * @return BMXErrorCode
   **/
  public BMXErrorCode addMembers(BMXGroup group, ListOfLongLong members, String message) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_addMembers(swigCPtr, this, BMXGroup.getCPtr(group), group, ListOfLongLong.getCPtr(members), members, message));
  }

  /**
   *  删除群成员
   * @param group 进行操作的群组
   * @param members 要删除的群组成员id列表
   * @param reason 删除的原因
   * @return BMXErrorCode
   **/
  public BMXErrorCode removeMembers(BMXGroup group, ListOfLongLong members, String reason) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_removeMembers(swigCPtr, this, BMXGroup.getCPtr(group), group, ListOfLongLong.getCPtr(members), members, reason));
  }

  /**
   *  添加管理员
   * @param group 进行操作的群组
   * @param admins 要添加为管理员的成员id列表
   * @param message 添加为管理员的原因
   * @return BMXErrorCode
   **/
  public BMXErrorCode addAdmins(BMXGroup group, ListOfLongLong admins, String message) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_addAdmins(swigCPtr, this, BMXGroup.getCPtr(group), group, ListOfLongLong.getCPtr(admins), admins, message));
  }

  /**
   *  删除管理员
   * @param group 进行操作的群组
   * @param admins 要从管理员移除的成员id列表
   * @param reason 要移除管理员的原因
   * @return BMXErrorCode
   **/
  public BMXErrorCode removeAdmins(BMXGroup group, ListOfLongLong admins, String reason) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_removeAdmins(swigCPtr, this, BMXGroup.getCPtr(group), group, ListOfLongLong.getCPtr(admins), admins, reason));
  }

  /**
   *  获取Admins列表，如果设置了forceRefresh则从服务器拉取
   * @param group 进行操作的群组
   * @param list 群管理员列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
  public BMXErrorCode getAdmins(BMXGroup group, BMXGroupMemberList list, boolean forceRefresh) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_getAdmins(swigCPtr, this, BMXGroup.getCPtr(group), group, BMXGroupMemberList.getCPtr(list), list, forceRefresh));
  }

  /**
   *  添加黑名单
   * @param group 进行操作的群组
   * @param members 要加入黑名单的群成员id列表
   * @return BMXErrorCode
   **/
  public BMXErrorCode blockMembers(BMXGroup group, ListOfLongLong members) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_blockMembers(swigCPtr, this, BMXGroup.getCPtr(group), group, ListOfLongLong.getCPtr(members), members));
  }

  /**
   *  从黑名单删除
   * @param group 进行操作的群组
   * @param members 从黑名单移除的用户id列表
   * @return BMXErrorCode
   **/
  public BMXErrorCode unblockMembers(BMXGroup group, ListOfLongLong members) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_unblockMembers(swigCPtr, this, BMXGroup.getCPtr(group), group, ListOfLongLong.getCPtr(members), members));
  }

  /**
   *  分页获取黑名单
   * @param group 进行操作的群组
   * @param result 分页获取的黑名单列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
  public BMXErrorCode getBlockList(BMXGroup group, BMXGroupMemberResultPage result, String cursor, int pageSize) {
    ListOfLongLong listOfLongLong = new ListOfLongLong();
    int iRet = flooJNI.BMXGroupService_getBlockList__SWIG_0(swigCPtr, this, BMXGroup.getCPtr(group), group, ListOfLongLong.getCPtr(listOfLongLong), listOfLongLong, cursor, pageSize);
    result.swigCPtr = listOfLongLong.get(0);
    return BMXErrorCode.swigToEnum(iRet);
  }

  /**
   *  获取黑名单
   * @param group 进行操作的群组
   * @param list 群黑名单列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
  public BMXErrorCode getBlockList(BMXGroup group, BMXGroupMemberList list, boolean forceRefresh) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_getBlockList__SWIG_3(swigCPtr, this, BMXGroup.getCPtr(group), group, BMXGroupMemberList.getCPtr(list), list, forceRefresh));
  }

  /**
   *  禁言
   * @param group 进行操作的群组
   * @param members 被禁言的群成员id列表
   * @param duration 禁言时长
   * @param reason 禁言原因
   * @return BMXErrorCode
   **/
  public BMXErrorCode banMembers(BMXGroup group, ListOfLongLong members, long duration, String reason) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_banMembers__SWIG_0(swigCPtr, this, BMXGroup.getCPtr(group), group, ListOfLongLong.getCPtr(members), members, duration, reason));
  }

  public BMXErrorCode banMembers(BMXGroup group, ListOfLongLong members, long duration) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_banMembers__SWIG_1(swigCPtr, this, BMXGroup.getCPtr(group), group, ListOfLongLong.getCPtr(members), members, duration));
  }

  /**
   * @brief 全员禁言，当前服务器时间加上禁言时长后计算出全员禁言到期时间（只有管理和群主可以发言）
   * @param group 进行操作的群组
   * @param duration 禁言时长(分钟)
   * @return BMXErrorCode
   **/
  public BMXErrorCode banGroup(BMXGroup group, long duration) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_banGroup(swigCPtr, this, BMXGroup.getCPtr(group), group, duration));
  }

  /**
   *  解除禁言
   * @param group 进行操作的群组
   * @param members 被解除禁言的群成员id列表
   * @return BMXErrorCode
   **/
  public BMXErrorCode unbanMembers(BMXGroup group, ListOfLongLong members) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_unbanMembers(swigCPtr, this, BMXGroup.getCPtr(group), group, ListOfLongLong.getCPtr(members), members));
  }

  /**
   * @brief 全员解除禁言
   * @param group 进行操作的群组
   * @return BMXErrorCode
   **/
  public BMXErrorCode unbanGroup(BMXGroup group) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_unbanGroup(swigCPtr, this, BMXGroup.getCPtr(group), group));
  }

  /**
   *  分页获取禁言列表
   * @param group 进行操作的群组
   * @param result 分页获取的禁言列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
  public BMXErrorCode getBannedMembers(BMXGroup group, BMXGroupBannedMemberResultPage result, String cursor, int pageSize) {
    ListOfLongLong listOfLongLong = new ListOfLongLong();
    int iRet = flooJNI.BMXGroupService_getBannedMembers__SWIG_0(swigCPtr, this, BMXGroup.getCPtr(group), group, ListOfLongLong.getCPtr(listOfLongLong), listOfLongLong, cursor, pageSize);
    result.swigCPtr = listOfLongLong.get(0);
    return BMXErrorCode.swigToEnum(iRet);
  }

  /**
   *  获取禁言列表
   * @param group 进行操作的群组
   * @param list 群禁言列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @return BMXErrorCode
   **/
  public BMXErrorCode getBannedMembers(BMXGroup group, BMXGroupBannedMemberList list) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_getBannedMembers__SWIG_3(swigCPtr, this, BMXGroup.getCPtr(group), group, BMXGroupBannedMemberList.getCPtr(list), list));
  }

  /**
   *  设置是否屏蔽群消息
   * @param group 进行操作的群组
   * @param mode 群屏蔽的模式
   * @return BMXErrorCode
   **/
  public BMXErrorCode muteMessage(BMXGroup group, BMXGroup.MsgMuteMode mode) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_muteMessage(swigCPtr, this, BMXGroup.getCPtr(group), group, mode.swigValue()));
  }

  /**
   *  接受入群申请
   * @param group 进行操作的群组
   * @param applicantId 申请进群的用户id
   * @return BMXErrorCode
   **/
  public BMXErrorCode acceptApplication(BMXGroup group, long applicantId) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_acceptApplication(swigCPtr, this, BMXGroup.getCPtr(group), group, applicantId));
  }

  /**
   *  拒绝入群申请
   * @param group 进行操作的群组
   * @param applicantId 申请进群的用户id
   * @param reason 拒绝的原因
   * @return BMXErrorCode
   **/
  public BMXErrorCode declineApplication(BMXGroup group, long applicantId, String reason) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_declineApplication__SWIG_0(swigCPtr, this, BMXGroup.getCPtr(group), group, applicantId, reason));
  }

  public BMXErrorCode declineApplication(BMXGroup group, long applicantId) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_declineApplication__SWIG_1(swigCPtr, this, BMXGroup.getCPtr(group), group, applicantId));
  }

  /**
   *  接受入群邀请
   * @param group 进行操作的群组
   * @param inviter 邀请者id
   * @return BMXErrorCode
   **/
  public BMXErrorCode acceptInvitation(BMXGroup group, long inviter) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_acceptInvitation(swigCPtr, this, BMXGroup.getCPtr(group), group, inviter));
  }

  /**
   *  拒绝入群邀请
   * @param group 进行操作的群组
   * @param inviter 邀请者id
   * @param reason 拒绝的原因
   * @return BMXErrorCode
   **/
  public BMXErrorCode declineInvitation(BMXGroup group, long inviter, String reason) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_declineInvitation__SWIG_0(swigCPtr, this, BMXGroup.getCPtr(group), group, inviter, reason));
  }

  public BMXErrorCode declineInvitation(BMXGroup group, long inviter) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_declineInvitation__SWIG_1(swigCPtr, this, BMXGroup.getCPtr(group), group, inviter));
  }

  /**
   *  转移群主
   * @param group 进行操作的群组
   * @param newOwnerId 转让为新群主的用户id
   * @return BMXErrorCode
   **/
  public BMXErrorCode transferOwner(BMXGroup group, long newOwnerId) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_transferOwner(swigCPtr, this, BMXGroup.getCPtr(group), group, newOwnerId));
  }

  /**
   *  添加群共享文件
   * @param group 进行操作的群组
   * @param filePath 文件的本地路径
   * @param displayName 文件的展示名
   * @param extensionName 文件的扩展名
   * @param arg4 上传回调函数
   * @return BMXErrorCode
   **/
  public BMXErrorCode uploadSharedFile(BMXGroup group, String filePath, String displayName, String extensionName, FileProgressListener arg4) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_uploadSharedFile(swigCPtr, this, BMXGroup.getCPtr(group), group, filePath, displayName, extensionName, arg4));
  }

  /**
   *  取消上传群共享文件
   * @param group 进行操作的群组
   * @param filePath 文件的本地路径
   * @return BMXErrorCode
   **/
  public BMXErrorCode cancelUploadSharedFile(BMXGroup group, String filePath) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_cancelUploadSharedFile(swigCPtr, this, BMXGroup.getCPtr(group), group, filePath));
  }

  /**
   *  移除群共享文件
   * @param group 进行操作的群组
   * @param sharedFile 删除的群共享文件
   * @return BMXErrorCode
   **/
  public BMXErrorCode removeSharedFile(BMXGroup group, BMXGroup.SharedFile sharedFile) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_removeSharedFile(swigCPtr, this, BMXGroup.getCPtr(group), group, BMXGroup.SharedFile.getCPtr(sharedFile)));
  }

  /**
   *  下载群共享文件
   * @param group 进行操作的群组
   * @param sharedFile 下载的群共享文件
   * @param arg2 下载回调函数
   * @return BMXErrorCode
   **/
  public BMXErrorCode downloadSharedFile(BMXGroup group, BMXGroup.SharedFile sharedFile, FileProgressListener arg2) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_downloadSharedFile(swigCPtr, this, BMXGroup.getCPtr(group), group, BMXGroup.SharedFile.getCPtr(sharedFile), arg2));
  }

  /**
   *  取消下载群共享文件
   * @param group 进行操作的群组
   * @param sharedFile 下载的群共享文件
   * @return BMXErrorCode
   **/
  public BMXErrorCode cancelDownloadSharedFile(BMXGroup group, BMXGroup.SharedFile sharedFile) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_cancelDownloadSharedFile(swigCPtr, this, BMXGroup.getCPtr(group), group, BMXGroup.SharedFile.getCPtr(sharedFile)));
  }

  /**
   *  获取群共享文件列表
   * @param group 进行操作的群组
   * @param list 群共享文件列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
  public BMXErrorCode getSharedFilesList(BMXGroup group, BMXGroupSharedFileList list, boolean forceRefresh) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_getSharedFilesList(swigCPtr, this, BMXGroup.getCPtr(group), group, BMXGroupSharedFileList.getCPtr(list), list, forceRefresh));
  }

  /**
   *  修改群共享文件名称
   * @param group 进行操作的群组
   * @param sharedFile 进行更改的群共享文件
   * @param name 修改的群共享文件名称
   * @return BMXErrorCode
   **/
  public BMXErrorCode changeSharedFileName(BMXGroup group, BMXGroup.SharedFile sharedFile, String name) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_changeSharedFileName(swigCPtr, this, BMXGroup.getCPtr(group), group, BMXGroup.SharedFile.getCPtr(sharedFile), name));
  }

  /**
   *  获取最新的群公告
   * @param group 进行操作的群组
   * @param announcement 最新的群组公告，传入指向为空的shared_ptr对象函数返回后从此处获取最新的群组公告
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
  public BMXErrorCode getLatestAnnouncement(BMXGroup group, BMXGroup.Announcement announcement, boolean forceRefresh) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_getLatestAnnouncement(swigCPtr, this, BMXGroup.getCPtr(group), group, BMXGroup.Announcement.getCPtr(announcement), forceRefresh));
  }

  /**
   *  获取群公告列表
   * @param group 进行操作的群组
   * @param list 群公告列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
  public BMXErrorCode getAnnouncementList(BMXGroup group, BMXGroupAnnouncementList list, boolean forceRefresh) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_getAnnouncementList(swigCPtr, this, BMXGroup.getCPtr(group), group, BMXGroupAnnouncementList.getCPtr(list), list, forceRefresh));
  }

  /**
   *  设置群公告
   * @param group 进行操作的群组
   * @param title 群公告的标题
   * @param content 群公告的内容
   * @return BMXErrorCode
   **/
  public BMXErrorCode editAnnouncement(BMXGroup group, String title, String content) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_editAnnouncement(swigCPtr, this, BMXGroup.getCPtr(group), group, title, content));
  }

  /**
   *  删除群公告
   * @param group 进行操作的群组
   * @param announcementId 删除的群公告id
   * @return BMXErrorCode
   **/
  public BMXErrorCode deleteAnnouncement(BMXGroup group, long announcementId) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_deleteAnnouncement(swigCPtr, this, BMXGroup.getCPtr(group), group, announcementId));
  }

  /**
   *  设置群名称
   * @param group 进行操作的群组
   * @param name 群组名称
   * @return BMXErrorCode
   **/
  public BMXErrorCode setName(BMXGroup group, String name) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_setName(swigCPtr, this, BMXGroup.getCPtr(group), group, name));
  }

  /**
   *  设置群描述信息
   * @param group 进行操作的群组
   * @param description 群组描述
   * @return BMXErrorCode
   **/
  public BMXErrorCode setDescription(BMXGroup group, String description) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_setDescription(swigCPtr, this, BMXGroup.getCPtr(group), group, description));
  }

  /**
   *  设置群扩展信息
   * @param group 进行操作的群组
   * @param extension 群组的扩展信息
   * @return BMXErrorCode
   **/
  public BMXErrorCode setExtension(BMXGroup group, String extension) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_setExtension(swigCPtr, this, BMXGroup.getCPtr(group), group, extension));
  }

  /**
   *  设置在群里的昵称
   * @param group 进行操作的群组
   * @param nickname 用户在群组内的昵称
   * @return BMXErrorCode
   **/
  public BMXErrorCode setMyNickname(BMXGroup group, String nickname) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_setMyNickname(swigCPtr, this, BMXGroup.getCPtr(group), group, nickname));
  }

  /**
   *  设置群消息通知模式
   * @param group 进行操作的群组
   * @param mode 群消息通知模式
   * @return BMXErrorCode
   **/
  public BMXErrorCode setMsgPushMode(BMXGroup group, BMXGroup.MsgPushMode mode) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_setMsgPushMode(swigCPtr, this, BMXGroup.getCPtr(group), group, mode.swigValue()));
  }

  /**
   *  设置入群审批模式
   * @param group 进行操作的群组
   * @param mode 入群审批模式
   * @return BMXErrorCode
   **/
  public BMXErrorCode setJoinAuthMode(BMXGroup group, BMXGroup.JoinAuthMode mode) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_setJoinAuthMode(swigCPtr, this, BMXGroup.getCPtr(group), group, mode.swigValue()));
  }

  /**
   *  设置邀请模式
   * @param group 进行操作的群组
   * @param mode 群组的邀请模式
   * @return BMXErrorCode
   **/
  public BMXErrorCode setInviteMode(BMXGroup group, BMXGroup.InviteMode mode) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_setInviteMode(swigCPtr, this, BMXGroup.getCPtr(group), group, mode.swigValue()));
  }

  /**
   *  设置是否允许群成员设置群信息
   * @param group 进行操作的群组
   * @param enable 是否允许操作
   * @return BMXErrorCode
   **/
  public BMXErrorCode setAllowMemberModify(BMXGroup group, boolean enable) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_setAllowMemberModify(swigCPtr, this, BMXGroup.getCPtr(group), group, enable));
  }

  /**
   *  设置是否开启群消息已读功能
   * @param group 进行操作的群组
   * @param enable 是否开启
   * @return BMXErrorCode
   **/
  public BMXErrorCode setEnableReadAck(BMXGroup group, boolean enable) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_setEnableReadAck(swigCPtr, this, BMXGroup.getCPtr(group), group, enable));
  }

  /**
   *  设置群成员是否开可见群历史聊天记录
   * @param group 进行操作的群组
   * @param enable 是否开启
   * @return BMXErrorCode
   **/
  public BMXErrorCode setHistoryVisible(BMXGroup group, boolean enable) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_setHistoryVisible(swigCPtr, this, BMXGroup.getCPtr(group), group, enable));
  }

  /**
   *  设置群头像
   * @param group 进行操作的群组
   * @param avatarPath 群头像文件的本地路径
   * @param arg2 上传回调函数
   * @return BMXErrorCode
   **/
  public BMXErrorCode setAvatar(BMXGroup group, String avatarPath, FileProgressListener arg2) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_setAvatar(swigCPtr, this, BMXGroup.getCPtr(group), group, avatarPath, arg2));
  }

  /**
   *  下载群头像
   * @param group 进行操作的群组
   * @param thumbnail 设置为true下载缩略图，false下载原图
   * @param arg2 下载回调函数
   * @return BMXErrorCode
   **/
  public BMXErrorCode downloadAvatar(BMXGroup group, boolean thumbnail, FileProgressListener arg2) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXGroupService_downloadAvatar(swigCPtr, this, BMXGroup.getCPtr(group), group, thumbnail, arg2));
  }

  /**
   *  添加群组变化监听者
   * @param listener 群组变化监听者
   **/
  public void addGroupListener(BMXGroupServiceListener listener) {
    flooJNI.BMXGroupService_addGroupListener(swigCPtr, this, BMXGroupServiceListener.getCPtr(listener), listener);
  }

  /**
   *  移除群组变化监听者
   * @param listener 群组变化监听者
   **/
  public void removeGroupListener(BMXGroupServiceListener listener) {
    flooJNI.BMXGroupService_removeGroupListener(swigCPtr, this, BMXGroupServiceListener.getCPtr(listener), listener);
  }

}
