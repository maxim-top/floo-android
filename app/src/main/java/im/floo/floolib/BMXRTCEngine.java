/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package im.floo.floolib;

public class BMXRTCEngine {
  private transient long swigCPtr;
  private transient boolean swigCMemOwn;

  protected BMXRTCEngine(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BMXRTCEngine obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        flooJNI.delete_BMXRTCEngine(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    flooJNI.BMXRTCEngine_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    flooJNI.BMXRTCEngine_change_ownership(this, swigCPtr, true);
  }

  public void destroy() {
    flooJNI.BMXRTCEngine_destroy(swigCPtr, this);
  }

  public void addRTCEngineListener(BMXRTCEngineListener listener) {
    flooJNI.BMXRTCEngine_addRTCEngineListener(swigCPtr, this, BMXRTCEngineListener.getCPtr(listener), listener);
  }

  public void removeRTCEngineListener(BMXRTCEngineListener listener) {
    flooJNI.BMXRTCEngine_removeRTCEngineListener(swigCPtr, this, BMXRTCEngineListener.getCPtr(listener), listener);
  }

  public BMXRTCConfig getRTCConfig() {
    long cPtr = flooJNI.BMXRTCEngine_getRTCConfig(swigCPtr, this);
    return (cPtr == 0) ? null : new BMXRTCConfig(cPtr, true);
  }

  public BMXErrorCode setRoomType(BMXRoomType type) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_setRoomType(swigCPtr, this, type.swigValue()));
  }

  public BMXErrorCode setStreamRole(BMXStreamRole role) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_setStreamRole(swigCPtr, this, role.swigValue()));
  }

  public BMXErrorCode setVideoCodec(BMXVideoCodec codec) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_setVideoCodec(swigCPtr, this, codec.swigValue()));
  }

  public BMXErrorCode setVideoProfile(BMXVideoConfig videoConfig) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_setVideoProfile(swigCPtr, this, BMXVideoConfig.getCPtr(videoConfig), videoConfig));
  }

  public BMXErrorCode setAudioProfile(BMXAudioProfile profile) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_setAudioProfile(swigCPtr, this, profile.swigValue()));
  }

  public BMXErrorCode joinRoom(BMXRoomAuth auth) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_joinRoom(swigCPtr, this, BMXRoomAuth.getCPtr(auth), auth));
  }

  public BMXErrorCode leaveRoom() {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_leaveRoom(swigCPtr, this));
  }

  public BMXErrorCode publish(BMXVideoMediaType type, boolean hasVideo, boolean hasAudio) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_publish(swigCPtr, this, type.swigValue(), hasVideo, hasAudio));
  }

  public BMXErrorCode unPublish(BMXVideoMediaType type) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_unPublish(swigCPtr, this, type.swigValue()));
  }

  public BMXErrorCode subscribe(BMXStream stream) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_subscribe(swigCPtr, this, BMXStream.getCPtr(stream), stream));
  }

  public BMXErrorCode unSubscribe(BMXStream stream) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_unSubscribe(swigCPtr, this, BMXStream.getCPtr(stream), stream));
  }

  public BMXErrorCode startPreview(BMXVideoCanvas canvas) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_startPreview(swigCPtr, this, BMXVideoCanvas.getCPtr(canvas), canvas));
  }

  public BMXErrorCode stopPreview(BMXVideoCanvas canvas) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_stopPreview(swigCPtr, this, BMXVideoCanvas.getCPtr(canvas), canvas));
  }

  public BMXErrorCode startRemoteView(BMXVideoCanvas canvas) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_startRemoteView(swigCPtr, this, BMXVideoCanvas.getCPtr(canvas), canvas));
  }

  public BMXErrorCode stopRemoteView(BMXVideoCanvas canvas) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_stopRemoteView(swigCPtr, this, BMXVideoCanvas.getCPtr(canvas), canvas));
  }

  public BMXErrorCode muteLocalAudio(boolean mute) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_muteLocalAudio(swigCPtr, this, mute));
  }

  public BMXErrorCode muteLocalVideo(BMXVideoMediaType type, boolean mute) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_muteLocalVideo(swigCPtr, this, type.swigValue(), mute));
  }

  public BMXErrorCode muteRemoteAudio(BMXStream stream, boolean mute) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_muteRemoteAudio(swigCPtr, this, BMXStream.getCPtr(stream), stream, mute));
  }

  public BMXErrorCode muteRemoteVideo(BMXStream stream, boolean mute) {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_muteRemoteVideo(swigCPtr, this, BMXStream.getCPtr(stream), stream, mute));
  }

  public BMXErrorCode switchCamera() {
    return BMXErrorCode.swigToEnum(flooJNI.BMXRTCEngine_switchCamera(swigCPtr, this));
  }

  protected BMXRTCEngine() {
    this(flooJNI.new_BMXRTCEngine(), true);
    flooJNI.BMXRTCEngine_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

}
