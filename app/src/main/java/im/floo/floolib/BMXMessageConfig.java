/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package im.floo.floolib;

/**
 *  消息配置
 **/
public class BMXMessageConfig extends BMXBaseObject {
  private transient long swigCPtr;
  private transient boolean swigCMemOwnDerived;

  protected BMXMessageConfig(long cPtr, boolean cMemoryOwn) {
    super(flooJNI.BMXMessageConfig_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BMXMessageConfig obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        flooJNI.delete_BMXMessageConfig(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   *  设置是否@全员
   * @param mentionAll
   **/
  public void setMentionAll(boolean mentionAll) {
    flooJNI.BMXMessageConfig_setMentionAll(swigCPtr, this, mentionAll);
  }

  /**
   *  获取是否@全员
   * @return bool
   **/
  public boolean getMentionAll() {
    return flooJNI.BMXMessageConfig_getMentionAll(swigCPtr, this);
  }

  /**
   *  设置通知成员id列表
   * @param mentionList
   **/
  public void setMentionList(ListOfLongLong mentionList) {
    flooJNI.BMXMessageConfig_setMentionList(swigCPtr, this, ListOfLongLong.getCPtr(mentionList), mentionList);
  }

  /**
   *  获取@成员列表
   * @return std::vector<int64_t>
   **/
  public ListOfLongLong getMentionList() {
    return new ListOfLongLong(flooJNI.BMXMessageConfig_getMentionList(swigCPtr, this), true);
  }

  /**
   *  设置@消息
   * @param mentionedMessage
   **/
  public void setMentionedMessage(String mentionedMessage) {
    flooJNI.BMXMessageConfig_setMentionedMessage(swigCPtr, this, mentionedMessage);
  }

  /**
   *  获取@消息
   * @return std::string
   **/
  public String getMentionedMessage() {
    return flooJNI.BMXMessageConfig_getMentionedMessage(swigCPtr, this);
  }

  /**
   *  设置推送消息
   * @param pushMessage
   **/
  public void setPushMessage(String pushMessage) {
    flooJNI.BMXMessageConfig_setPushMessage(swigCPtr, this, pushMessage);
  }

  /**
   *  获取推送消息
   * @return std::string
   **/
  public String getPushMessage() {
    return flooJNI.BMXMessageConfig_getPushMessage(swigCPtr, this);
  }

  /**
   *  设置发送者昵称
   * @param senderNickname
   **/
  public void setSenderNickname(String senderNickname) {
    flooJNI.BMXMessageConfig_setSenderNickname(swigCPtr, this, senderNickname);
  }

  /**
   *  获取发送者昵称
   * @return std::string
   **/
  public String getSenderNickname() {
    return flooJNI.BMXMessageConfig_getSenderNickname(swigCPtr, this);
  }

  /**
   *  设置需要群已读消息的群成员id列表
   * @param groupMemberList
   **/
  public void setGroupMemberList(ListOfLongLong groupMemberList) {
    flooJNI.BMXMessageConfig_setGroupMemberList(swigCPtr, this, ListOfLongLong.getCPtr(groupMemberList), groupMemberList);
  }

  /**
   *  获取需要群已读消息的群成员id列表
   * @return std::vector<int64_t>
   **/
  public ListOfLongLong getGroupMemberList() {
    return new ListOfLongLong(flooJNI.BMXMessageConfig_getGroupMemberList(swigCPtr, this), true);
  }

  /**
   *  添加群已读消息的群成员id列表成员
   **/
  public void addGroupMember(long id) {
    flooJNI.BMXMessageConfig_addGroupMember(swigCPtr, this, id);
  }

  /**
   *  清除需要群已读消息的群成员id列表成员
   **/
  public void removeGroupMember(long id) {
    flooJNI.BMXMessageConfig_removeGroupMember(swigCPtr, this, id);
  }

  /**
   *  清空群已读消息的群成员id列表
   **/
  public void clearGroupMemberList() {
    flooJNI.BMXMessageConfig_clearGroupMemberList(swigCPtr, this);
  }

  public void setIOSConfig(String iosConfig) {
    flooJNI.BMXMessageConfig_setIOSConfig(swigCPtr, this, iosConfig);
  }

  /**
   *  获取iOS消息配置
   **/
  public String getIOSConfig() {
    return flooJNI.BMXMessageConfig_getIOSConfig(swigCPtr, this);
  }

  public void setAndroidConfig(String androidConfig) {
    flooJNI.BMXMessageConfig_setAndroidConfig(swigCPtr, this, androidConfig);
  }

  /**
   *  获取Android消息配置
   **/
  public String getAndroidConfig() {
    return flooJNI.BMXMessageConfig_getAndroidConfig(swigCPtr, this);
  }

  public void setPushShowBeginTime(int beginTime) {
    flooJNI.BMXMessageConfig_setPushShowBeginTime(swigCPtr, this, beginTime);
  }

  /**
   *  获取推送消息开始展示时间
   **/
  public int getPushShowBeginTime() {
    return flooJNI.BMXMessageConfig_getPushShowBeginTime(swigCPtr, this);
  }

  public void setPushShowEndTime(int endTime) {
    flooJNI.BMXMessageConfig_setPushShowEndTime(swigCPtr, this, endTime);
  }

  /**
   *  获取推送消息结束展示时间
   **/
  public int getPushShowEndTime() {
    return flooJNI.BMXMessageConfig_getPushShowEndTime(swigCPtr, this);
  }

  public void setPushTitle(String pushTitle) {
    flooJNI.BMXMessageConfig_setPushTitle(swigCPtr, this, pushTitle);
  }

  /**
   *  获取推送消息标题
   **/
  public String getPushTitle() {
    return flooJNI.BMXMessageConfig_getPushTitle(swigCPtr, this);
  }

  public void setPushTitleLocKey(String pushTitleLocKey) {
    flooJNI.BMXMessageConfig_setPushTitleLocKey(swigCPtr, this, pushTitleLocKey);
  }

  /**
   *  获取推送消息标题多语言键名
   **/
  public String getPushTitleLocKey() {
    return flooJNI.BMXMessageConfig_getPushTitleLocKey(swigCPtr, this);
  }

  public void setPushTitleLocArgs(String pushTitleLocArgs) {
    flooJNI.BMXMessageConfig_setPushTitleLocArgs(swigCPtr, this, pushTitleLocArgs);
  }

  /**
   *  获取推送消息标题多语言参数
   **/
  public String getPushTitleLocArgs() {
    return flooJNI.BMXMessageConfig_getPushTitleLocArgs(swigCPtr, this);
  }

  public void setPushMessageLocKey(String pushMessageLocKey) {
    flooJNI.BMXMessageConfig_setPushMessageLocKey(swigCPtr, this, pushMessageLocKey);
  }

  /**
   *  获取推送消息正文多语言键名
   **/
  public String getPushMessageLocKey() {
    return flooJNI.BMXMessageConfig_getPushMessageLocKey(swigCPtr, this);
  }

  public void setPushMessageLocArgs(String pushMessageLocArgs) {
    flooJNI.BMXMessageConfig_setPushMessageLocArgs(swigCPtr, this, pushMessageLocArgs);
  }

  /**
   *  获取推送消息正文多语言参数
   **/
  public String getPushMessageLocArgs() {
    return flooJNI.BMXMessageConfig_getPushMessageLocArgs(swigCPtr, this);
  }

  public boolean isSilence() {
    return flooJNI.BMXMessageConfig_isSilence(swigCPtr, this);
  }

  public BMXMessageConfig.BadgeCountType getBadgeCountType() {
    return BMXMessageConfig.BadgeCountType.swigToEnum(flooJNI.BMXMessageConfig_getBadgeCountType(swigCPtr, this));
  }

  public int getBadgeCount(int count) {
    return flooJNI.BMXMessageConfig_getBadgeCount(swigCPtr, this, count);
  }

  /**
   *  获取消息发送者用户名
   **/
  public String getUsername() {
    return flooJNI.BMXMessageConfig_getUsername(swigCPtr, this);
  }

  /**
   *  设置呼叫消息内容
   * @param calltype 呼叫类型
   * @param roomId 房间ID
   * @param initiator 呼叫者ID
   * @param roomType 房间类型
   * @param pin 房间密码
   **/
  public void setRTCCallInfo(BMXMessageConfig.RTCCallType calltype, long roomId, long initiator, BMXMessageConfig.RTCRoomType roomType, String pin) {
    flooJNI.BMXMessageConfig_setRTCCallInfo(swigCPtr, this, calltype.swigValue(), roomId, initiator, roomType.swigValue(), pin);
  }

  /**
   *  设置接听消息内容
   * @param callId 呼叫ID
   **/
  public void setRTCPickupInfo(String callId) {
    flooJNI.BMXMessageConfig_setRTCPickupInfo(swigCPtr, this, callId);
  }

  /**
   *  设置挂断消息内容
   * @param callId 呼叫ID
   * @param peerDrop 是否对方异常挂断
   **/
  public void setRTCHangupInfo(String callId, boolean peerDrop) {
    flooJNI.BMXMessageConfig_setRTCHangupInfo__SWIG_0(swigCPtr, this, callId, peerDrop);
  }


  /**
   *  设置通话记录消息内容
   * @param callId 呼叫ID
   * @param peerDrop 是否对方异常挂断
   **/
  public void setRTCRecordInfo(String callId, boolean peerDrop) {
    flooJNI.BMXMessageConfig_setRTCRecordInfo__SWIG_0(swigCPtr, this, callId, peerDrop);
  }

  /**
   *  获取RTC动作
   **/
  public String getRTCAction() {
    return flooJNI.BMXMessageConfig_getRTCAction(swigCPtr, this);
  }

  /**
   *  获取呼叫类型
   **/
  public BMXMessageConfig.RTCCallType getRTCCallType() {
    return BMXMessageConfig.RTCCallType.swigToEnum(flooJNI.BMXMessageConfig_getRTCCallType(swigCPtr, this));
  }

  /**
   *  获取房间ID
   **/
  public long getRTCRoomId() {
    return flooJNI.BMXMessageConfig_getRTCRoomId(swigCPtr, this);
  }

  /**
   *  获取呼叫者ID
   **/
  public long getRTCInitiator() {
    return flooJNI.BMXMessageConfig_getRTCInitiator(swigCPtr, this);
  }

  /**
   *  获取呼叫者ID
   **/
  public String getRTCCallId() {
    return flooJNI.BMXMessageConfig_getRTCCallId(swigCPtr, this);
  }

  /**
   *  是否因对方异常退出而挂断
   **/
  public boolean getPeerDrop() {
    return flooJNI.BMXMessageConfig_getPeerDrop(swigCPtr, this);
  }

  /**
   *  获取房间类型
   **/
  public BMXMessageConfig.RTCRoomType getRTCRoomType() {
    return BMXMessageConfig.RTCRoomType.swigToEnum(flooJNI.BMXMessageConfig_getRTCRoomType(swigCPtr, this));
  }

  /**
   *  获取房间密码
   **/
  public String getRTCPin() {
    return flooJNI.BMXMessageConfig_getRTCPin(swigCPtr, this);
  }

  /**
   *  序列化操作
   * @return std::string
   **/
  public String serialize() {
    return flooJNI.BMXMessageConfig_serialize(swigCPtr, this);
  }

  public static BMXMessageConfig createMessageConfig(boolean mentionAll) {
    long cPtr = flooJNI.BMXMessageConfig_createMessageConfig(mentionAll);
    return (cPtr == 0) ? null : new BMXMessageConfig(cPtr, true);
  }

  public enum BadgeCountType {
    Change,
    Set;

    public final int swigValue() {
      return swigValue;
    }

    public static BadgeCountType swigToEnum(int swigValue) {
      BadgeCountType[] swigValues = BadgeCountType.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (BadgeCountType swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + BadgeCountType.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private BadgeCountType() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private BadgeCountType(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private BadgeCountType(BadgeCountType swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum RTCCallType {
    AudioCall,
    VideoCall;

    public final int swigValue() {
      return swigValue;
    }

    public static RTCCallType swigToEnum(int swigValue) {
      RTCCallType[] swigValues = RTCCallType.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (RTCCallType swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + RTCCallType.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private RTCCallType() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private RTCCallType(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private RTCCallType(RTCCallType swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum RTCRoomType {
    Communication,
    Broadcast;

    public final int swigValue() {
      return swigValue;
    }

    public static RTCRoomType swigToEnum(int swigValue) {
      RTCRoomType[] swigValues = RTCRoomType.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (RTCRoomType swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + RTCRoomType.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private RTCRoomType() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private RTCRoomType(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private RTCRoomType(RTCRoomType swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
