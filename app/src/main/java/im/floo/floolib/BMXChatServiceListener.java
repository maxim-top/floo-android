/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package im.floo.floolib;

/**
 *  聊天监听者
 **/
public class BMXChatServiceListener {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected BMXChatServiceListener(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BMXChatServiceListener obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        flooJNI.delete_BMXChatServiceListener(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    flooJNI.BMXChatServiceListener_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    flooJNI.BMXChatServiceListener_change_ownership(this, swigCPtr, true);
  }

  /**
   *  消息发送状态发生变化
   * @param msg 发生状态变化的消息
   * @param error 状态错误码
   **/
  public void onStatusChanged(BMXMessage msg, BMXErrorCode error) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onStatusChanged(swigCPtr, this, BMXMessage.getCPtr(msg), msg, error.swigValue()); else flooJNI.BMXChatServiceListener_onStatusChangedSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessage.getCPtr(msg), msg, error.swigValue());
  }

  /**
   *  附件上传进度发送变化
   * @param msg 上传附件的消息
   * @param percent 附件上传的进度
   **/
  public void onAttachmentUploadProgressChanged(BMXMessage msg, int percent) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onAttachmentUploadProgressChanged(swigCPtr, this, BMXMessage.getCPtr(msg), msg, percent); else flooJNI.BMXChatServiceListener_onAttachmentUploadProgressChangedSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessage.getCPtr(msg), msg, percent);
  }

  /**
   * @brief 追加内容消息发送状态发生变化
   * @param msg 发生追加内容状态变化的消息
   * @param error 状态错误码
   **/
  public void onContentAppendChanged(BMXMessage msg, BMXErrorCode error) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onContentAppendChanged(swigCPtr, this, BMXMessage.getCPtr(msg), msg, error.swigValue()); else flooJNI.BMXChatServiceListener_onContentAppendChangedSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessage.getCPtr(msg), msg, error.swigValue());
  }

  /**
   * @brief 替换消息发送状态发生变化
   * @param msg 发生替换消息状态变化的消息
   * @param error 状态错误码
   **/
  public void onReplaceChanged(BMXMessage msg, BMXErrorCode error) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onReplaceChanged(swigCPtr, this, BMXMessage.getCPtr(msg), msg, error.swigValue()); else flooJNI.BMXChatServiceListener_onReplaceChangedSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessage.getCPtr(msg), msg, error.swigValue());
  }

  /**
   *  消息撤回状态发送变化
   * @param msg 撤回状态发生变化的消息
   * @param error 状态错误码
   **/
  public void onRecallStatusChanged(BMXMessage msg, BMXErrorCode error) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onRecallStatusChanged(swigCPtr, this, BMXMessage.getCPtr(msg), msg, error.swigValue()); else flooJNI.BMXChatServiceListener_onRecallStatusChangedSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessage.getCPtr(msg), msg, error.swigValue());
  }

  /**
   *  收到消息
   * @param list 接收到的消息列表
   **/
  public void onReceive(BMXMessageList list) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onReceive(swigCPtr, this, BMXMessageList.getCPtr(list), list); else flooJNI.BMXChatServiceListener_onReceiveSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessageList.getCPtr(list), list);
  }

  /**
   *  收到命令消息
   * @param list 接收到的消息列表
   **/
  public void onReceiveCommandMessages(BMXMessageList list) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onReceiveCommandMessages(swigCPtr, this, BMXMessageList.getCPtr(list), list); else flooJNI.BMXChatServiceListener_onReceiveCommandMessagesSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessageList.getCPtr(list), list);
  }

  /**
   *  收到系统通知消息
   * @param list 接收到的系统消息列表
   **/
  public void onReceiveSystemMessages(BMXMessageList list) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onReceiveSystemMessages(swigCPtr, this, BMXMessageList.getCPtr(list), list); else flooJNI.BMXChatServiceListener_onReceiveSystemMessagesSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessageList.getCPtr(list), list);
  }

  /**
   *  收到消息已读回执
   * @param list 接收到的已读回执消息列表
   **/
  public void onReceiveReadAcks(BMXMessageList list) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onReceiveReadAcks(swigCPtr, this, BMXMessageList.getCPtr(list), list); else flooJNI.BMXChatServiceListener_onReceiveReadAcksSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessageList.getCPtr(list), list);
  }

  /**
   *  收到消息已送达回执
   * @param list 接收到的已送达回执消息列表
   **/
  public void onReceiveDeliverAcks(BMXMessageList list) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onReceiveDeliverAcks(swigCPtr, this, BMXMessageList.getCPtr(list), list); else flooJNI.BMXChatServiceListener_onReceiveDeliverAcksSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessageList.getCPtr(list), list);
  }

  /**
   *  收到撤回消息
   * @param list 接收到的撤回消息列表
   **/
  public void onReceiveRecallMessages(BMXMessageList list) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onReceiveRecallMessages(swigCPtr, this, BMXMessageList.getCPtr(list), list); else flooJNI.BMXChatServiceListener_onReceiveRecallMessagesSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessageList.getCPtr(list), list);
  }

  /**
   *  收到消息已读取消（多设备其他设备同步消息已读状态变为未读）
   * @param list 接收到的消息已读取消消息列表
   **/
  public void onReceiveReadCancels(BMXMessageList list) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onReceiveReadCancels(swigCPtr, this, BMXMessageList.getCPtr(list), list); else flooJNI.BMXChatServiceListener_onReceiveReadCancelsSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessageList.getCPtr(list), list);
  }

  /**
   *  收到消息全部已读（多设备同步某消息之前消息全部设置为已读）
   * @param list 接收到的消息全部已读消息列表
   **/
  public void onReceiveReadAllMessages(BMXMessageList list) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onReceiveReadAllMessages(swigCPtr, this, BMXMessageList.getCPtr(list), list); else flooJNI.BMXChatServiceListener_onReceiveReadAllMessagesSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessageList.getCPtr(list), list);
  }

  /**
   *  收到删除消息 （多设备同步删除消息）
   * @param list 接收到的删除消息列表
   **/
  public void onReceiveDeleteMessages(BMXMessageList list) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onReceiveDeleteMessages(swigCPtr, this, BMXMessageList.getCPtr(list), list); else flooJNI.BMXChatServiceListener_onReceiveDeleteMessagesSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessageList.getCPtr(list), list);
  }

  /**
   *  收到消息已播放回执
   * @param list 接收到的已读回执消息列表
   **/
  public void onReceivePlayAcks(BMXMessageList list) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onReceivePlayAcks(swigCPtr, this, BMXMessageList.getCPtr(list), list); else flooJNI.BMXChatServiceListener_onReceivePlayAcksSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessageList.getCPtr(list), list);
  }

  /**
   * 收到追加内容消息
   * @param list 接收到的追加内容消息列表
   **/
  public void onReceiveAppendContentMessages(BMXMessageList list) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onReceiveAppendContentMessages(swigCPtr, this, BMXMessageList.getCPtr(list), list); else flooJNI.BMXChatServiceListener_onReceiveAppendContentMessagesSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessageList.getCPtr(list), list);
  }

  /**
   * 收到变更内容消息
   * @param list 接收到的变更内容消息列表
   **/
  public void onReceiveReplaceMessages(BMXMessageList list) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onReceiveReplaceMessages(swigCPtr, this, BMXMessageList.getCPtr(list), list); else flooJNI.BMXChatServiceListener_onReceiveReplaceMessagesSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessageList.getCPtr(list), list);
  }
  /**
   *  附件下载状态发生变化
   * @param msg 发生下载状态变化的消息
   * @param error 状态错误码
   * @param percent 附件下载的进度
   **/
  public void onAttachmentStatusChanged(BMXMessage msg, BMXErrorCode error, int percent) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onAttachmentStatusChanged(swigCPtr, this, BMXMessage.getCPtr(msg), msg, error.swigValue(), percent); else flooJNI.BMXChatServiceListener_onAttachmentStatusChangedSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXMessage.getCPtr(msg), msg, error.swigValue(), percent);
  }

  /**
   *  附件下载状态发生变化
   * @param msgId 发生下载状态变化的消息ID
   * @param error 状态错误码
   * @param percent 附件下载的进度
   **/
  public void onAttachmentDownloadByUrlStatusChanged(long msgId, BMXErrorCode error, int percent) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onAttachmentDownloadByUrlStatusChanged(swigCPtr, this, msgId, error.swigValue(), percent); else flooJNI.BMXChatServiceListener_onAttachmentDownloadByUrlStatusChangedSwigExplicitBMXChatServiceListener(swigCPtr, this, msgId, error.swigValue(), percent);
  }

  /**
   *  拉取历史消息
   * @param conversation 发生了拉取指历史消息的会话
   **/
  public void onRetrieveHistoryMessages(BMXConversation conversation) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onRetrieveHistoryMessages(swigCPtr, this, BMXConversation.getCPtr(conversation), conversation); else flooJNI.BMXChatServiceListener_onRetrieveHistoryMessagesSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXConversation.getCPtr(conversation), conversation);
  }

  /**
   *  已经加载完未读会话列表
   **/
  public void onLoadAllConversation() {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onLoadAllConversation(swigCPtr, this); else flooJNI.BMXChatServiceListener_onLoadAllConversationSwigExplicitBMXChatServiceListener(swigCPtr, this);
  }

  /**
   *  本地创建新会话
   * @param conversation 新创建的本地会话
   * @param msg 会话的最新消息，存在返回不存在返回为空
   **/
  public void onConversationCreate(BMXConversation conversation, BMXMessage msg) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onConversationCreate(swigCPtr, this, BMXConversation.getCPtr(conversation), conversation, BMXMessage.getCPtr(msg), msg); else flooJNI.BMXChatServiceListener_onConversationCreateSwigExplicitBMXChatServiceListener(swigCPtr, this, BMXConversation.getCPtr(conversation), conversation, BMXMessage.getCPtr(msg), msg);
  }

  /**
   *  删除会话
   * @param conversationId 删除的本地会话id
   * @param error 状态错误码
   **/
  public void onConversationDelete(long conversationId, BMXErrorCode error) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onConversationDelete(swigCPtr, this, conversationId, error.swigValue()); else flooJNI.BMXChatServiceListener_onConversationDeleteSwigExplicitBMXChatServiceListener(swigCPtr, this, conversationId, error.swigValue());
  }

  /**
   *  更新总未读数
   * @param unreadCount 本地全部会话未读总数
   **/
  public void onTotalUnreadCountChanged(int unreadCount) {
    if (getClass() == BMXChatServiceListener.class) flooJNI.BMXChatServiceListener_onTotalUnreadCountChanged(swigCPtr, this, unreadCount); else flooJNI.BMXChatServiceListener_onTotalUnreadCountChangedSwigExplicitBMXChatServiceListener(swigCPtr, this, unreadCount);
  }

  public BMXChatServiceListener() {
    this(flooJNI.new_BMXChatServiceListener(), true);
    flooJNI.BMXChatServiceListener_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public void registerChatService(BMXChatService service) {
    flooJNI.BMXChatServiceListener_registerChatService(swigCPtr, this, BMXChatService.getCPtr(service), service);
  }

}
