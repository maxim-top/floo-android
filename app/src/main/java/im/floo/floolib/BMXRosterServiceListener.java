/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package im.floo.floolib;

/**
 *  好友变化监听者
 **/
public class BMXRosterServiceListener {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected BMXRosterServiceListener(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BMXRosterServiceListener obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        flooJNI.delete_BMXRosterServiceListener(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    flooJNI.BMXRosterServiceListener_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    flooJNI.BMXRosterServiceListener_change_ownership(this, swigCPtr, true);
  }

  /**
   *  添加好友
   * @param sponsorId 操作的发起者
   * @param recipientId 操作的接受者
   **/
  public void onFriendAdded(long sponsorId, long recipientId) {
    if (getClass() == BMXRosterServiceListener.class) flooJNI.BMXRosterServiceListener_onFriendAdded(swigCPtr, this, sponsorId, recipientId); else flooJNI.BMXRosterServiceListener_onFriendAddedSwigExplicitBMXRosterServiceListener(swigCPtr, this, sponsorId, recipientId);
  }

  /**
   *  删除好友
   * @param sponsorId 操作的发起者
   * @param recipientId 操作的接受者
   **/
  public void onFriendRemoved(long sponsorId, long recipientId) {
    if (getClass() == BMXRosterServiceListener.class) flooJNI.BMXRosterServiceListener_onFriendRemoved(swigCPtr, this, sponsorId, recipientId); else flooJNI.BMXRosterServiceListener_onFriendRemovedSwigExplicitBMXRosterServiceListener(swigCPtr, this, sponsorId, recipientId);
  }

  /**
   *  收到加好友申请
   * @param sponsorId 操作的发起者
   * @param recipientId 操作的接受者
   * @param message 好友申请消息
   **/
  public void onApplied(long sponsorId, long recipientId, String message) {
    if (getClass() == BMXRosterServiceListener.class) flooJNI.BMXRosterServiceListener_onApplied(swigCPtr, this, sponsorId, recipientId, message); else flooJNI.BMXRosterServiceListener_onAppliedSwigExplicitBMXRosterServiceListener(swigCPtr, this, sponsorId, recipientId, message);
  }

  /**
   *  加好友申请被通过了
   * @param sponsorId 操作的发起者
   * @param recipientId 操作的接受者
   **/
  public void onApplicationAccepted(long sponsorId, long recipientId) {
    if (getClass() == BMXRosterServiceListener.class) flooJNI.BMXRosterServiceListener_onApplicationAccepted(swigCPtr, this, sponsorId, recipientId); else flooJNI.BMXRosterServiceListener_onApplicationAcceptedSwigExplicitBMXRosterServiceListener(swigCPtr, this, sponsorId, recipientId);
  }

  /**
   *  加好友申请被拒绝了
   * @param sponsorId 操作的发起者
   * @param recipientId 操作的接受者
   * @param reason 申请拒绝原因
   **/
  public void onApplicationDeclined(long sponsorId, long recipientId, String reason) {
    if (getClass() == BMXRosterServiceListener.class) flooJNI.BMXRosterServiceListener_onApplicationDeclined(swigCPtr, this, sponsorId, recipientId, reason); else flooJNI.BMXRosterServiceListener_onApplicationDeclinedSwigExplicitBMXRosterServiceListener(swigCPtr, this, sponsorId, recipientId, reason);
  }

  /**
   *  添加黑名单
   * @param sponsorId 操作的发起者
   * @param recipientId 操作的接受者
   **/
  public void onBlockListAdded(long sponsorId, long recipientId) {
    if (getClass() == BMXRosterServiceListener.class) flooJNI.BMXRosterServiceListener_onBlockListAdded(swigCPtr, this, sponsorId, recipientId); else flooJNI.BMXRosterServiceListener_onBlockListAddedSwigExplicitBMXRosterServiceListener(swigCPtr, this, sponsorId, recipientId);
  }

  /**
   *  删除黑名单
   * @param sponsorId 操作的发起者
   * @param recipientId 操作的接受者
   **/
  public void onBlockListRemoved(long sponsorId, long recipientId) {
    if (getClass() == BMXRosterServiceListener.class) flooJNI.BMXRosterServiceListener_onBlockListRemoved(swigCPtr, this, sponsorId, recipientId); else flooJNI.BMXRosterServiceListener_onBlockListRemovedSwigExplicitBMXRosterServiceListener(swigCPtr, this, sponsorId, recipientId);
  }

  /**
   *  用户信息更新
   * @param item 更新的好友信息
   **/
  public void onRosterInfoUpdate(BMXRosterItem item) {
    if (getClass() == BMXRosterServiceListener.class) flooJNI.BMXRosterServiceListener_onRosterInfoUpdate(swigCPtr, this, BMXRosterItem.getCPtr(item), item); else flooJNI.BMXRosterServiceListener_onRosterInfoUpdateSwigExplicitBMXRosterServiceListener(swigCPtr, this, BMXRosterItem.getCPtr(item), item);
  }

  /**
   *  客户端从服务器拉取到新联系人时触发，用于用户联系人列表更新，从SDK调用本地获取联系人即可取得全部成员信息
   **/
  public void onRosterListUpdate() {
    if (getClass() == BMXRosterServiceListener.class) flooJNI.BMXRosterServiceListener_onRosterListUpdate(swigCPtr, this); else flooJNI.BMXRosterServiceListener_onRosterListUpdateSwigExplicitBMXRosterServiceListener(swigCPtr, this);
  }

  public BMXRosterServiceListener() {
    this(flooJNI.new_BMXRosterServiceListener(), true);
    flooJNI.BMXRosterServiceListener_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public void registerRosterService(BMXRosterService service) {
    flooJNI.BMXRosterServiceListener_registerRosterService(swigCPtr, this, BMXRosterService.getCPtr(service), service);
  }

}
