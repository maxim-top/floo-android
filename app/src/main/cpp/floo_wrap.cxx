/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif
#include <jni.h>
#include <sstream>

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_flooJNI = NULL;
    jmethodID director_method_ids[71];
  }
}

#include "bmx_error.h"
#include "bmx_defines.h"
#include "bmx_device.h"
#include "bmx_base_object.h"
#include "bmx_message_attachment.h"
#include "bmx_message_config.h"
#include "bmx_message.h"
#include "bmx_conversation.h"
#include "bmx_sdk_config.h"
#include "bmx_network_listener.h"
#include "bmx_chat_service.h"
#include "bmx_chat_service_listener.h"
#include "bmx_push_service.h"
#include "bmx_push_service_listener.h"
#include "bmx_client.h"
#include "bmx_file_attachment.h"
#include "bmx_group.h"
#include "bmx_group_service.h"
#include "bmx_image_attachment.h"
#include "bmx_location_attachment.h"
#include "bmx_result_page.h"
#include "bmx_roster_item.h"
#include "bmx_roster_service.h"
#include "bmx_roster_service_listener.h"
#include "bmx_user_profile.h"
#include "user_profile_impl.h"
#include "bmx_user_service.h"
#include "bmx_user_service_listener.h"
#include "bmx_video_attachment.h"
#include "bmx_voice_attachment.h"
#include "bmx_group_service_listener.h"
#include "bmx_push_user_profile.h"
#include <utility>


#include <stdint.h>		// Use the C99 official header


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>

SWIGINTERN std::vector< std::shared_ptr< floo::BMXMessage > >::const_reference std_vector_Sl_std_shared_ptr_Sl_floo_BMXMessage_Sg__Sg__get(std::vector< std::shared_ptr< floo::BMXMessage > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_floo_BMXMessage_Sg__Sg__set(std::vector< std::shared_ptr< floo::BMXMessage > > *self,int i,std::vector< std::shared_ptr< floo::BMXMessage > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< floo::BMXConversation > >::const_reference std_vector_Sl_std_shared_ptr_Sl_floo_BMXConversation_Sg__Sg__get(std::vector< std::shared_ptr< floo::BMXConversation > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_floo_BMXConversation_Sg__Sg__set(std::vector< std::shared_ptr< floo::BMXConversation > > *self,int i,std::vector< std::shared_ptr< floo::BMXConversation > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< floo::BMXRosterItem > >::const_reference std_vector_Sl_std_shared_ptr_Sl_floo_BMXRosterItem_Sg__Sg__get(std::vector< std::shared_ptr< floo::BMXRosterItem > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_floo_BMXRosterItem_Sg__Sg__set(std::vector< std::shared_ptr< floo::BMXRosterItem > > *self,int i,std::vector< std::shared_ptr< floo::BMXRosterItem > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< floo::BMXDevice > >::const_reference std_vector_Sl_std_shared_ptr_Sl_floo_BMXDevice_Sg__Sg__get(std::vector< std::shared_ptr< floo::BMXDevice > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_floo_BMXDevice_Sg__Sg__set(std::vector< std::shared_ptr< floo::BMXDevice > > *self,int i,std::vector< std::shared_ptr< floo::BMXDevice > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< floo::BMXGroup > >::const_reference std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Sg__Sg__get(std::vector< std::shared_ptr< floo::BMXGroup > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Sg__Sg__set(std::vector< std::shared_ptr< floo::BMXGroup > > *self,int i,std::vector< std::shared_ptr< floo::BMXGroup > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< floo::BMXGroup::Member > >::const_reference std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Member_Sg__Sg__get(std::vector< std::shared_ptr< floo::BMXGroup::Member > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Member_Sg__Sg__set(std::vector< std::shared_ptr< floo::BMXGroup::Member > > *self,int i,std::vector< std::shared_ptr< floo::BMXGroup::Member > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::const_reference std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_BannedMember_Sg__Sg__get(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_BannedMember_Sg__Sg__set(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *self,int i,std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::const_reference std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_SharedFile_Sg__Sg__get(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_SharedFile_Sg__Sg__set(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *self,int i,std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::const_reference std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Announcement_Sg__Sg__get(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Announcement_Sg__Sg__set(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *self,int i,std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::const_reference std_vector_Sl_std_shared_ptr_Sl_floo_BMXRosterService_Application_Sg__Sg__get(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_floo_BMXRosterService_Application_Sg__Sg__set(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *self,int i,std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< floo::BMXGroup::Application > >::const_reference std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Application_Sg__Sg__get(std::vector< std::shared_ptr< floo::BMXGroup::Application > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Application_Sg__Sg__set(std::vector< std::shared_ptr< floo::BMXGroup::Application > > *self,int i,std::vector< std::shared_ptr< floo::BMXGroup::Application > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::const_reference std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Invitation_Sg__Sg__get(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Invitation_Sg__Sg__set(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *self,int i,std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< long long >::const_reference std_vector_Sl_long_SS_long_Sg__get(std::vector< long long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__set(std::vector< long long > *self,int i,std::vector< long long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN floo::BMXFileAttachment *floo_BMXFileAttachment_dynamic_cast(floo::BMXMessageAttachment *attachment){
    return dynamic_cast<floo::BMXFileAttachment *>(attachment);
  }
SWIGINTERN floo::BMXImageAttachment *floo_BMXImageAttachment_dynamic_cast(floo::BMXMessageAttachment *attachment){
    return dynamic_cast<floo::BMXImageAttachment *>(attachment);
  }
SWIGINTERN floo::BMXLocationAttachment *floo_BMXLocationAttachment_dynamic_cast(floo::BMXMessageAttachment *attachment){
    return dynamic_cast<floo::BMXLocationAttachment *>(attachment);
  }
SWIGINTERN std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::const_reference std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_floo_BMXMessage_Sg__Sg__Sg__get(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_floo_BMXMessage_Sg__Sg__Sg__set(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *self,int i,std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN floo::BMXVideoAttachment *floo_BMXVideoAttachment_dynamic_cast(floo::BMXMessageAttachment *attachment){
    return dynamic_cast<floo::BMXVideoAttachment *>(attachment);
  }
SWIGINTERN floo::BMXVoiceAttachment *floo_BMXVoiceAttachment_dynamic_cast(floo::BMXMessageAttachment *attachment){
    return dynamic_cast<floo::BMXVoiceAttachment *>(attachment);
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "floo_wrap.h"
JavaVM *g_VM;


#define GET_INT_VECTOR(in) \
  std::vector< int64_t > *argX = 0 ;\
  do { \
  argX = *(std::vector< int64_t > **)&in; \
  if (!argX) {\
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null"); \
    return 0; \
  } \
} while(false)


#define PUSH_INT_INTO_VECTOR argX->push_back((long)jPtr)


typedef std::function<void(int percent)> Callback;

Callback createCallback(JNIEnv *jenv, jobject jarg){
  return [=](int percent){
      jclass javaClass = jenv->GetObjectClass(jarg);
      if (javaClass == 0) {
        g_VM->DetachCurrentThread();
        return;
      }
      //获取要回调的方法ID
      jmethodID javaCallbackId = jenv->GetMethodID( javaClass,
                                                    "onProgressChange", "(Ljava/lang/String;)I");
      if (javaCallbackId == NULL) {
        return;
      }
      std::stringstream ss;
      ss<<percent;
      jstring sPercent = jenv->NewStringUTF(ss.str().c_str());
      Swig::LocalRefGuard refguard(jenv, sPercent);

      //执行回调
      jenv->CallIntMethod(jarg, javaCallbackId,sPercent);
      jenv->DeleteLocalRef(javaClass);
  };
}

SwigDirector_BMXNetworkListener::SwigDirector_BMXNetworkListener(JNIEnv *jenv) : floo::BMXNetworkListener(), Swig::Director(jenv) {
}

SwigDirector_BMXNetworkListener::~SwigDirector_BMXNetworkListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_BMXNetworkListener::onNetworkChanged(floo::BMXNetworkType type, bool reconnect) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtype  ;
  jboolean jreconnect  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method floo::BMXNetworkListener::onNetworkChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtype = (jint) type;
    jreconnect = (jboolean) reconnect;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[0], swigjobj, jtype, jreconnect);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXNetworkListener::onNetworkChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXNetworkListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onNetworkChanged", "(Lim/floo/floolib/BMXNetworkType;Z)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("im/floo/floolib/BMXNetworkListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_BMXChatServiceListener::SwigDirector_BMXChatServiceListener(JNIEnv *jenv) : floo::BMXChatServiceListener(), Swig::Director(jenv) {
}

SwigDirector_BMXChatServiceListener::~SwigDirector_BMXChatServiceListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_BMXChatServiceListener::onStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmsg  ;
  jint jerror  ;
  
  if (!swig_override[0]) {
    floo::BMXChatServiceListener::onStatusChanged(msg,error);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmsg = 0;
    *((floo::BMXMessagePtr **)&jmsg) = new floo::BMXMessagePtr((const floo::BMXMessagePtr &)msg); 
    jerror = (jint) error;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[1], swigjobj, jmsg, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onStatusChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onAttachmentUploadProgressChanged(floo::BMXMessagePtr msg, int percent) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmsg  ;
  jint jpercent  ;
  
  if (!swig_override[1]) {
    floo::BMXChatServiceListener::onAttachmentUploadProgressChanged(msg,percent);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmsg = 0;
    *((floo::BMXMessagePtr **)&jmsg) = new floo::BMXMessagePtr((const floo::BMXMessagePtr &)msg); 
    jpercent = (jint) percent;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[2], swigjobj, jmsg, jpercent);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onAttachmentUploadProgressChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onRecallStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmsg  ;
  jint jerror  ;
  
  if (!swig_override[2]) {
    floo::BMXChatServiceListener::onRecallStatusChanged(msg,error);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmsg = 0;
    *((floo::BMXMessagePtr **)&jmsg) = new floo::BMXMessagePtr((const floo::BMXMessagePtr &)msg); 
    jerror = (jint) error;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[3], swigjobj, jmsg, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onRecallStatusChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onReceive(floo::BMXMessageList const &list) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist = 0 ;
  
  if (!swig_override[3]) {
    floo::BMXChatServiceListener::onReceive(list);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(floo::BMXMessageList **)&jlist = (floo::BMXMessageList *) &list; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[4], swigjobj, jlist);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onReceive ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onReceiveCommandMessages(floo::BMXMessageList const &list) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist = 0 ;
  
  if (!swig_override[4]) {
    floo::BMXChatServiceListener::onReceiveCommandMessages(list);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(floo::BMXMessageList **)&jlist = (floo::BMXMessageList *) &list; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[5], swigjobj, jlist);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onReceiveCommandMessages ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onReceiveSystemMessages(floo::BMXMessageList const &list) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist = 0 ;
  
  if (!swig_override[5]) {
    floo::BMXChatServiceListener::onReceiveSystemMessages(list);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(floo::BMXMessageList **)&jlist = (floo::BMXMessageList *) &list; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[6], swigjobj, jlist);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onReceiveSystemMessages ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onReceiveReadAcks(floo::BMXMessageList const &list) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist = 0 ;
  
  if (!swig_override[6]) {
    floo::BMXChatServiceListener::onReceiveReadAcks(list);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(floo::BMXMessageList **)&jlist = (floo::BMXMessageList *) &list; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[7], swigjobj, jlist);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onReceiveReadAcks ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onReceiveDeliverAcks(floo::BMXMessageList const &list) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist = 0 ;
  
  if (!swig_override[7]) {
    floo::BMXChatServiceListener::onReceiveDeliverAcks(list);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(floo::BMXMessageList **)&jlist = (floo::BMXMessageList *) &list; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[8], swigjobj, jlist);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onReceiveDeliverAcks ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onReceiveRecallMessages(floo::BMXMessageList const &list) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist = 0 ;
  
  if (!swig_override[8]) {
    floo::BMXChatServiceListener::onReceiveRecallMessages(list);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(floo::BMXMessageList **)&jlist = (floo::BMXMessageList *) &list; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[9], swigjobj, jlist);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onReceiveRecallMessages ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onReceiveReadCancels(floo::BMXMessageList const &list) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist = 0 ;
  
  if (!swig_override[9]) {
    floo::BMXChatServiceListener::onReceiveReadCancels(list);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(floo::BMXMessageList **)&jlist = (floo::BMXMessageList *) &list; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[10], swigjobj, jlist);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onReceiveReadCancels ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onReceiveReadAllMessages(floo::BMXMessageList const &list) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist = 0 ;
  
  if (!swig_override[10]) {
    floo::BMXChatServiceListener::onReceiveReadAllMessages(list);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(floo::BMXMessageList **)&jlist = (floo::BMXMessageList *) &list; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[11], swigjobj, jlist);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onReceiveReadAllMessages ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onReceiveDeleteMessages(floo::BMXMessageList const &list) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist = 0 ;
  
  if (!swig_override[11]) {
    floo::BMXChatServiceListener::onReceiveDeleteMessages(list);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(floo::BMXMessageList **)&jlist = (floo::BMXMessageList *) &list; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[12], swigjobj, jlist);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onReceiveDeleteMessages ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onReceivePlayAcks(floo::BMXMessageList const &list) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist = 0 ;
  
  if (!swig_override[12]) {
    floo::BMXChatServiceListener::onReceivePlayAcks(list);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(floo::BMXMessageList **)&jlist = (floo::BMXMessageList *) &list; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[13], swigjobj, jlist);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onReceivePlayAcks ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onAttachmentStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error, int percent) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmsg  ;
  jint jerror  ;
  jint jpercent  ;
  
  if (!swig_override[13]) {
    floo::BMXChatServiceListener::onAttachmentStatusChanged(msg,error,percent);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmsg = 0;
    *((floo::BMXMessagePtr **)&jmsg) = new floo::BMXMessagePtr((const floo::BMXMessagePtr &)msg); 
    jerror = (jint) error;
    jpercent = (jint) percent;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[14], swigjobj, jmsg, jerror, jpercent);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onAttachmentStatusChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onAttachmentDownloadByUrlStatusChanged(int64_t msgId, floo::BMXErrorCode error, int percent) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmsgId  ;
  jint jerror  ;
  jint jpercent  ;
  
  if (!swig_override[14]) {
    floo::BMXChatServiceListener::onAttachmentDownloadByUrlStatusChanged(msgId,error,percent);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmsgId = (jlong) msgId;
    jerror = (jint) error;
    jpercent = (jint) percent;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[15], swigjobj, jmsgId, jerror, jpercent);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onAttachmentDownloadByUrlStatusChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onRetrieveHistoryMessages(floo::BMXConversationPtr conversation) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jconversation  ;
  
  if (!swig_override[15]) {
    floo::BMXChatServiceListener::onRetrieveHistoryMessages(conversation);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconversation = 0;
    *((floo::BMXConversationPtr **)&jconversation) = new floo::BMXConversationPtr((const floo::BMXConversationPtr &)conversation); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[16], swigjobj, jconversation);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onRetrieveHistoryMessages ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onLoadAllConversation() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[16]) {
    floo::BMXChatServiceListener::onLoadAllConversation();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[17], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onLoadAllConversation ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onConversationCreate(floo::BMXConversationPtr conversation, floo::BMXMessagePtr msg) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jconversation  ;
  jlong jmsg  ;
  
  if (!swig_override[17]) {
    floo::BMXChatServiceListener::onConversationCreate(conversation,msg);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconversation = 0;
    *((floo::BMXConversationPtr **)&jconversation) = new floo::BMXConversationPtr((const floo::BMXConversationPtr &)conversation); 
    jmsg = 0;
    *((floo::BMXMessagePtr **)&jmsg) = new floo::BMXMessagePtr((const floo::BMXMessagePtr &)msg); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[18], swigjobj, jconversation, jmsg);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onConversationCreate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onConversationDelete(int64_t conversationId, floo::BMXErrorCode error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jconversationId  ;
  jint jerror  ;
  
  if (!swig_override[18]) {
    floo::BMXChatServiceListener::onConversationDelete(conversationId,error);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconversationId = (jlong) conversationId;
    jerror = (jint) error;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[19], swigjobj, jconversationId, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onConversationDelete ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::onTotalUnreadCountChanged(int unreadCount) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint junreadCount  ;
  
  if (!swig_override[19]) {
    floo::BMXChatServiceListener::onTotalUnreadCountChanged(unreadCount);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    junreadCount = (jint) unreadCount;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[20], swigjobj, junreadCount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXChatServiceListener::onTotalUnreadCountChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXChatServiceListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onStatusChanged", "(Lim/floo/floolib/BMXMessage;Lim/floo/floolib/BMXErrorCode;)V", NULL 
    },
    {
      "onAttachmentUploadProgressChanged", "(Lim/floo/floolib/BMXMessage;I)V", NULL 
    },
    {
      "onRecallStatusChanged", "(Lim/floo/floolib/BMXMessage;Lim/floo/floolib/BMXErrorCode;)V", NULL 
    },
    {
      "onReceive", "(Lim/floo/floolib/BMXMessageList;)V", NULL 
    },
    {
      "onReceiveCommandMessages", "(Lim/floo/floolib/BMXMessageList;)V", NULL 
    },
    {
      "onReceiveSystemMessages", "(Lim/floo/floolib/BMXMessageList;)V", NULL 
    },
    {
      "onReceiveReadAcks", "(Lim/floo/floolib/BMXMessageList;)V", NULL 
    },
    {
      "onReceiveDeliverAcks", "(Lim/floo/floolib/BMXMessageList;)V", NULL 
    },
    {
      "onReceiveRecallMessages", "(Lim/floo/floolib/BMXMessageList;)V", NULL 
    },
    {
      "onReceiveReadCancels", "(Lim/floo/floolib/BMXMessageList;)V", NULL 
    },
    {
      "onReceiveReadAllMessages", "(Lim/floo/floolib/BMXMessageList;)V", NULL 
    },
    {
      "onReceiveDeleteMessages", "(Lim/floo/floolib/BMXMessageList;)V", NULL 
    },
    {
      "onReceivePlayAcks", "(Lim/floo/floolib/BMXMessageList;)V", NULL 
    },
    {
      "onAttachmentStatusChanged", "(Lim/floo/floolib/BMXMessage;Lim/floo/floolib/BMXErrorCode;I)V", NULL 
    },
    {
      "onAttachmentDownloadByUrlStatusChanged", "(JLim/floo/floolib/BMXErrorCode;I)V", NULL 
    },
    {
      "onRetrieveHistoryMessages", "(Lim/floo/floolib/BMXConversation;)V", NULL 
    },
    {
      "onLoadAllConversation", "()V", NULL 
    },
    {
      "onConversationCreate", "(Lim/floo/floolib/BMXConversation;Lim/floo/floolib/BMXMessage;)V", NULL
    },
    {
      "onConversationDelete", "(JLim/floo/floolib/BMXErrorCode;)V", NULL 
    },
    {
      "onTotalUnreadCountChanged", "(I)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("im/floo/floolib/BMXChatServiceListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 20; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_BMXPushServiceListener::SwigDirector_BMXPushServiceListener(JNIEnv *jenv) : floo::BMXPushServiceListener(), Swig::Director(jenv) {
}

SwigDirector_BMXPushServiceListener::~SwigDirector_BMXPushServiceListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_BMXPushServiceListener::onPushStart(std::string const bmxToken) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jbmxToken  ;
  
  if (!swig_override[0]) {
    floo::BMXPushServiceListener::onPushStart(bmxToken);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbmxToken = jenv->NewStringUTF((&bmxToken)->c_str());
    Swig::LocalRefGuard bmxToken_refguard(jenv, jbmxToken); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[21], swigjobj, jbmxToken);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXPushServiceListener::onPushStart ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXPushServiceListener::onPushStop() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    floo::BMXPushServiceListener::onPushStop();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[22], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXPushServiceListener::onPushStop ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXPushServiceListener::onCertRetrieved(std::string const cert) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcert  ;
  
  if (!swig_override[2]) {
    floo::BMXPushServiceListener::onCertRetrieved(cert);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcert = jenv->NewStringUTF((&cert)->c_str());
    Swig::LocalRefGuard cert_refguard(jenv, jcert); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[23], swigjobj, jcert);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXPushServiceListener::onCertRetrieved ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXPushServiceListener::onSetTags(std::string const &operationId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring joperationId = 0 ;
  
  if (!swig_override[3]) {
    floo::BMXPushServiceListener::onSetTags(operationId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    joperationId = jenv->NewStringUTF((&operationId)->c_str());
    Swig::LocalRefGuard operationId_refguard(jenv, joperationId); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[24], swigjobj, joperationId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXPushServiceListener::onSetTags ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXPushServiceListener::onGetTags(std::string const &operationId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring joperationId = 0 ;
  
  if (!swig_override[4]) {
    floo::BMXPushServiceListener::onGetTags(operationId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    joperationId = jenv->NewStringUTF((&operationId)->c_str());
    Swig::LocalRefGuard operationId_refguard(jenv, joperationId); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[25], swigjobj, joperationId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXPushServiceListener::onGetTags ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXPushServiceListener::onDeleteTags(std::string const &operationId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring joperationId = 0 ;
  
  if (!swig_override[5]) {
    floo::BMXPushServiceListener::onDeleteTags(operationId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    joperationId = jenv->NewStringUTF((&operationId)->c_str());
    Swig::LocalRefGuard operationId_refguard(jenv, joperationId); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[26], swigjobj, joperationId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXPushServiceListener::onDeleteTags ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXPushServiceListener::onClearTags(std::string const &operationId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring joperationId = 0 ;
  
  if (!swig_override[6]) {
    floo::BMXPushServiceListener::onClearTags(operationId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    joperationId = jenv->NewStringUTF((&operationId)->c_str());
    Swig::LocalRefGuard operationId_refguard(jenv, joperationId); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[27], swigjobj, joperationId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXPushServiceListener::onClearTags ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXPushServiceListener::onReceivePush(floo::BMXMessageList const &list) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist = 0 ;
  
  if (!swig_override[7]) {
    floo::BMXPushServiceListener::onReceivePush(list);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(floo::BMXMessageList **)&jlist = (floo::BMXMessageList *) &list; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[28], swigjobj, jlist);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXPushServiceListener::onReceivePush ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXPushServiceListener::onStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmsg  ;
  jint jerror  ;
  
  if (!swig_override[8]) {
    floo::BMXPushServiceListener::onStatusChanged(msg,error);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmsg = 0;
    *((floo::BMXMessagePtr **)&jmsg) = new floo::BMXMessagePtr((const floo::BMXMessagePtr &)msg); 
    jerror = (jint) error;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[29], swigjobj, jmsg, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXPushServiceListener::onStatusChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXPushServiceListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onPushStart", "(Ljava/lang/String;)V", NULL 
    },
    {
      "onPushStop", "()V", NULL 
    },
    {
      "onCertRetrieved", "(Ljava/lang/String;)V", NULL 
    },
    {
      "onSetTags", "(Ljava/lang/String;)V", NULL 
    },
    {
      "onGetTags", "(Ljava/lang/String;)V", NULL 
    },
    {
      "onDeleteTags", "(Ljava/lang/String;)V", NULL 
    },
    {
      "onClearTags", "(Ljava/lang/String;)V", NULL 
    },
    {
      "onReceivePush", "(Lim/floo/floolib/BMXMessageList;)V", NULL 
    },
    {
      "onStatusChanged", "(Lim/floo/floolib/BMXMessage;Lim/floo/floolib/BMXErrorCode;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("im/floo/floolib/BMXPushServiceListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 9; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_BMXRosterServiceListener::SwigDirector_BMXRosterServiceListener(JNIEnv *jenv) : floo::BMXRosterServiceListener(), Swig::Director(jenv) {
}

SwigDirector_BMXRosterServiceListener::~SwigDirector_BMXRosterServiceListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_BMXRosterServiceListener::onFriendAdded(int64_t sponsorId, int64_t recipientId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsponsorId  ;
  jlong jrecipientId  ;
  
  if (!swig_override[0]) {
    floo::BMXRosterServiceListener::onFriendAdded(sponsorId,recipientId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsponsorId = (jlong) sponsorId;
    jrecipientId = (jlong) recipientId;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[30], swigjobj, jsponsorId, jrecipientId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXRosterServiceListener::onFriendAdded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXRosterServiceListener::onFriendRemoved(int64_t sponsorId, int64_t recipientId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsponsorId  ;
  jlong jrecipientId  ;
  
  if (!swig_override[1]) {
    floo::BMXRosterServiceListener::onFriendRemoved(sponsorId,recipientId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsponsorId = (jlong) sponsorId;
    jrecipientId = (jlong) recipientId;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[31], swigjobj, jsponsorId, jrecipientId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXRosterServiceListener::onFriendRemoved ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXRosterServiceListener::onApplied(int64_t sponsorId, int64_t recipientId, std::string const &message) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsponsorId  ;
  jlong jrecipientId  ;
  jstring jmessage = 0 ;
  
  if (!swig_override[2]) {
    floo::BMXRosterServiceListener::onApplied(sponsorId,recipientId,message);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsponsorId = (jlong) sponsorId;
    jrecipientId = (jlong) recipientId;
    jmessage = jenv->NewStringUTF((&message)->c_str());
    Swig::LocalRefGuard message_refguard(jenv, jmessage); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[32], swigjobj, jsponsorId, jrecipientId, jmessage);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXRosterServiceListener::onApplied ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXRosterServiceListener::onApplicationAccepted(int64_t sponsorId, int64_t recipientId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsponsorId  ;
  jlong jrecipientId  ;
  
  if (!swig_override[3]) {
    floo::BMXRosterServiceListener::onApplicationAccepted(sponsorId,recipientId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsponsorId = (jlong) sponsorId;
    jrecipientId = (jlong) recipientId;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[33], swigjobj, jsponsorId, jrecipientId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXRosterServiceListener::onApplicationAccepted ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXRosterServiceListener::onApplicationDeclined(int64_t sponsorId, int64_t recipientId, std::string const &reason) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsponsorId  ;
  jlong jrecipientId  ;
  jstring jreason = 0 ;
  
  if (!swig_override[4]) {
    floo::BMXRosterServiceListener::onApplicationDeclined(sponsorId,recipientId,reason);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsponsorId = (jlong) sponsorId;
    jrecipientId = (jlong) recipientId;
    jreason = jenv->NewStringUTF((&reason)->c_str());
    Swig::LocalRefGuard reason_refguard(jenv, jreason); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[34], swigjobj, jsponsorId, jrecipientId, jreason);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXRosterServiceListener::onApplicationDeclined ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXRosterServiceListener::onBlockListAdded(int64_t sponsorId, int64_t recipientId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsponsorId  ;
  jlong jrecipientId  ;
  
  if (!swig_override[5]) {
    floo::BMXRosterServiceListener::onBlockListAdded(sponsorId,recipientId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsponsorId = (jlong) sponsorId;
    jrecipientId = (jlong) recipientId;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[35], swigjobj, jsponsorId, jrecipientId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXRosterServiceListener::onBlockListAdded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXRosterServiceListener::onBlockListRemoved(int64_t sponsorId, int64_t recipientId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsponsorId  ;
  jlong jrecipientId  ;
  
  if (!swig_override[6]) {
    floo::BMXRosterServiceListener::onBlockListRemoved(sponsorId,recipientId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsponsorId = (jlong) sponsorId;
    jrecipientId = (jlong) recipientId;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[36], swigjobj, jsponsorId, jrecipientId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXRosterServiceListener::onBlockListRemoved ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXRosterServiceListener::onRosterInfoUpdate(floo::BMXRosterItemPtr item) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jitem  ;
  
  if (!swig_override[7]) {
    floo::BMXRosterServiceListener::onRosterInfoUpdate(item);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jitem = 0;
    *((floo::BMXRosterItemPtr **)&jitem) = new floo::BMXRosterItemPtr((const floo::BMXRosterItemPtr &)item); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[37], swigjobj, jitem);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXRosterServiceListener::onRosterInfoUpdate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXRosterServiceListener::onRosterListUpdate() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[8]) {
    floo::BMXRosterServiceListener::onRosterListUpdate();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[38], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXRosterServiceListener::onRosterListUpdate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXRosterServiceListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onFriendAdded", "(JJ)V", NULL 
    },
    {
      "onFriendRemoved", "(JJ)V", NULL 
    },
    {
      "onApplied", "(JJLjava/lang/String;)V", NULL 
    },
    {
      "onApplicationAccepted", "(JJ)V", NULL 
    },
    {
      "onApplicationDeclined", "(JJLjava/lang/String;)V", NULL 
    },
    {
      "onBlockListAdded", "(JJ)V", NULL 
    },
    {
      "onBlockListRemoved", "(JJ)V", NULL 
    },
    {
      "onRosterInfoUpdate", "(Lim/floo/floolib/BMXRosterItem;)V", NULL 
    },
    {
      "onRosterListUpdate", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("im/floo/floolib/BMXRosterServiceListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 9; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_BMXUserServiceListener::SwigDirector_BMXUserServiceListener(JNIEnv *jenv) : floo::BMXUserServiceListener(), Swig::Director(jenv) {
}

SwigDirector_BMXUserServiceListener::~SwigDirector_BMXUserServiceListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_BMXUserServiceListener::onConnectStatusChanged(floo::BMXConnectStatus status) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jstatus  ;
  
  if (!swig_override[0]) {
    floo::BMXUserServiceListener::onConnectStatusChanged(status);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jstatus = (jint) status;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[39], swigjobj, jstatus);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXUserServiceListener::onConnectStatusChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXUserServiceListener::onUserSignIn(floo::BMXUserProfilePtr profile) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprofile  ;
  
  if (!swig_override[1]) {
    floo::BMXUserServiceListener::onUserSignIn(profile);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jprofile = 0;
    *((floo::BMXUserProfilePtr **)&jprofile) = new floo::BMXUserProfilePtr((const floo::BMXUserProfilePtr &)profile); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[40], swigjobj, jprofile);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXUserServiceListener::onUserSignIn ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXUserServiceListener::onUserSignOut(floo::BMXErrorCode error, int64_t userId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jerror  ;
  jlong juserId  ;
  
  if (!swig_override[2]) {
    floo::BMXUserServiceListener::onUserSignOut(error,userId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jerror = (jint) error;
    juserId = (jlong) userId;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[41], swigjobj, jerror, juserId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXUserServiceListener::onUserSignOut ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXUserServiceListener::onInfoUpdated(floo::BMXUserProfilePtr profile) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprofile  ;
  
  if (!swig_override[3]) {
    floo::BMXUserServiceListener::onInfoUpdated(profile);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jprofile = 0;
    *((floo::BMXUserProfilePtr **)&jprofile) = new floo::BMXUserProfilePtr((const floo::BMXUserProfilePtr &)profile); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[42], swigjobj, jprofile);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXUserServiceListener::onInfoUpdated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXUserServiceListener::onOtherDeviceSingIn(int deviceSN) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jdeviceSN  ;
  
  if (!swig_override[4]) {
    floo::BMXUserServiceListener::onOtherDeviceSingIn(deviceSN);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdeviceSN = (jint) deviceSN;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[43], swigjobj, jdeviceSN);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXUserServiceListener::onOtherDeviceSingIn ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXUserServiceListener::onOtherDeviceSingOut(int deviceSN) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jdeviceSN  ;
  
  if (!swig_override[5]) {
    floo::BMXUserServiceListener::onOtherDeviceSingOut(deviceSN);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdeviceSN = (jint) deviceSN;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[44], swigjobj, jdeviceSN);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXUserServiceListener::onOtherDeviceSingOut ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXUserServiceListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onConnectStatusChanged", "(Lim/floo/floolib/BMXConnectStatus;)V", NULL 
    },
    {
      "onUserSignIn", "(Lim/floo/floolib/BMXUserProfile;)V", NULL 
    },
    {
      "onUserSignOut", "(Lim/floo/floolib/BMXErrorCode;J)V", NULL 
    },
    {
      "onInfoUpdated", "(Lim/floo/floolib/BMXUserProfile;)V", NULL 
    },
    {
      "onOtherDeviceSingIn", "(I)V", NULL 
    },
    {
      "onOtherDeviceSingOut", "(I)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("im/floo/floolib/BMXUserServiceListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_BMXGroupServiceListener::SwigDirector_BMXGroupServiceListener(JNIEnv *jenv) : floo::BMXGroupServiceListener(), Swig::Director(jenv) {
}

SwigDirector_BMXGroupServiceListener::~SwigDirector_BMXGroupServiceListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_BMXGroupServiceListener::onGroupCreate(floo::BMXGroupPtr group) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  
  if (!swig_override[0]) {
    floo::BMXGroupServiceListener::onGroupCreate(group);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[45], swigjobj, jgroup);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onGroupCreate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onGroupListUpdate(floo::BMXGroupList const &list) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist = 0 ;
  
  if (!swig_override[1]) {
    floo::BMXGroupServiceListener::onGroupListUpdate(list);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(floo::BMXGroupList **)&jlist = (floo::BMXGroupList *) &list; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[46], swigjobj, jlist);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onGroupListUpdate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onGroupJoined(floo::BMXGroupPtr group) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  
  if (!swig_override[2]) {
    floo::BMXGroupServiceListener::onGroupJoined(group);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[47], swigjobj, jgroup);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onGroupJoined ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onGroupLeft(floo::BMXGroupPtr group, std::string const &reason) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jstring jreason = 0 ;
  
  if (!swig_override[3]) {
    floo::BMXGroupServiceListener::onGroupLeft(group,reason);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    jreason = jenv->NewStringUTF((&reason)->c_str());
    Swig::LocalRefGuard reason_refguard(jenv, jreason); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[48], swigjobj, jgroup, jreason);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onGroupLeft ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onInvitated(int64_t groupId, int64_t inviter, std::string const &message) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroupId  ;
  jlong jinviter  ;
  jstring jmessage = 0 ;
  
  if (!swig_override[4]) {
    floo::BMXGroupServiceListener::onInvitated(groupId,inviter,message);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroupId = (jlong) groupId;
    jinviter = (jlong) inviter;
    jmessage = jenv->NewStringUTF((&message)->c_str());
    Swig::LocalRefGuard message_refguard(jenv, jmessage); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[49], swigjobj, jgroupId, jinviter, jmessage);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onInvitated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onInvitationAccepted(floo::BMXGroupPtr group, int64_t inviteeId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jinviteeId  ;
  
  if (!swig_override[5]) {
    floo::BMXGroupServiceListener::onInvitationAccepted(group,inviteeId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    jinviteeId = (jlong) inviteeId;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[50], swigjobj, jgroup, jinviteeId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onInvitationAccepted ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onInvitationDeclined(floo::BMXGroupPtr group, int64_t inviteeId, std::string const &reason) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jinviteeId  ;
  jstring jreason = 0 ;
  
  if (!swig_override[6]) {
    floo::BMXGroupServiceListener::onInvitationDeclined(group,inviteeId,reason);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    jinviteeId = (jlong) inviteeId;
    jreason = jenv->NewStringUTF((&reason)->c_str());
    Swig::LocalRefGuard reason_refguard(jenv, jreason); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[51], swigjobj, jgroup, jinviteeId, jreason);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onInvitationDeclined ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onApplied(floo::BMXGroupPtr group, int64_t applicantId, std::string const &message) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong japplicantId  ;
  jstring jmessage = 0 ;
  
  if (!swig_override[7]) {
    floo::BMXGroupServiceListener::onApplied(group,applicantId,message);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    japplicantId = (jlong) applicantId;
    jmessage = jenv->NewStringUTF((&message)->c_str());
    Swig::LocalRefGuard message_refguard(jenv, jmessage); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[52], swigjobj, jgroup, japplicantId, jmessage);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onApplied ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onApplicationAccepted(floo::BMXGroupPtr group, int64_t approver) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong japprover  ;
  
  if (!swig_override[8]) {
    floo::BMXGroupServiceListener::onApplicationAccepted(group,approver);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    japprover = (jlong) approver;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[53], swigjobj, jgroup, japprover);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onApplicationAccepted ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onApplicationDeclined(floo::BMXGroupPtr group, int64_t approver, std::string const &reason) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong japprover  ;
  jstring jreason = 0 ;
  
  if (!swig_override[9]) {
    floo::BMXGroupServiceListener::onApplicationDeclined(group,approver,reason);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    japprover = (jlong) approver;
    jreason = jenv->NewStringUTF((&reason)->c_str());
    Swig::LocalRefGuard reason_refguard(jenv, jreason); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[54], swigjobj, jgroup, japprover, jreason);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onApplicationDeclined ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onMembersBanned(floo::BMXGroupPtr group, std::vector< int64_t > const &members, int64_t duration) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jmembers = 0 ;
  jlong jduration  ;
  
  if (!swig_override[10]) {
    floo::BMXGroupServiceListener::onMembersBanned(group,members,duration);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    *(std::vector< int64_t > **)&jmembers = (std::vector< int64_t > *) &members; 
    jduration = (jlong) duration;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[55], swigjobj, jgroup, jmembers, jduration);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onMembersBanned ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onMembersUnbanned(floo::BMXGroupPtr group, std::vector< int64_t > const &members) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jmembers = 0 ;
  
  if (!swig_override[11]) {
    floo::BMXGroupServiceListener::onMembersUnbanned(group,members);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    *(std::vector< int64_t > **)&jmembers = (std::vector< int64_t > *) &members; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[56], swigjobj, jgroup, jmembers);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onMembersUnbanned ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onMemberJoined(floo::BMXGroupPtr group, int64_t memberId, int64_t inviter) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jmemberId  ;
  jlong jinviter  ;
  
  if (!swig_override[12]) {
    floo::BMXGroupServiceListener::onMemberJoined(group,memberId,inviter);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    jmemberId = (jlong) memberId;
    jinviter = (jlong) inviter;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[57], swigjobj, jgroup, jmemberId, jinviter);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onMemberJoined ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onMemberLeft(floo::BMXGroupPtr group, int64_t memberId, std::string const &reason) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jmemberId  ;
  jstring jreason = 0 ;
  
  if (!swig_override[13]) {
    floo::BMXGroupServiceListener::onMemberLeft(group,memberId,reason);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    jmemberId = (jlong) memberId;
    jreason = jenv->NewStringUTF((&reason)->c_str());
    Swig::LocalRefGuard reason_refguard(jenv, jreason); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[58], swigjobj, jgroup, jmemberId, jreason);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onMemberLeft ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onAdminsAdded(floo::BMXGroupPtr group, std::vector< int64_t > const &members) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jmembers = 0 ;
  
  if (!swig_override[14]) {
    floo::BMXGroupServiceListener::onAdminsAdded(group,members);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    *(std::vector< int64_t > **)&jmembers = (std::vector< int64_t > *) &members; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[59], swigjobj, jgroup, jmembers);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onAdminsAdded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onAdminsRemoved(floo::BMXGroupPtr group, std::vector< int64_t > const &members, std::string const &reason) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jmembers = 0 ;
  jstring jreason = 0 ;
  
  if (!swig_override[15]) {
    floo::BMXGroupServiceListener::onAdminsRemoved(group,members,reason);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    *(std::vector< int64_t > **)&jmembers = (std::vector< int64_t > *) &members; 
    jreason = jenv->NewStringUTF((&reason)->c_str());
    Swig::LocalRefGuard reason_refguard(jenv, jreason); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[60], swigjobj, jgroup, jmembers, jreason);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onAdminsRemoved ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onOwnerAssigned(floo::BMXGroupPtr group) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  
  if (!swig_override[16]) {
    floo::BMXGroupServiceListener::onOwnerAssigned(group);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[61], swigjobj, jgroup);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onOwnerAssigned ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onGroupInfoUpdate(floo::BMXGroupPtr group, floo::BMXGroup::UpdateInfoType type) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jint jtype  ;
  
  if (!swig_override[17]) {
    floo::BMXGroupServiceListener::onGroupInfoUpdate(group,type);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    jtype = (jint) type;
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[62], swigjobj, jgroup, jtype);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onGroupInfoUpdate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onMemberChangeNickName(floo::BMXGroupPtr group, int64_t memberId, std::string const &nickName) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jmemberId  ;
  jstring jnickName = 0 ;
  
  if (!swig_override[18]) {
    floo::BMXGroupServiceListener::onMemberChangeNickName(group,memberId,nickName);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    jmemberId = (jlong) memberId;
    jnickName = jenv->NewStringUTF((&nickName)->c_str());
    Swig::LocalRefGuard nickName_refguard(jenv, jnickName); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[63], swigjobj, jgroup, jmemberId, jnickName);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onMemberChangeNickName ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onAnnouncementUpdate(floo::BMXGroupPtr group, floo::BMXGroup::AnnouncementPtr announcement) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jannouncement  ;
  
  if (!swig_override[19]) {
    floo::BMXGroupServiceListener::onAnnouncementUpdate(group,announcement);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    jannouncement = 0;
    *((floo::BMXGroup::AnnouncementPtr **)&jannouncement) = new floo::BMXGroup::AnnouncementPtr((const floo::BMXGroup::AnnouncementPtr &)announcement); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[64], swigjobj, jgroup, jannouncement);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onAnnouncementUpdate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onSharedFileUploaded(floo::BMXGroupPtr group, floo::BMXGroup::SharedFilePtr sharedFile) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jsharedFile  ;
  
  if (!swig_override[20]) {
    floo::BMXGroupServiceListener::onSharedFileUploaded(group,sharedFile);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    jsharedFile = 0;
    *((floo::BMXGroup::SharedFilePtr **)&jsharedFile) = new floo::BMXGroup::SharedFilePtr((const floo::BMXGroup::SharedFilePtr &)sharedFile); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[65], swigjobj, jgroup, jsharedFile);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onSharedFileUploaded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onSharedFileDeleted(floo::BMXGroupPtr group, floo::BMXGroup::SharedFilePtr sharedFile) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jsharedFile  ;
  
  if (!swig_override[21]) {
    floo::BMXGroupServiceListener::onSharedFileDeleted(group,sharedFile);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    jsharedFile = 0;
    *((floo::BMXGroup::SharedFilePtr **)&jsharedFile) = new floo::BMXGroup::SharedFilePtr((const floo::BMXGroup::SharedFilePtr &)sharedFile); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[66], swigjobj, jgroup, jsharedFile);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onSharedFileDeleted ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onSharedFileUpdated(floo::BMXGroupPtr group, floo::BMXGroup::SharedFilePtr sharedFile) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jsharedFile  ;
  
  if (!swig_override[22]) {
    floo::BMXGroupServiceListener::onSharedFileUpdated(group,sharedFile);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    jsharedFile = 0;
    *((floo::BMXGroup::SharedFilePtr **)&jsharedFile) = new floo::BMXGroup::SharedFilePtr((const floo::BMXGroup::SharedFilePtr &)sharedFile); 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[67], swigjobj, jgroup, jsharedFile);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onSharedFileUpdated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onBlockListAdded(floo::BMXGroupPtr group, std::vector< int64_t > const &members) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jmembers = 0 ;
  
  if (!swig_override[23]) {
    floo::BMXGroupServiceListener::onBlockListAdded(group,members);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    *(std::vector< int64_t > **)&jmembers = (std::vector< int64_t > *) &members; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[68], swigjobj, jgroup, jmembers);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onBlockListAdded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onBlockListRemoved(floo::BMXGroupPtr group, std::vector< int64_t > const &members) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jgroup  ;
  jlong jmembers = 0 ;
  
  if (!swig_override[24]) {
    floo::BMXGroupServiceListener::onBlockListRemoved(group,members);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroup = 0;
    *((floo::BMXGroupPtr **)&jgroup) = new floo::BMXGroupPtr((const floo::BMXGroupPtr &)group); 
    *(std::vector< int64_t > **)&jmembers = (std::vector< int64_t > *) &members; 
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[69], swigjobj, jgroup, jmembers);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onBlockListRemoved ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::onGroupListUpdate() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[25]) {
    floo::BMXGroupServiceListener::onGroupListUpdate();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_flooJNI, Swig::director_method_ids[70], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in floo::BMXGroupServiceListener::onGroupListUpdate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BMXGroupServiceListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onGroupCreate", "(Lim/floo/floolib/BMXGroup;)V", NULL 
    },
    {
      "onGroupListUpdate", "(Lim/floo/floolib/BMXGroupList;)V", NULL 
    },
    {
      "onGroupJoined", "(Lim/floo/floolib/BMXGroup;)V", NULL 
    },
    {
      "onGroupLeft", "(Lim/floo/floolib/BMXGroup;Ljava/lang/String;)V", NULL 
    },
    {
      "onInvitated", "(JJLjava/lang/String;)V", NULL 
    },
    {
      "onInvitationAccepted", "(Lim/floo/floolib/BMXGroup;J)V", NULL 
    },
    {
      "onInvitationDeclined", "(Lim/floo/floolib/BMXGroup;JLjava/lang/String;)V", NULL 
    },
    {
      "onApplied", "(Lim/floo/floolib/BMXGroup;JLjava/lang/String;)V", NULL 
    },
    {
      "onApplicationAccepted", "(Lim/floo/floolib/BMXGroup;J)V", NULL 
    },
    {
      "onApplicationDeclined", "(Lim/floo/floolib/BMXGroup;JLjava/lang/String;)V", NULL 
    },
    {
      "onMembersBanned", "(Lim/floo/floolib/BMXGroup;Lim/floo/floolib/ListOfLongLong;J)V", NULL 
    },
    {
      "onMembersUnbanned", "(Lim/floo/floolib/BMXGroup;Lim/floo/floolib/ListOfLongLong;)V", NULL 
    },
    {
      "onMemberJoined", "(Lim/floo/floolib/BMXGroup;JJ)V", NULL 
    },
    {
      "onMemberLeft", "(Lim/floo/floolib/BMXGroup;JLjava/lang/String;)V", NULL 
    },
    {
      "onAdminsAdded", "(Lim/floo/floolib/BMXGroup;Lim/floo/floolib/ListOfLongLong;)V", NULL 
    },
    {
      "onAdminsRemoved", "(Lim/floo/floolib/BMXGroup;Lim/floo/floolib/ListOfLongLong;Ljava/lang/String;)V", NULL 
    },
    {
      "onOwnerAssigned", "(Lim/floo/floolib/BMXGroup;)V", NULL 
    },
    {
      "onGroupInfoUpdate", "(Lim/floo/floolib/BMXGroup;Lim/floo/floolib/BMXGroup$UpdateInfoType;)V", NULL 
    },
    {
      "onMemberChangeNickName", "(Lim/floo/floolib/BMXGroup;JLjava/lang/String;)V", NULL 
    },
    {
      "onAnnouncementUpdate", "(Lim/floo/floolib/BMXGroup;Lim/floo/floolib/BMXGroup$Announcement;)V", NULL 
    },
    {
      "onSharedFileUploaded", "(Lim/floo/floolib/BMXGroup;Lim/floo/floolib/BMXGroup$SharedFile;)V", NULL 
    },
    {
      "onSharedFileDeleted", "(Lim/floo/floolib/BMXGroup;Lim/floo/floolib/BMXGroup$SharedFile;)V", NULL 
    },
    {
      "onSharedFileUpdated", "(Lim/floo/floolib/BMXGroup;Lim/floo/floolib/BMXGroup$SharedFile;)V", NULL 
    },
    {
      "onBlockListAdded", "(Lim/floo/floolib/BMXGroup;Lim/floo/floolib/ListOfLongLong;)V", NULL 
    },
    {
      "onBlockListRemoved", "(Lim/floo/floolib/BMXGroup;Lim/floo/floolib/ListOfLongLong;)V", NULL 
    },
    {
      "onGroupListUpdate", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("im/floo/floolib/BMXGroupServiceListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 26; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXMessageList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< floo::BMXMessage > > *)new std::vector< std::shared_ptr< floo::BMXMessage > >();
  *(std::vector< std::shared_ptr< floo::BMXMessage > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXMessageList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > >::size_type arg1 ;
  std::vector< std::shared_ptr< floo::BMXMessage > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< floo::BMXMessage > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXMessage > > *)new std::vector< std::shared_ptr< floo::BMXMessage > >(arg1);
  *(std::vector< std::shared_ptr< floo::BMXMessage > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessageList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > > *arg1 = (std::vector< std::shared_ptr< floo::BMXMessage > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXMessage > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXMessage > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessageList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > > *arg1 = (std::vector< std::shared_ptr< floo::BMXMessage > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXMessage > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXMessage > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXMessage > > *arg1 = (std::vector< std::shared_ptr< floo::BMXMessage > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXMessage > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< floo::BMXMessage > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXMessageList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > > *arg1 = (std::vector< std::shared_ptr< floo::BMXMessage > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXMessage > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< floo::BMXMessage > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< floo::BMXMessage > > *arg1 = (std::vector< std::shared_ptr< floo::BMXMessage > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXMessage > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< floo::BMXMessage > > *arg1 = (std::vector< std::shared_ptr< floo::BMXMessage > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXMessage > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< floo::BMXMessage > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< floo::BMXMessage > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessageList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > > *arg1 = (std::vector< std::shared_ptr< floo::BMXMessage > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXMessage > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXMessage > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< floo::BMXMessage > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_floo_BMXMessage_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< floo::BMXMessage > >::value_type **)&jresult = *result ? new std::shared_ptr< floo::BMXMessage >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< floo::BMXMessage > > *arg1 = (std::vector< std::shared_ptr< floo::BMXMessage > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXMessage > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXMessage > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< floo::BMXMessage > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_floo_BMXMessage_Sg__Sg__set(arg1,arg2,(std::shared_ptr< floo::BMXMessage > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXMessageList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< floo::BMXMessage > > *arg1 = (std::vector< std::shared_ptr< floo::BMXMessage > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXMessage > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1TagList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1TagList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_TagList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_TagList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_TagList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_TagList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_TagList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_TagList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_TagList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_TagList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1TagList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXConversationList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXConversation > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< floo::BMXConversation > > *)new std::vector< std::shared_ptr< floo::BMXConversation > >();
  *(std::vector< std::shared_ptr< floo::BMXConversation > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXConversationList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXConversation > >::size_type arg1 ;
  std::vector< std::shared_ptr< floo::BMXConversation > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< floo::BMXConversation > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXConversation > > *)new std::vector< std::shared_ptr< floo::BMXConversation > >(arg1);
  *(std::vector< std::shared_ptr< floo::BMXConversation > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXConversationList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXConversation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXConversation > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXConversation > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXConversation > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXConversation > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXConversationList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXConversation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXConversation > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXConversation > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXConversation > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXConversation > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXConversationList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXConversation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXConversation > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXConversation > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXConversation > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< floo::BMXConversation > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXConversationList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXConversation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXConversation > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXConversation > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< floo::BMXConversation > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXConversationList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< floo::BMXConversation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXConversation > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXConversation > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXConversationList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< floo::BMXConversation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXConversation > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXConversation > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< floo::BMXConversation > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXConversation > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< floo::BMXConversation > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< floo::BMXConversation > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXConversationList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXConversation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXConversation > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXConversation > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXConversation > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< floo::BMXConversation > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_floo_BMXConversation_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< floo::BMXConversation > >::value_type **)&jresult = *result ? new std::shared_ptr< floo::BMXConversation >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXConversationList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< floo::BMXConversation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXConversation > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXConversation > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< floo::BMXConversation > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXConversation > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< floo::BMXConversation > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_floo_BMXConversation_Sg__Sg__set(arg1,arg2,(std::shared_ptr< floo::BMXConversation > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXConversationList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< floo::BMXConversation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXConversation > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXConversation > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXRosterItemList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< floo::BMXRosterItem > > *)new std::vector< std::shared_ptr< floo::BMXRosterItem > >();
  *(std::vector< std::shared_ptr< floo::BMXRosterItem > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXRosterItemList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > >::size_type arg1 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< floo::BMXRosterItem > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXRosterItem > > *)new std::vector< std::shared_ptr< floo::BMXRosterItem > >(arg1);
  *(std::vector< std::shared_ptr< floo::BMXRosterItem > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItemList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterItem > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterItem > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXRosterItem > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItemList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterItem > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterItem > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXRosterItem > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItemList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXRosterItem > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterItem > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterItem > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< floo::BMXRosterItem > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItemList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterItem > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterItem > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< floo::BMXRosterItem > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItemList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< floo::BMXRosterItem > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterItem > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterItem > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItemList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< floo::BMXRosterItem > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterItem > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterItem > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< floo::BMXRosterItem > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< floo::BMXRosterItem > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItemList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterItem > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterItem > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< floo::BMXRosterItem > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_floo_BMXRosterItem_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< floo::BMXRosterItem > >::value_type **)&jresult = *result ? new std::shared_ptr< floo::BMXRosterItem >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItemList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< floo::BMXRosterItem > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterItem > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterItem > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterItem > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< floo::BMXRosterItem > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_floo_BMXRosterItem_Sg__Sg__set(arg1,arg2,(std::shared_ptr< floo::BMXRosterItem > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXRosterItemList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< floo::BMXRosterItem > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterItem > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterItem > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXDeviceList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXDevice > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< floo::BMXDevice > > *)new std::vector< std::shared_ptr< floo::BMXDevice > >();
  *(std::vector< std::shared_ptr< floo::BMXDevice > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXDeviceList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXDevice > >::size_type arg1 ;
  std::vector< std::shared_ptr< floo::BMXDevice > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< floo::BMXDevice > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXDevice > > *)new std::vector< std::shared_ptr< floo::BMXDevice > >(arg1);
  *(std::vector< std::shared_ptr< floo::BMXDevice > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXDeviceList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXDevice > > *arg1 = (std::vector< std::shared_ptr< floo::BMXDevice > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXDevice > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXDevice > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXDevice > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXDeviceList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXDevice > > *arg1 = (std::vector< std::shared_ptr< floo::BMXDevice > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXDevice > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXDevice > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXDevice > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXDeviceList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXDevice > > *arg1 = (std::vector< std::shared_ptr< floo::BMXDevice > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXDevice > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXDevice > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< floo::BMXDevice > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXDeviceList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXDevice > > *arg1 = (std::vector< std::shared_ptr< floo::BMXDevice > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXDevice > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< floo::BMXDevice > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXDeviceList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< floo::BMXDevice > > *arg1 = (std::vector< std::shared_ptr< floo::BMXDevice > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXDevice > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXDeviceList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< floo::BMXDevice > > *arg1 = (std::vector< std::shared_ptr< floo::BMXDevice > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXDevice > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< floo::BMXDevice > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXDevice > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< floo::BMXDevice > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< floo::BMXDevice > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXDeviceList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXDevice > > *arg1 = (std::vector< std::shared_ptr< floo::BMXDevice > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXDevice > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXDevice > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< floo::BMXDevice > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_floo_BMXDevice_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< floo::BMXDevice > >::value_type **)&jresult = *result ? new std::shared_ptr< floo::BMXDevice >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXDeviceList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< floo::BMXDevice > > *arg1 = (std::vector< std::shared_ptr< floo::BMXDevice > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXDevice > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< floo::BMXDevice > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXDevice > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< floo::BMXDevice > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_floo_BMXDevice_Sg__Sg__set(arg1,arg2,(std::shared_ptr< floo::BMXDevice > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXDeviceList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< floo::BMXDevice > > *arg1 = (std::vector< std::shared_ptr< floo::BMXDevice > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXDevice > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< floo::BMXGroup > > *)new std::vector< std::shared_ptr< floo::BMXGroup > >();
  *(std::vector< std::shared_ptr< floo::BMXGroup > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup > >::size_type arg1 ;
  std::vector< std::shared_ptr< floo::BMXGroup > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< floo::BMXGroup > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXGroup > > *)new std::vector< std::shared_ptr< floo::BMXGroup > >(arg1);
  *(std::vector< std::shared_ptr< floo::BMXGroup > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXGroup > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXGroup > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXGroup > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< floo::BMXGroup > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXGroupList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< floo::BMXGroup > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< floo::BMXGroup > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< floo::BMXGroup > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< floo::BMXGroup > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< floo::BMXGroup > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXGroup > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< floo::BMXGroup > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< floo::BMXGroup > >::value_type **)&jresult = *result ? new std::shared_ptr< floo::BMXGroup >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< floo::BMXGroup > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXGroup > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< floo::BMXGroup > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Sg__Sg__set(arg1,arg2,(std::shared_ptr< floo::BMXGroup > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroupList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< floo::BMXGroup > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupMemberList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< floo::BMXGroup::Member > > *)new std::vector< std::shared_ptr< floo::BMXGroup::Member > >();
  *(std::vector< std::shared_ptr< floo::BMXGroup::Member > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupMemberList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > >::size_type arg1 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Member > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXGroup::Member > > *)new std::vector< std::shared_ptr< floo::BMXGroup::Member > >(arg1);
  *(std::vector< std::shared_ptr< floo::BMXGroup::Member > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupMemberList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Member > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Member > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXGroup::Member > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupMemberList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Member > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Member > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXGroup::Member > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupMemberList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXGroup::Member > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Member > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Member > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< floo::BMXGroup::Member > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXGroupMemberList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Member > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Member > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< floo::BMXGroup::Member > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupMemberList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< floo::BMXGroup::Member > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Member > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Member > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupMemberList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXGroup::Member > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Member > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Member > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< floo::BMXGroup::Member > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< floo::BMXGroup::Member > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupMemberList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Member > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Member > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< floo::BMXGroup::Member > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Member_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< floo::BMXGroup::Member > >::value_type **)&jresult = *result ? new std::shared_ptr< floo::BMXGroup::Member >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupMemberList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< std::shared_ptr< floo::BMXGroup::Member > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Member > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Member > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< floo::BMXGroup::Member > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Member_Sg__Sg__set(arg1,arg2,(std::shared_ptr< floo::BMXGroup::Member > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroupMemberList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< floo::BMXGroup::Member > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Member > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Member > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupBannedMemberList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *)new std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >();
  *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupBannedMemberList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::size_type arg1 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *)new std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >(arg1);
  *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupBannedMemberList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupBannedMemberList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupBannedMemberList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXGroupBannedMemberList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupBannedMemberList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupBannedMemberList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupBannedMemberList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_BannedMember_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::value_type **)&jresult = *result ? new std::shared_ptr< floo::BMXGroup::BannedMember >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupBannedMemberList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_BannedMember_Sg__Sg__set(arg1,arg2,(std::shared_ptr< floo::BMXGroup::BannedMember > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroupBannedMemberList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupSharedFileList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *)new std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >();
  *(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupSharedFileList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::size_type arg1 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *)new std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >(arg1);
  *(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupSharedFileList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupSharedFileList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupSharedFileList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXGroupSharedFileList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupSharedFileList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupSharedFileList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupSharedFileList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_SharedFile_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::value_type **)&jresult = *result ? new std::shared_ptr< floo::BMXGroup::SharedFile >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupSharedFileList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_SharedFile_Sg__Sg__set(arg1,arg2,(std::shared_ptr< floo::BMXGroup::SharedFile > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroupSharedFileList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::SharedFile > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupAnnouncementList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *)new std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >();
  *(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupAnnouncementList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::size_type arg1 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *)new std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >(arg1);
  *(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupAnnouncementList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupAnnouncementList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupAnnouncementList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXGroupAnnouncementList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupAnnouncementList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupAnnouncementList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupAnnouncementList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Announcement_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::value_type **)&jresult = *result ? new std::shared_ptr< floo::BMXGroup::Announcement >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupAnnouncementList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Announcement_Sg__Sg__set(arg1,arg2,(std::shared_ptr< floo::BMXGroup::Announcement > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroupAnnouncementList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Announcement > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXRosterServiceApplicationList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *)new std::vector< std::shared_ptr< floo::BMXRosterService::Application > >();
  *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXRosterServiceApplicationList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::size_type arg1 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *)new std::vector< std::shared_ptr< floo::BMXRosterService::Application > >(arg1);
  *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceApplicationList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXRosterService::Application > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceApplicationList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXRosterService::Application > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceApplicationList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceApplicationList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< floo::BMXRosterService::Application > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceApplicationList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceApplicationList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceApplicationList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_floo_BMXRosterService_Application_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::value_type **)&jresult = *result ? new std::shared_ptr< floo::BMXRosterService::Application >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceApplicationList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_floo_BMXRosterService_Application_Sg__Sg__set(arg1,arg2,(std::shared_ptr< floo::BMXRosterService::Application > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXRosterServiceApplicationList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupApplicationList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< floo::BMXGroup::Application > > *)new std::vector< std::shared_ptr< floo::BMXGroup::Application > >();
  *(std::vector< std::shared_ptr< floo::BMXGroup::Application > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupApplicationList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > >::size_type arg1 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Application > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXGroup::Application > > *)new std::vector< std::shared_ptr< floo::BMXGroup::Application > >(arg1);
  *(std::vector< std::shared_ptr< floo::BMXGroup::Application > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupApplicationList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Application > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Application > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXGroup::Application > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupApplicationList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Application > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Application > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXGroup::Application > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupApplicationList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXGroup::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Application > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Application > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< floo::BMXGroup::Application > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXGroupApplicationList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Application > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Application > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< floo::BMXGroup::Application > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupApplicationList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< floo::BMXGroup::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Application > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Application > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupApplicationList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXGroup::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Application > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Application > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< floo::BMXGroup::Application > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< floo::BMXGroup::Application > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupApplicationList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Application > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Application > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< floo::BMXGroup::Application > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Application_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< floo::BMXGroup::Application > >::value_type **)&jresult = *result ? new std::shared_ptr< floo::BMXGroup::Application >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupApplicationList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< std::shared_ptr< floo::BMXGroup::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Application > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Application > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< floo::BMXGroup::Application > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Application_Sg__Sg__set(arg1,arg2,(std::shared_ptr< floo::BMXGroup::Application > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroupApplicationList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< floo::BMXGroup::Application > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Application > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Application > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupInvitationList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *)new std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >();
  *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupInvitationList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::size_type arg1 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *)new std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >(arg1);
  *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupInvitationList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupInvitationList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupInvitationList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXGroupInvitationList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupInvitationList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupInvitationList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *) 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupInvitationList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Invitation_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::value_type **)&jresult = *result ? new std::shared_ptr< floo::BMXGroup::Invitation >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupInvitationList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_floo_BMXGroup_Invitation_Sg__Sg__set(arg1,arg2,(std::shared_ptr< floo::BMXGroup::Invitation > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroupInvitationList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *arg1 = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1ListOfLongLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< long long > *)new std::vector< long long >();
  *(std::vector< long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1ListOfLongLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< long long >::size_type arg1 ;
  std::vector< long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< long long >::size_type)jarg1; 
  result = (std::vector< long long > *)new std::vector< long long >(arg1);
  *(std::vector< long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_ListOfLongLong_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  result = ((std::vector< long long > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_ListOfLongLong_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  result = ((std::vector< long long > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_ListOfLongLong_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = (std::vector< long long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_ListOfLongLong_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  result = (bool)((std::vector< long long > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_ListOfLongLong_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_ListOfLongLong_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  std::vector< long long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  temp2 = (std::vector< long long >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< long long >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_ListOfLongLong_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< long long >::value_type *) &std_vector_Sl_long_SS_long_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_ListOfLongLong_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  std::vector< long long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< long long >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_long_SS_long_Sg__set(arg1,arg2,(long long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1ListOfLongLong(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< long long > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_getErrorMessage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  floo::BMXErrorCode arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (floo::BMXErrorCode)jarg1; 
  result = floo::getErrorMessage(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXError(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  floo::BMXErrorCode arg1 ;
  floo::BMXError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (floo::BMXErrorCode)jarg1; 
  result = (floo::BMXError *)new floo::BMXError(arg1);
  *(floo::BMXError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXError *arg1 = (floo::BMXError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXError **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXError_1errorCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXError *arg1 = (floo::BMXError *) 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXError **)&jarg1; 
  result = (floo::BMXErrorCode)(arg1)->errorCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXError_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXError *arg1 = (floo::BMXError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXError **)&jarg1; 
  result = (arg1)->description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXDevice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXDevice *arg1 = (floo::BMXDevice *) 0 ;
  std::shared_ptr< floo::BMXDevice > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXDevice > **)&jarg1;
  arg1 = (floo::BMXDevice *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXDevice_1deviceSN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXDevice *arg1 = (floo::BMXDevice *) 0 ;
  std::shared_ptr< floo::BMXDevice > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXDevice > **)&jarg1;
  arg1 = (floo::BMXDevice *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->deviceSN();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXDevice_1userId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXDevice *arg1 = (floo::BMXDevice *) 0 ;
  std::shared_ptr< floo::BMXDevice > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXDevice > **)&jarg1;
  arg1 = (floo::BMXDevice *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->userId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXDevice_1platform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXDevice *arg1 = (floo::BMXDevice *) 0 ;
  std::shared_ptr< floo::BMXDevice > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXDevice > **)&jarg1;
  arg1 = (floo::BMXDevice *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->platform();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXDevice_1userAgent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXDevice *arg1 = (floo::BMXDevice *) 0 ;
  std::shared_ptr< floo::BMXDevice > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXDevice > **)&jarg1;
  arg1 = (floo::BMXDevice *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->userAgent();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXDevice_1setUserAgent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXDevice *arg1 = (floo::BMXDevice *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXDevice > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXDevice > **)&jarg1;
  arg1 = (floo::BMXDevice *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUserAgent((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXDevice_1isCurrentDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXDevice *arg1 = (floo::BMXDevice *) 0 ;
  std::shared_ptr< floo::BMXDevice > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXDevice > **)&jarg1;
  arg1 = (floo::BMXDevice *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isCurrentDevice();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXBaseObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXBaseObject *arg1 = (floo::BMXBaseObject *) 0 ;
  std::shared_ptr< floo::BMXBaseObject > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXBaseObject > **)&jarg1;
  arg1 = (floo::BMXBaseObject *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXBaseObject(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXBaseObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXBaseObject *)new floo::BMXBaseObject();
  
  *(std::shared_ptr<  floo::BMXBaseObject > **)&jresult = result ? new std::shared_ptr<  floo::BMXBaseObject >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXMessageAttachment_1Size_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  floo::BMXMessageAttachment::Size *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (floo::BMXMessageAttachment::Size *)new floo::BMXMessageAttachment::Size(arg1,arg2);
  *(floo::BMXMessageAttachment::Size **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXMessageAttachment_1Size_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  floo::BMXMessageAttachment::Size *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (floo::BMXMessageAttachment::Size *)new floo::BMXMessageAttachment::Size(arg1);
  *(floo::BMXMessageAttachment::Size **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXMessageAttachment_1Size_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXMessageAttachment::Size *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXMessageAttachment::Size *)new floo::BMXMessageAttachment::Size();
  *(floo::BMXMessageAttachment::Size **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageAttachment_1Size_1mWidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  floo::BMXMessageAttachment::Size *arg1 = (floo::BMXMessageAttachment::Size *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXMessageAttachment::Size **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mWidth = arg2;
}


SWIGEXPORT jdouble JNICALL Java_im_floo_floolib_flooJNI_BMXMessageAttachment_1Size_1mWidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  floo::BMXMessageAttachment::Size *arg1 = (floo::BMXMessageAttachment::Size *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXMessageAttachment::Size **)&jarg1; 
  result = (double) ((arg1)->mWidth);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageAttachment_1Size_1mHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  floo::BMXMessageAttachment::Size *arg1 = (floo::BMXMessageAttachment::Size *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXMessageAttachment::Size **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mHeight = arg2;
}


SWIGEXPORT jdouble JNICALL Java_im_floo_floolib_flooJNI_BMXMessageAttachment_1Size_1mHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  floo::BMXMessageAttachment::Size *arg1 = (floo::BMXMessageAttachment::Size *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXMessageAttachment::Size **)&jarg1; 
  result = (double) ((arg1)->mHeight);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXMessageAttachment_1Size(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXMessageAttachment::Size *arg1 = (floo::BMXMessageAttachment::Size *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXMessageAttachment::Size **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXMessageAttachment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXMessageAttachment *arg1 = (floo::BMXMessageAttachment *) 0 ;
  std::shared_ptr< floo::BMXMessageAttachment > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageAttachment > **)&jarg1;
  arg1 = (floo::BMXMessageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXMessageAttachment_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXMessageAttachment *arg1 = (floo::BMXMessageAttachment *) 0 ;
  std::shared_ptr< floo::BMXMessageAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachment::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXMessageAttachment > **)&jarg1;
  arg1 = (floo::BMXMessageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessageAttachment::Type)((floo::BMXMessageAttachment const *)arg1)->type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessageAttachment_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessageAttachment *arg1 = (floo::BMXMessageAttachment *) 0 ;
  std::shared_ptr< floo::BMXMessageAttachment const > *smartarg1 = 0 ;
  std::shared_ptr< floo::BMXMessageAttachment > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXMessageAttachment > **)&jarg1;
  arg1 = (floo::BMXMessageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((floo::BMXMessageAttachment const *)arg1)->clone();
  *(std::shared_ptr< floo::BMXMessageAttachment > **)&jresult = result ? new std::shared_ptr< floo::BMXMessageAttachment >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kMentionAll_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kMentionAll;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kMentionList_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kMentionList;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kMentionedMessage_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kMentionedMessage;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kPushMessage_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kPushMessage;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kSenderNickname_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kSenderNickname;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kGroupAck_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kGroupAck;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kGroupMemberList_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kGroupMemberList;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kIOSConfig_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kIOSConfig;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kAndroidConfig_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kAndroidConfig;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kPushShowBeginTime_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kPushShowBeginTime;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kPushShowEndTime_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kPushShowEndTime;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kPushTitle_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kPushTitle;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kSilence_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kSilence;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kBadge_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kBadge;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_kUsername_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &floo::kUsername;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXMessageConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1setMentionAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMentionAll(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1getMentionAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->getMentionAll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1setMentionList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< int64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return ;
  } 
  (arg1)->setMentionList((std::vector< int64_t > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1getMentionList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  std::vector< int64_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getMentionList();
  *(std::vector< int64_t > **)&jresult = new std::vector< int64_t >((const std::vector< int64_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1setMentionedMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMentionedMessage((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1getMentionedMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getMentionedMessage();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1setPushMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setPushMessage((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1getPushMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getPushMessage();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1setSenderNickname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSenderNickname((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1getSenderNickname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getSenderNickname();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1setGroupMemberList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< int64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return ;
  } 
  (arg1)->setGroupMemberList((std::vector< int64_t > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1getGroupMemberList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  std::vector< int64_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getGroupMemberList();
  *(std::vector< int64_t > **)&jresult = new std::vector< int64_t >((const std::vector< int64_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1addGroupMember(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  (arg1)->addGroupMember(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1removeGroupMember(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  (arg1)->removeGroupMember(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1clearGroupMemberList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clearGroupMemberList();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1setIOSConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setIOSConfig((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1getIOSConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getIOSConfig();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1setAndroidConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setAndroidConfig((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1getAndroidConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getAndroidConfig();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1setPushShowBeginTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  int arg2 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->setPushShowBeginTime(arg2);
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1getPushShowBeginTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getPushShowBeginTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1setPushShowEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  int arg2 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->setPushShowEndTime(arg2);
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1getPushShowEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getPushShowEndTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1setPushTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setPushTitle((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1getPushTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getPushTitle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1isSilence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isSilence();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1getBadgeCountType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  floo::BMXMessageConfig::BadgeCountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessageConfig::BadgeCountType)(arg1)->getBadgeCountType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1getBadgeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  int arg2 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getBadgeCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1getUsername(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getUsername();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1serialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXMessageConfig *arg1 = (floo::BMXMessageConfig *) 0 ;
  std::shared_ptr< floo::BMXMessageConfig const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXMessageConfig > **)&jarg1;
  arg1 = (floo::BMXMessageConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((floo::BMXMessageConfig const *)arg1)->serialize();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1createMessageConfig(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  floo::BMXMessageConfigPtr result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = floo::BMXMessageConfig::createMessageConfig(arg1);
  *(floo::BMXMessageConfigPtr **)&jresult = result ? new floo::BMXMessageConfigPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_encodeBMXMessageConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXMessageConfigPtr arg1 ;
  floo::BMXMessageConfigPtr *argp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(floo::BMXMessageConfigPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = floo::encodeBMXMessageConfig(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_decodeBMXMessageConfig(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  floo::BMXMessageConfigPtr result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = floo::decodeBMXMessageConfig((std::string const &)*arg1);
  *(floo::BMXMessageConfigPtr **)&jresult = result ? new floo::BMXMessageConfigPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1msgId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->msgId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1clientMsgId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->clientMsgId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1fromId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->fromId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1toId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->toId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  floo::BMXMessage::MessageType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessage::MessageType)(arg1)->type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1conversationId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->conversationId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1deliveryStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  floo::BMXMessage::DeliveryStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessage::DeliveryStatus)(arg1)->deliveryStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setDeliveryStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  floo::BMXMessage::DeliveryStatus arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXMessage::DeliveryStatus)jarg2; 
  (arg1)->setDeliveryStatus(arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1serverTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->serverTimestamp();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setServerTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  (arg1)->setServerTimestamp(arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1clientTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->clientTimestamp();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setClientTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  (arg1)->setClientTimestamp(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1isPlayed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isPlayed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setIsPlayed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsPlayed(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1isPlayAcked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isPlayAcked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setIsPlayAcked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsPlayAcked(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1isReceiveMsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isReceiveMsg();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setIsReceiveMsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsReceiveMsg(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1isRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isRead();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setIsRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsRead(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1isReadAcked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isReadAcked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setIsReadAcked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsReadAcked(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1isDeliveryAcked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isDeliveryAcked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setIsDeliveryAcked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsDeliveryAcked(arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1content(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->content();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setContent((std::string const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1contentType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  floo::BMXMessage::ContentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessage::ContentType)(arg1)->contentType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1attachment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  floo::BMXMessageAttachmentPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->attachment();
  *(floo::BMXMessageAttachmentPtr **)&jresult = result ? new floo::BMXMessageAttachmentPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  floo::BMXMessageConfigPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->config();
  *(floo::BMXMessageConfigPtr **)&jresult = result ? new floo::BMXMessageConfigPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  floo::BMXMessageConfigPtr arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  floo::BMXMessageConfigPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(floo::BMXMessageConfigPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->setConfig(arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1extension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  floo::JSON *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::JSON *) &(arg1)->extension();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  floo::JSON *arg2 = 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  floo::JSON arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setExtension((floo::JSON const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1deliveryQos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  floo::BMXMessage::DeliveryQos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessage::DeliveryQos)(arg1)->deliveryQos();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setDeliveryQos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  floo::BMXMessage::DeliveryQos arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXMessage::DeliveryQos)jarg2; 
  (arg1)->setDeliveryQos(arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1senderName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->senderName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setSenderName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSenderName((std::string const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1groupAckCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->groupAckCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setGroupAckCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  int arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->setGroupAckCount(arg2);
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1groupAckUnreadCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->groupAckUnreadCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setGroupAckUnreadCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  int arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->setGroupAckUnreadCount(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1groupAckReadAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->groupAckReadAll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1groupPlayAckCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->groupPlayAckCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setGroupPlayAckCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  int arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->setGroupPlayAckCount(arg2);
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1groupPlayAckUnreadCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->groupPlayAckUnreadCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setGroupPlayAckUnreadCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  int arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->setGroupPlayAckUnreadCount(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1groupPlayAckReadAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->groupPlayAckReadAll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  int arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->setPriority(arg2);
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1priority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->priority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1setPushMessageMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPushMessageMode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1isPushMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXMessage *arg1 = (floo::BMXMessage *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = (floo::BMXMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isPushMessage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1createMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int64_t arg2 ;
  floo::BMXMessage::MessageType arg3 ;
  int64_t arg4 ;
  std::string *arg5 = 0 ;
  floo::BMXMessagePtr result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (floo::BMXMessage::MessageType)jarg3; 
  arg4 = (int64_t)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = floo::BMXMessage::createMessage(arg1,arg2,arg3,arg4,(std::string const &)*arg5);
  *(floo::BMXMessagePtr **)&jresult = result ? new floo::BMXMessagePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1createMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int64_t arg2 ;
  floo::BMXMessage::MessageType arg3 ;
  int64_t arg4 ;
  floo::BMXMessageAttachmentPtr arg5 ;
  floo::BMXMessageAttachmentPtr *argp5 ;
  floo::BMXMessagePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (floo::BMXMessage::MessageType)jarg3; 
  arg4 = (int64_t)jarg4; 
  argp5 = *(floo::BMXMessageAttachmentPtr **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  result = floo::BMXMessage::createMessage(arg1,arg2,arg3,arg4,arg5);
  *(floo::BMXMessagePtr **)&jresult = result ? new floo::BMXMessagePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1createCommandMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int64_t arg2 ;
  floo::BMXMessage::MessageType arg3 ;
  int64_t arg4 ;
  std::string *arg5 = 0 ;
  floo::BMXMessagePtr result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (floo::BMXMessage::MessageType)jarg3; 
  arg4 = (int64_t)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = floo::BMXMessage::createCommandMessage(arg1,arg2,arg3,arg4,(std::string const &)*arg5);
  *(floo::BMXMessagePtr **)&jresult = result ? new floo::BMXMessagePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1createMessage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jlong jarg5, jstring jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t arg3 ;
  floo::BMXMessage::MessageType arg4 ;
  int64_t arg5 ;
  std::string *arg6 = 0 ;
  int64_t arg7 ;
  floo::BMXMessagePtr result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (floo::BMXMessage::MessageType)jarg4; 
  arg5 = (int64_t)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  arg7 = (int64_t)jarg7; 
  result = floo::BMXMessage::createMessage(arg1,arg2,arg3,arg4,arg5,(std::string const &)*arg6,arg7);
  *(floo::BMXMessagePtr **)&jresult = result ? new floo::BMXMessagePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1createMessage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t arg3 ;
  floo::BMXMessage::MessageType arg4 ;
  int64_t arg5 ;
  floo::BMXMessageAttachmentPtr arg6 ;
  int64_t arg7 ;
  floo::BMXMessageAttachmentPtr *argp6 ;
  floo::BMXMessagePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (floo::BMXMessage::MessageType)jarg4; 
  arg5 = (int64_t)jarg5; 
  argp6 = *(floo::BMXMessageAttachmentPtr **)&jarg6; 
  if (argp6) arg6 = *argp6; 
  arg7 = (int64_t)jarg7; 
  result = floo::BMXMessage::createMessage(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(floo::BMXMessagePtr **)&jresult = result ? new floo::BMXMessagePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1createCommandMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jlong jarg5, jstring jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t arg3 ;
  floo::BMXMessage::MessageType arg4 ;
  int64_t arg5 ;
  std::string *arg6 = 0 ;
  int64_t arg7 ;
  floo::BMXMessagePtr result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (floo::BMXMessage::MessageType)jarg4; 
  arg5 = (int64_t)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  arg7 = (int64_t)jarg7; 
  result = floo::BMXMessage::createCommandMessage(arg1,arg2,arg3,arg4,arg5,(std::string const &)*arg6,arg7);
  *(floo::BMXMessagePtr **)&jresult = result ? new floo::BMXMessagePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1createForwardMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  floo::BMXMessagePtr arg1 ;
  int64_t arg2 ;
  int64_t arg3 ;
  floo::BMXMessage::MessageType arg4 ;
  int64_t arg5 ;
  floo::BMXMessagePtr *argp1 ;
  floo::BMXMessagePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(floo::BMXMessagePtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (floo::BMXMessage::MessageType)jarg4; 
  arg5 = (int64_t)jarg5; 
  result = floo::BMXMessage::createForwardMessage(arg1,arg2,arg3,arg4,arg5);
  *(floo::BMXMessagePtr **)&jresult = result ? new floo::BMXMessagePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXConversation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1conversationId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->conversationId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXConversation::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXConversation::Type)(arg1)->type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1lastMsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXMessagePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->lastMsg();
  *(floo::BMXMessagePtr **)&jresult = result ? new floo::BMXMessagePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1unreadNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int32_t)(arg1)->unreadNumber();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1messageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int32_t)(arg1)->messageCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1isMuteNotification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isMuteNotification();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1extension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::JSON *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::JSON *) &(arg1)->extension();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1setExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setExtension((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1editMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->editMessage();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1setEditMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setEditMessage((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1setMessagePlayedStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  floo::BMXMessagePtr arg2 ;
  bool arg3 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXMessagePtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setMessagePlayedStatus(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1setMessageReadStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  floo::BMXMessagePtr arg2 ;
  bool arg3 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXMessagePtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setMessageReadStatus(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1setAllMessagesRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXErrorCode)(arg1)->setAllMessagesRead();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1updateMessageExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  floo::BMXMessagePtr arg2 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXMessagePtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (floo::BMXErrorCode)(arg1)->updateMessageExtension(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1insertMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  floo::BMXMessagePtr arg2 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXMessagePtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (floo::BMXErrorCode)(arg1)->insertMessage(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1loadMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXMessagePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  result = (arg1)->loadMessage(arg2);
  *(floo::BMXMessagePtr **)&jresult = result ? new floo::BMXMessagePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1removeAllMessages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXErrorCode)(arg1)->removeAllMessages();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1loadMessages_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  int64_t arg2 ;
  size_t arg3 ;
  floo::BMXMessageList *arg4 = 0 ;
  floo::BMXConversation::Direction arg5 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(floo::BMXMessageList **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList & reference is null");
    return 0;
  } 
  arg5 = (floo::BMXConversation::Direction)jarg5; 
  result = (floo::BMXErrorCode)(arg1)->loadMessages(arg2,arg3,*arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1loadMessages_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  int64_t arg2 ;
  size_t arg3 ;
  floo::BMXMessageList *arg4 = 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(floo::BMXMessageList **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->loadMessages(arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1searchMessagesByKeyWords_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  size_t arg4 ;
  floo::BMXMessageList *arg5 = 0 ;
  floo::BMXConversation::Direction arg6 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(floo::BMXMessageList **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList & reference is null");
    return 0;
  } 
  arg6 = (floo::BMXConversation::Direction)jarg6; 
  result = (floo::BMXErrorCode)(arg1)->searchMessagesByKeyWords((std::string const &)*arg2,arg3,arg4,*arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1searchMessagesByKeyWords_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  size_t arg4 ;
  floo::BMXMessageList *arg5 = 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(floo::BMXMessageList **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->searchMessagesByKeyWords((std::string const &)*arg2,arg3,arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1searchMessages_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  size_t arg4 ;
  floo::BMXMessageList *arg5 = 0 ;
  floo::BMXConversation::Direction arg6 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(floo::BMXMessageList **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList & reference is null");
    return 0;
  } 
  arg6 = (floo::BMXConversation::Direction)jarg6; 
  result = (floo::BMXErrorCode)(arg1)->searchMessages((std::string const &)*arg2,arg3,arg4,*arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1searchMessages_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  size_t arg4 ;
  floo::BMXMessageList *arg5 = 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(floo::BMXMessageList **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->searchMessages((std::string const &)*arg2,arg3,arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1searchMessagesByType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  floo::BMXMessage::ContentType arg2 ;
  int64_t arg3 ;
  size_t arg4 ;
  floo::BMXMessageList *arg5 = 0 ;
  floo::BMXConversation::Direction arg6 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXMessage::ContentType)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(floo::BMXMessageList **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList & reference is null");
    return 0;
  } 
  arg6 = (floo::BMXConversation::Direction)jarg6; 
  result = (floo::BMXErrorCode)(arg1)->searchMessagesByType(arg2,arg3,arg4,*arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1searchMessagesByType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  floo::BMXMessage::ContentType arg2 ;
  int64_t arg3 ;
  size_t arg4 ;
  floo::BMXMessageList *arg5 = 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXMessage::ContentType)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(floo::BMXMessageList **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->searchMessagesByType(arg2,arg3,arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1searchMessages_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  floo::BMXMessage::ContentType arg2 ;
  int64_t arg3 ;
  size_t arg4 ;
  floo::BMXMessageList *arg5 = 0 ;
  floo::BMXConversation::Direction arg6 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXMessage::ContentType)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(floo::BMXMessageList **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList & reference is null");
    return 0;
  } 
  arg6 = (floo::BMXConversation::Direction)jarg6; 
  result = (floo::BMXErrorCode)(arg1)->searchMessages(arg2,arg3,arg4,*arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1searchMessages_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  floo::BMXMessage::ContentType arg2 ;
  int64_t arg3 ;
  size_t arg4 ;
  floo::BMXMessageList *arg5 = 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXMessage::ContentType)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(floo::BMXMessageList **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->searchMessages(arg2,arg3,arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1refreshConversation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXConversation *arg1 = (floo::BMXConversation *) 0 ;
  std::shared_ptr< floo::BMXConversation > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXConversation > **)&jarg1;
  arg1 = (floo::BMXConversation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXErrorCode)(arg1)->refreshConversation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXSDKConfig_1HostConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXSDKConfig::HostConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXSDKConfig::HostConfig *)new floo::BMXSDKConfig::HostConfig();
  *(floo::BMXSDKConfig::HostConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXSDKConfig_1HostConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  floo::BMXSDKConfig::HostConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXSDKConfig::HostConfig *)new floo::BMXSDKConfig::HostConfig((std::string const &)*arg1,arg2,(std::string const &)*arg3);
  *(floo::BMXSDKConfig::HostConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1HostConfig_1imHost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXSDKConfig::HostConfig *arg1 = (floo::BMXSDKConfig::HostConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXSDKConfig::HostConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->imHost = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1HostConfig_1imHost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXSDKConfig::HostConfig *arg1 = (floo::BMXSDKConfig::HostConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXSDKConfig::HostConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->imHost);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1HostConfig_1imPort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXSDKConfig::HostConfig *arg1 = (floo::BMXSDKConfig::HostConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXSDKConfig::HostConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->imPort = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1HostConfig_1imPort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXSDKConfig::HostConfig *arg1 = (floo::BMXSDKConfig::HostConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXSDKConfig::HostConfig **)&jarg1; 
  result = (int) ((arg1)->imPort);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1HostConfig_1restHost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXSDKConfig::HostConfig *arg1 = (floo::BMXSDKConfig::HostConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXSDKConfig::HostConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->restHost = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1HostConfig_1restHost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXSDKConfig::HostConfig *arg1 = (floo::BMXSDKConfig::HostConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXSDKConfig::HostConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->restHost);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXSDKConfig_1HostConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXSDKConfig::HostConfig *arg1 = (floo::BMXSDKConfig::HostConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXSDKConfig::HostConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXSDKConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jboolean jarg8) {
  jlong jresult = 0 ;
  floo::BMXClientType arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  bool arg8 ;
  floo::BMXSDKConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (floo::BMXClientType)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return 0;
  std::string arg7_str(arg7_pstr);
  arg7 = &arg7_str;
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  arg8 = jarg8 ? true : false; 
  result = (floo::BMXSDKConfig *)new floo::BMXSDKConfig(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8);
  
  *(std::shared_ptr<  floo::BMXSDKConfig > **)&jresult = result ? new std::shared_ptr<  floo::BMXSDKConfig >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXSDKConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  floo::BMXClientType arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  floo::BMXSDKConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (floo::BMXClientType)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return 0;
  std::string arg7_str(arg7_pstr);
  arg7 = &arg7_str;
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  result = (floo::BMXSDKConfig *)new floo::BMXSDKConfig(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
  
  *(std::shared_ptr<  floo::BMXSDKConfig > **)&jresult = result ? new std::shared_ptr<  floo::BMXSDKConfig >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXSDKConfig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9, jboolean jarg10) {
  jlong jresult = 0 ;
  floo::BMXClientType arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  std::string *arg9 = 0 ;
  bool arg10 ;
  floo::BMXSDKConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (floo::BMXClientType)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return 0;
  std::string arg7_str(arg7_pstr);
  arg7 = &arg7_str;
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg8_pstr = (const char *)jenv->GetStringUTFChars(jarg8, 0); 
  if (!arg8_pstr) return 0;
  std::string arg8_str(arg8_pstr);
  arg8 = &arg8_str;
  jenv->ReleaseStringUTFChars(jarg8, arg8_pstr); 
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0); 
  if (!arg9_pstr) return 0;
  std::string arg9_str(arg9_pstr);
  arg9 = &arg9_str;
  jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  arg10 = jarg10 ? true : false; 
  result = (floo::BMXSDKConfig *)new floo::BMXSDKConfig(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8,(std::string const &)*arg9,arg10);
  
  *(std::shared_ptr<  floo::BMXSDKConfig > **)&jresult = result ? new std::shared_ptr<  floo::BMXSDKConfig >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXSDKConfig_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9) {
  jlong jresult = 0 ;
  floo::BMXClientType arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  std::string *arg9 = 0 ;
  floo::BMXSDKConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (floo::BMXClientType)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return 0;
  std::string arg7_str(arg7_pstr);
  arg7 = &arg7_str;
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg8_pstr = (const char *)jenv->GetStringUTFChars(jarg8, 0); 
  if (!arg8_pstr) return 0;
  std::string arg8_str(arg8_pstr);
  arg8 = &arg8_str;
  jenv->ReleaseStringUTFChars(jarg8, arg8_pstr); 
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0); 
  if (!arg9_pstr) return 0;
  std::string arg9_str(arg9_pstr);
  arg9 = &arg9_str;
  jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  result = (floo::BMXSDKConfig *)new floo::BMXSDKConfig(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8,(std::string const &)*arg9);
  
  *(std::shared_ptr<  floo::BMXSDKConfig > **)&jresult = result ? new std::shared_ptr<  floo::BMXSDKConfig >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXSDKConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getDataDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->getDataDir();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getCacheDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->getCacheDir();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getClientType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  floo::BMXClientType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXClientType)(arg1)->getClientType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getVsn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->getVsn();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getSDKVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->getSDKVersion();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getPushCertName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->getPushCertName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setPushCertName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setPushCertName((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getUserAgent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->getUserAgent();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1carryUsernameInMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->carryUsernameInMessage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setCarryUsernameInMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setCarryUsernameInMessage(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1enableDeliveryAck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->enableDeliveryAck();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setEnableDeliveryAck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnableDeliveryAck(arg2);
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  floo::BMXLogLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXLogLevel)(arg1)->getLogLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  floo::BMXLogLevel arg2 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXLogLevel)jarg2; 
  (arg1)->setLogLevel(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getConsoleOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->getConsoleOutput();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setConsoleOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setConsoleOutput(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setHostConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  floo::BMXSDKConfig::HostConfig *arg2 = 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(floo::BMXSDKConfig::HostConfig **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXSDKConfig::HostConfig const & reference is null");
    return ;
  } 
  (arg1)->setHostConfig((floo::BMXSDKConfig::HostConfig const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getHostConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  floo::BMXSDKConfig::HostConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXSDKConfig::HostConfig *) &(arg1)->getHostConfig();
  *(floo::BMXSDKConfig::HostConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getLoadAllServerConversations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->getLoadAllServerConversations();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setLoadAllServerConversations_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLoadAllServerConversations(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setLoadAllServerConversations_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->setLoadAllServerConversations();
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getDeviceUuid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->getDeviceUuid();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setDeviceUuid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDeviceUuid((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getDBCryptoKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->getDBCryptoKey();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setDBCryptoKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDBCryptoKey((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getVerifyCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->getVerifyCertificate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setVerifyCertificate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVerifyCertificate(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setVerifyCertificate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->setVerifyCertificate();
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getEnableDNS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->getEnableDNS();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setEnableDNS_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnableDNS(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setEnableDNS_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->setEnableDNS();
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getUserDNSAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getUserDNSAddress();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setUserDNSAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUserDNSAddress((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getAppID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getAppID();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setAppID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setAppID((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getAppSecret(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getAppSecret();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setAppSecret(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setAppSecret((std::string const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getPushProviderType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  floo::BMXPushProviderType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXPushProviderType)(arg1)->getPushProviderType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setPushProviderType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  floo::BMXPushProviderType arg2 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXPushProviderType)jarg2; 
  (arg1)->setPushProviderType(arg2);
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getPushEnvironmentType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  floo::BMXPushEnvironmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXPushEnvironmentType)(arg1)->getPushEnvironmentType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setEnvironmentType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  floo::BMXPushEnvironmentType arg2 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXPushEnvironmentType)jarg2; 
  (arg1)->setEnvironmentType(arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1getDebugLogReceiverId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->getDebugLogReceiverId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXSDKConfig_1setDebugLogReceiverId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXSDKConfig *arg1 = (floo::BMXSDKConfig *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXSDKConfig > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXSDKConfig > **)&jarg1;
  arg1 = (floo::BMXSDKConfig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  (arg1)->setDebugLogReceiverId(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXNetworkListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXNetworkListener *arg1 = (floo::BMXNetworkListener *) 0 ;
  std::shared_ptr< floo::BMXNetworkListener > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXNetworkListener > **)&jarg1;
  arg1 = (floo::BMXNetworkListener *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXNetworkListener_1onNetworkChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  floo::BMXNetworkListener *arg1 = (floo::BMXNetworkListener *) 0 ;
  floo::BMXNetworkType arg2 ;
  bool arg3 ;
  std::shared_ptr< floo::BMXNetworkListener > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXNetworkListener > **)&jarg1;
  arg1 = (floo::BMXNetworkListener *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXNetworkType)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->onNetworkChanged(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXNetworkListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXNetworkListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXNetworkListener *)new SwigDirector_BMXNetworkListener(jenv);
  
  *(std::shared_ptr<  floo::BMXNetworkListener > **)&jresult = result ? new std::shared_ptr<  floo::BMXNetworkListener >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXNetworkListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< floo::BMXNetworkListener > *obj = *((std::shared_ptr< floo::BMXNetworkListener > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_BMXNetworkListener *director = dynamic_cast<SwigDirector_BMXNetworkListener *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXNetworkListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  floo::BMXNetworkListener *obj = *((floo::BMXNetworkListener **)&objarg);
  SwigDirector_BMXNetworkListener *director = dynamic_cast<SwigDirector_BMXNetworkListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXChatService(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1sendMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->sendMessage(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1resendMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->resendMessage(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1recallMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->recallMessage(arg2);
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1forwardMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  floo::BMXConversationPtr arg3 ;
  floo::BMXMessagePtr *arg4 = 0 ;
  floo::BMXConversationPtr *argp3 ;
  floo::BMXMessagePtr tempnull4 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return 0;
  } 
  argp3 = *(floo::BMXConversationPtr **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = jarg4 ? *(floo::BMXMessagePtr **)&jarg4 : &tempnull4; 
  result = (floo::BMXErrorCode)(arg1)->forwardMessage((floo::BMXMessageList const &)*arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1forwardMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->forwardMessage(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1ackMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->ackMessage(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1ackMessageDelivered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->ackMessageDelivered(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1ackPlayMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->ackPlayMessage(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1readCancel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->readCancel(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1readAllMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->readAllMessage(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1removeMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  bool arg3 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->removeMessage(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1removeMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->removeMessage(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1downloadThumbnail_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXChatService::ThumbnailStrategy arg3 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXChatService::ThumbnailStrategy)jarg3; 
  (arg1)->downloadThumbnail(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1downloadThumbnail_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->downloadThumbnail(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1downloadAttachment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->downloadAttachment(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1downloadAttachmentByUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jstring jarg4) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  int64_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->downloadAttachmentByUrl(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1cancelUploadAttachment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->cancelUploadAttachment(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1cancelDownloadAttachment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->cancelDownloadAttachment(arg2);
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1transferingNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatService **)&jarg1;
  result = (int)(arg1)->transferingNum();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1insertMessages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->insertMessages((floo::BMXMessageList const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1getMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  int64_t arg2 ;
  floo::BMXMessagePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (arg1)->getMessage(arg2);
  *(floo::BMXMessagePtr **)&jresult = result ? new floo::BMXMessagePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1deleteConversation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  int64_t arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->deleteConversation(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1deleteConversation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  (arg1)->deleteConversation(arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1openConversation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  int64_t arg2 ;
  floo::BMXConversation::Type arg3 ;
  bool arg4 ;
  floo::BMXConversationPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (floo::BMXConversation::Type)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->openConversation(arg2,arg3,arg4);
  *(floo::BMXConversationPtr **)&jresult = result ? new floo::BMXConversationPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1openConversation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  int64_t arg2 ;
  floo::BMXConversation::Type arg3 ;
  floo::BMXConversationPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (floo::BMXConversation::Type)jarg3; 
  result = (arg1)->openConversation(arg2,arg3);
  *(floo::BMXConversationPtr **)&jresult = result ? new floo::BMXConversationPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1attachmentDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  result = (arg1)->attachmentDir();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1attachmentDirForConversation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  int64_t arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (arg1)->attachmentDirForConversation(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1getAllConversations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXConversationList result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  result = (arg1)->getAllConversations();
  *(floo::BMXConversationList **)&jresult = new floo::BMXConversationList((const floo::BMXConversationList &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1getAllConversationsUnreadCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  result = (int)(arg1)->getAllConversationsUnreadCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1retrieveHistoryMessages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXConversationPtr arg2 ;
  int64_t arg3 ;
  size_t arg4 ;
  floo::BMXMessageList *arg5 = 0 ;
  floo::BMXConversationPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXConversationPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(floo::BMXMessageList **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->retrieveHistoryMessages(arg2,arg3,arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1searchMessagesByKeyWords_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  jint jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  size_t arg4 ;
  std::vector< floo::BMXMessageList > *arg5 = 0 ;
  floo::BMXConversation::Direction arg6 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(std::vector< floo::BMXMessageList > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< floo::BMXMessageList > & reference is null");
    return 0;
  } 
  arg6 = (floo::BMXConversation::Direction)jarg6; 
  result = (floo::BMXErrorCode)(arg1)->searchMessagesByKeyWords((std::string const &)*arg2,arg3,arg4,*arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1searchMessagesByKeyWords_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  size_t arg4 ;
  std::vector< floo::BMXMessageList > *arg5 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(std::vector< floo::BMXMessageList > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< floo::BMXMessageList > & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->searchMessagesByKeyWords((std::string const &)*arg2,arg3,arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1searchMessages_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  jint jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  size_t arg4 ;
  std::vector< floo::BMXMessageList > *arg5 = 0 ;
  floo::BMXConversation::Direction arg6 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(std::vector< floo::BMXMessageList > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< floo::BMXMessageList > & reference is null");
    return 0;
  } 
  arg6 = (floo::BMXConversation::Direction)jarg6; 
  result = (floo::BMXErrorCode)(arg1)->searchMessages((std::string const &)*arg2,arg3,arg4,*arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1searchMessages_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  size_t arg4 ;
  std::vector< floo::BMXMessageList > *arg5 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(std::vector< floo::BMXMessageList > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< floo::BMXMessageList > & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->searchMessages((std::string const &)*arg2,arg3,arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1getGroupAckMessageUserIdList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXMessagePtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->getGroupAckMessageUserIdList(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1getGroupAckMessageUnreadUserIdList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXMessagePtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->getGroupAckMessageUnreadUserIdList(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1getGroupPlayAckMessageUserIdList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXMessagePtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->getGroupPlayAckMessageUserIdList(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1getGroupUnPlayAckMessageUserIdList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXMessagePtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXMessagePtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->getGroupUnPlayAckMessageUserIdList(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1addChatListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXChatServiceListener *arg2 = (floo::BMXChatServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  arg2 = *(floo::BMXChatServiceListener **)&jarg2; 
  (arg1)->addChatListener(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatService_1removeChatListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatService *arg1 = (floo::BMXChatService *) 0 ;
  floo::BMXChatServiceListener *arg2 = (floo::BMXChatServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatService **)&jarg1; 
  arg2 = *(floo::BMXChatServiceListener **)&jarg2; 
  (arg1)->removeChatListener(arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXChatServiceListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXChatServiceListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXChatServiceListener *)new SwigDirector_BMXChatServiceListener(jenv);
  *(floo::BMXChatServiceListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onStatusChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXErrorCode arg3 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXErrorCode)jarg3; 
  (arg1)->onStatusChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onStatusChangedSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXErrorCode arg3 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXErrorCode)jarg3; 
  (arg1)->floo::BMXChatServiceListener::onStatusChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onAttachmentUploadProgressChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessagePtr arg2 ;
  int arg3 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int)jarg3; 
  (arg1)->onAttachmentUploadProgressChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onAttachmentUploadProgressChangedSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessagePtr arg2 ;
  int arg3 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int)jarg3; 
  (arg1)->floo::BMXChatServiceListener::onAttachmentUploadProgressChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onRecallStatusChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXErrorCode arg3 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXErrorCode)jarg3; 
  (arg1)->onRecallStatusChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onRecallStatusChangedSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXErrorCode arg3 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXErrorCode)jarg3; 
  (arg1)->floo::BMXChatServiceListener::onRecallStatusChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->onReceive((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXChatServiceListener::onReceive((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveCommandMessages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->onReceiveCommandMessages((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveCommandMessagesSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXChatServiceListener::onReceiveCommandMessages((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveSystemMessages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->onReceiveSystemMessages((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveSystemMessagesSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXChatServiceListener::onReceiveSystemMessages((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveReadAcks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->onReceiveReadAcks((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveReadAcksSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXChatServiceListener::onReceiveReadAcks((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveDeliverAcks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->onReceiveDeliverAcks((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveDeliverAcksSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXChatServiceListener::onReceiveDeliverAcks((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveRecallMessages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->onReceiveRecallMessages((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveRecallMessagesSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXChatServiceListener::onReceiveRecallMessages((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveReadCancels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->onReceiveReadCancels((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveReadCancelsSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXChatServiceListener::onReceiveReadCancels((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveReadAllMessages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->onReceiveReadAllMessages((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveReadAllMessagesSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXChatServiceListener::onReceiveReadAllMessages((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveDeleteMessages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->onReceiveDeleteMessages((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceiveDeleteMessagesSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXChatServiceListener::onReceiveDeleteMessages((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceivePlayAcks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->onReceivePlayAcks((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onReceivePlayAcksSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXChatServiceListener::onReceivePlayAcks((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onAttachmentStatusChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXErrorCode arg3 ;
  int arg4 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXErrorCode)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->onAttachmentStatusChanged(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onAttachmentStatusChangedSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXErrorCode arg3 ;
  int arg4 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXErrorCode)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->floo::BMXChatServiceListener::onAttachmentStatusChanged(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onAttachmentDownloadByUrlStatusChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  int64_t arg2 ;
  floo::BMXErrorCode arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (floo::BMXErrorCode)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->onAttachmentDownloadByUrlStatusChanged(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onAttachmentDownloadByUrlStatusChangedSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  int64_t arg2 ;
  floo::BMXErrorCode arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (floo::BMXErrorCode)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->floo::BMXChatServiceListener::onAttachmentDownloadByUrlStatusChanged(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onRetrieveHistoryMessages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXConversationPtr arg2 ;
  floo::BMXConversationPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  argp2 = *(floo::BMXConversationPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->onRetrieveHistoryMessages(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onRetrieveHistoryMessagesSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXConversationPtr arg2 ;
  floo::BMXConversationPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  argp2 = *(floo::BMXConversationPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->floo::BMXChatServiceListener::onRetrieveHistoryMessages(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onLoadAllConversation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  (arg1)->onLoadAllConversation();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onLoadAllConversationSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  (arg1)->floo::BMXChatServiceListener::onLoadAllConversation();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onConversationCreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXConversationPtr arg2 ;
  floo::BMXMessagePtr arg3 ;
  floo::BMXConversationPtr *argp2 ;
  floo::BMXMessagePtr *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  argp2 = *(floo::BMXConversationPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(floo::BMXMessagePtr **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->onConversationCreate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onConversationCreateSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXConversationPtr arg2 ;
  floo::BMXMessagePtr arg3 ;
  floo::BMXConversationPtr *argp2 ;
  floo::BMXMessagePtr *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  argp2 = *(floo::BMXConversationPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(floo::BMXMessagePtr **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->floo::BMXChatServiceListener::onConversationCreate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onConversationDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  int64_t arg2 ;
  floo::BMXErrorCode arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (floo::BMXErrorCode)jarg3; 
  (arg1)->onConversationDelete(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onConversationDeleteSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  int64_t arg2 ;
  floo::BMXErrorCode arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (floo::BMXErrorCode)jarg3; 
  (arg1)->floo::BMXChatServiceListener::onConversationDelete(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onTotalUnreadCountChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->onTotalUnreadCountChanged(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1onTotalUnreadCountChangedSwigExplicitBMXChatServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->floo::BMXChatServiceListener::onTotalUnreadCountChanged(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1registerChatService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXChatServiceListener *arg1 = (floo::BMXChatServiceListener *) 0 ;
  floo::BMXChatService *arg2 = (floo::BMXChatService *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXChatServiceListener **)&jarg1; 
  arg2 = *(floo::BMXChatService **)&jarg2; 
  (arg1)->registerChatService(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  floo::BMXChatServiceListener *obj = *((floo::BMXChatServiceListener **)&objarg);
  (void)jcls;
  SwigDirector_BMXChatServiceListener *director = dynamic_cast<SwigDirector_BMXChatServiceListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXChatServiceListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  floo::BMXChatServiceListener *obj = *((floo::BMXChatServiceListener **)&objarg);
  SwigDirector_BMXChatServiceListener *director = dynamic_cast<SwigDirector_BMXChatServiceListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXPushService(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1start_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->start((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1start_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  std::string *arg2 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXErrorCode)(arg1)->start((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1start_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  result = (floo::BMXErrorCode)(arg1)->start();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  result = (floo::BMXErrorCode)(arg1)->stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  result = (floo::BMXErrorCode)(arg1)->resume();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1unbindAlias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  std::string *arg2 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXErrorCode)(arg1)->unbindAlias((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1getToken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  result = (std::string *) &(arg1)->getToken();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1getCert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  result = (std::string *) &(arg1)->getCert();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  floo::BMXPushService::PushSdkStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  result = (floo::BMXPushService::PushSdkStatus)(arg1)->status();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1bindDeviceToken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  std::string *arg2 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXErrorCode)(arg1)->bindDeviceToken((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1bindVoipToken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  std::string *arg2 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXErrorCode)(arg1)->bindVoipToken((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1getPushProfile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  floo::BMXPushUserProfilePtr *arg2 = 0 ;
  bool arg3 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg3 = jarg3 ? true : false;

  floo::BMXPushUserProfilePtr bmxPushUserProfilePtr = floo::BMXPushUserProfilePtr();
  result = (floo::BMXErrorCode)(arg1)->getPushProfile(bmxPushUserProfilePtr,arg3);

  GET_INT_VECTOR(jarg2);
  jlong jPtr = 0;
  *(floo::BMXPushUserProfilePtr **)&jPtr = bmxPushUserProfilePtr ? new floo::BMXPushUserProfilePtr(bmxPushUserProfilePtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1setTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setTags((std::vector< std::string > const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1getTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->getTags(*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1deleteTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->deleteTags((std::vector< std::string > const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1clearTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  std::string *arg2 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXErrorCode)(arg1)->clearTags((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1setBadge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  int arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (floo::BMXErrorCode)(arg1)->setBadge(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1setPushMode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  bool arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setPushMode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1setPushMode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  result = (floo::BMXErrorCode)(arg1)->setPushMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1setPushTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  int arg2 ;
  int arg3 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (floo::BMXErrorCode)(arg1)->setPushTime(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1setSilenceTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  int arg2 ;
  int arg3 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (floo::BMXErrorCode)(arg1)->setSilenceTime(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1setRunBackgroundMode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  bool arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setRunBackgroundMode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1setRunBackgroundMode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  result = (floo::BMXErrorCode)(arg1)->setRunBackgroundMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1setGeoFenceMode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  bool arg2 ;
  bool arg3 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setGeoFenceMode(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1setGeoFenceMode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  bool arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setGeoFenceMode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1setGeoFenceMode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  result = (floo::BMXErrorCode)(arg1)->setGeoFenceMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1clearNotification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  (arg1)->clearNotification(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1clearAllNotifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  (arg1)->clearAllNotifications();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1sendMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->sendMessage((std::string const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1loadLocalPushMessages_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  int64_t arg2 ;
  size_t arg3 ;
  floo::BMXMessageList *arg4 = 0 ;
  floo::BMXPushService::PushDirection arg5 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(floo::BMXMessageList **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList & reference is null");
    return 0;
  } 
  arg5 = (floo::BMXPushService::PushDirection)jarg5; 
  result = (floo::BMXErrorCode)(arg1)->loadLocalPushMessages(arg2,arg3,*arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1loadLocalPushMessages_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  int64_t arg2 ;
  size_t arg3 ;
  floo::BMXMessageList *arg4 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(floo::BMXMessageList **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->loadLocalPushMessages(arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1addPushListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  floo::BMXPushServiceListener *arg2 = (floo::BMXPushServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = *(floo::BMXPushServiceListener **)&jarg2; 
  (arg1)->addPushListener(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushService_1removePushListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXPushService *arg1 = (floo::BMXPushService *) 0 ;
  floo::BMXPushServiceListener *arg2 = (floo::BMXPushServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXPushService **)&jarg1; 
  arg2 = *(floo::BMXPushServiceListener **)&jarg2; 
  (arg1)->removePushListener(arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXPushServiceListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXPushServiceListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXPushServiceListener *)new SwigDirector_BMXPushServiceListener(jenv);
  *(floo::BMXPushServiceListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXPushServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onPushStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->onPushStart(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onPushStartSwigExplicitBMXPushServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->floo::BMXPushServiceListener::onPushStart(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onPushStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  (arg1)->onPushStop();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onPushStopSwigExplicitBMXPushServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  (arg1)->floo::BMXPushServiceListener::onPushStop();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onCertRetrieved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->onCertRetrieved(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onCertRetrievedSwigExplicitBMXPushServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->floo::BMXPushServiceListener::onCertRetrieved(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onSetTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->onSetTags((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onSetTagsSwigExplicitBMXPushServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->floo::BMXPushServiceListener::onSetTags((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onGetTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->onGetTags((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onGetTagsSwigExplicitBMXPushServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->floo::BMXPushServiceListener::onGetTags((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onDeleteTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->onDeleteTags((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onDeleteTagsSwigExplicitBMXPushServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->floo::BMXPushServiceListener::onDeleteTags((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onClearTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->onClearTags((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onClearTagsSwigExplicitBMXPushServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->floo::BMXPushServiceListener::onClearTags((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onReceivePush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->onReceivePush((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onReceivePushSwigExplicitBMXPushServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  floo::BMXMessageList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  arg2 = *(floo::BMXMessageList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageList const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXPushServiceListener::onReceivePush((floo::BMXMessageList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onStatusChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXErrorCode arg3 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXErrorCode)jarg3; 
  (arg1)->onStatusChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1onStatusChangedSwigExplicitBMXPushServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  floo::BMXMessagePtr arg2 ;
  floo::BMXErrorCode arg3 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXErrorCode)jarg3; 
  (arg1)->floo::BMXPushServiceListener::onStatusChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1registerPushService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXPushServiceListener *arg1 = (floo::BMXPushServiceListener *) 0 ;
  floo::BMXPushService *arg2 = (floo::BMXPushService *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXPushServiceListener **)&jarg1; 
  arg2 = *(floo::BMXPushService **)&jarg2; 
  (arg1)->registerPushService(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  floo::BMXPushServiceListener *obj = *((floo::BMXPushServiceListener **)&objarg);
  (void)jcls;
  SwigDirector_BMXPushServiceListener *director = dynamic_cast<SwigDirector_BMXPushServiceListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushServiceListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  floo::BMXPushServiceListener *obj = *((floo::BMXPushServiceListener **)&objarg);
  SwigDirector_BMXPushServiceListener *director = dynamic_cast<SwigDirector_BMXPushServiceListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXSDKConfigPtr arg1 ;
  floo::BMXSDKConfigPtr *argp1 ;
  floo::BMXClientPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(floo::BMXSDKConfigPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = floo::BMXClient::create(arg1);
  *(floo::BMXClientPtr **)&jresult = result ? new floo::BMXClientPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1getSDKConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXSDKConfigPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getSDKConfig();
  *(floo::BMXSDKConfigPtr **)&jresult = result ? new floo::BMXSDKConfigPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1getUserService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXUserService *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXUserService *) &(arg1)->getUserService();
  *(floo::BMXUserService **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1getChatService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXChatService *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXChatService *) &(arg1)->getChatService();
  *(floo::BMXChatService **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1getGroupService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXGroupService *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXGroupService *) &(arg1)->getGroupService();
  *(floo::BMXGroupService **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1getRosterService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXRosterService *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXRosterService *) &(arg1)->getRosterService();
  *(floo::BMXRosterService **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1getPushService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXPushService *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXPushService *) &(arg1)->getPushService();
  *(floo::BMXPushService **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1signUpNewUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
jint jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  floo::BMXUserProfilePtr *arg4 = 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXErrorCode result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;

  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0);
  if(!jarg2) {
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
  return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);
  if(!jarg3) {
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
  return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);
  floo::BMXUserProfilePtr bmxUserProfilePtr = floo::BMXUserProfilePtr();
  result = (floo::BMXErrorCode)(arg1)->signUpNewUser((std::string const &)*arg2,(std::string const &)*arg3,bmxUserProfilePtr);

  GET_INT_VECTOR(jarg4);
  jlong jPtr = 0;
  *(floo::BMXUserProfilePtr **)&jPtr = bmxUserProfilePtr ? new floo::BMXUserProfilePtr(bmxUserProfilePtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result;
  return jresult;
  }


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1signInByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->signInByName((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1signInById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  int64_t arg2 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->signInById(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1fastSignInByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->fastSignInByName((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1fastSignInById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  int64_t arg2 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->fastSignInById(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1signOut_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  int64_t arg2 ;
  bool arg3 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->signOut(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1signOut_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  result = (floo::BMXErrorCode)(arg1)->signOut(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1signOut_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXErrorCode)(arg1)->signOut();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1connectStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXConnectStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXConnectStatus)(arg1)->connectStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1signInStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXSignInStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXSignInStatus)(arg1)->signInStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1reconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->reconnect();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1onNetworkChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  floo::BMXNetworkType arg2 ;
  bool arg3 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXNetworkType)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->onNetworkChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->disconnect();
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1changeAppId_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->changeAppId((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1changeAppId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXErrorCode)(arg1)->changeAppId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1initializeServerConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->initializeServerConfig(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1sendMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXClient *arg1 = (floo::BMXClient *) 0 ;
  floo::BMXMessagePtr arg2 ;
  std::shared_ptr< floo::BMXClient > *smartarg1 = 0 ;
  floo::BMXMessagePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXClient > **)&jarg1;
  arg1 = (floo::BMXClient *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(floo::BMXMessagePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->sendMessage(arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXFileAttachment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  floo::BMXFileAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXFileAttachment *)new floo::BMXFileAttachment((std::string const &)*arg1,(std::string const &)*arg2);
  
  *(std::shared_ptr<  floo::BMXFileAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXFileAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXFileAttachment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  floo::BMXFileAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (floo::BMXFileAttachment *)new floo::BMXFileAttachment((std::string const &)*arg1);
  
  *(std::shared_ptr<  floo::BMXFileAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXFileAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXFileAttachment_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  floo::BMXFileAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64_t)jarg3; 
  result = (floo::BMXFileAttachment *)new floo::BMXFileAttachment((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  
  *(std::shared_ptr<  floo::BMXFileAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXFileAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXFileAttachment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXFileAttachment *arg1 = (floo::BMXFileAttachment *) 0 ;
  std::shared_ptr< floo::BMXFileAttachment > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXFileAttachment > **)&jarg1;
  arg1 = (floo::BMXFileAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXFileAttachment_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXFileAttachment *arg1 = (floo::BMXFileAttachment *) 0 ;
  std::shared_ptr< floo::BMXFileAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachment::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXFileAttachment > **)&jarg1;
  arg1 = (floo::BMXFileAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessageAttachment::Type)((floo::BMXFileAttachment const *)arg1)->type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXFileAttachment_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXFileAttachment *arg1 = (floo::BMXFileAttachment *) 0 ;
  std::shared_ptr< floo::BMXFileAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachmentPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXFileAttachment > **)&jarg1;
  arg1 = (floo::BMXFileAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((floo::BMXFileAttachment const *)arg1)->clone();
  *(floo::BMXMessageAttachmentPtr **)&jresult = result ? new floo::BMXMessageAttachmentPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXFileAttachment_1path(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXFileAttachment *arg1 = (floo::BMXFileAttachment *) 0 ;
  std::shared_ptr< floo::BMXFileAttachment const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXFileAttachment > **)&jarg1;
  arg1 = (floo::BMXFileAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((floo::BMXFileAttachment const *)arg1)->path();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXFileAttachment_1displayName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXFileAttachment *arg1 = (floo::BMXFileAttachment *) 0 ;
  std::shared_ptr< floo::BMXFileAttachment const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXFileAttachment > **)&jarg1;
  arg1 = (floo::BMXFileAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((floo::BMXFileAttachment const *)arg1)->displayName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXFileAttachment_1ratelUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXFileAttachment *arg1 = (floo::BMXFileAttachment *) 0 ;
  std::shared_ptr< floo::BMXFileAttachment const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXFileAttachment > **)&jarg1;
  arg1 = (floo::BMXFileAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((floo::BMXFileAttachment const *)arg1)->ratelUrl();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXFileAttachment_1url(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXFileAttachment *arg1 = (floo::BMXFileAttachment *) 0 ;
  std::shared_ptr< floo::BMXFileAttachment const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXFileAttachment > **)&jarg1;
  arg1 = (floo::BMXFileAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((floo::BMXFileAttachment const *)arg1)->url();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXFileAttachment_1fileLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXFileAttachment *arg1 = (floo::BMXFileAttachment *) 0 ;
  std::shared_ptr< floo::BMXFileAttachment const > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXFileAttachment > **)&jarg1;
  arg1 = (floo::BMXFileAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)((floo::BMXFileAttachment const *)arg1)->fileLength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXFileAttachment_1downloadStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXFileAttachment *arg1 = (floo::BMXFileAttachment *) 0 ;
  std::shared_ptr< floo::BMXFileAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachment::DownloadStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXFileAttachment > **)&jarg1;
  arg1 = (floo::BMXFileAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessageAttachment::DownloadStatus)((floo::BMXFileAttachment const *)arg1)->downloadStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXFileAttachment_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessageAttachment *arg1 = (floo::BMXMessageAttachment *) 0 ;
  std::shared_ptr< floo::BMXMessageAttachment > *smartarg1 = 0 ;
  floo::BMXFileAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageAttachment > **)&jarg1;
  arg1 = (floo::BMXMessageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  {
    result = (floo::BMXFileAttachment *)floo_BMXFileAttachment_dynamic_cast(arg1);
    if (!result) {
      jclass excep = jenv->FindClass("java/lang/ClassCastException");
      if (excep) {
        jenv->ThrowNew(excep, "dynamic_cast exception");
      }
    }
  }
  
  *(std::shared_ptr<  floo::BMXFileAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXFileAttachment >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroup_1Member(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  floo::BMXGroup::Member *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64_t)jarg3; 
  result = (floo::BMXGroup::Member *)new floo::BMXGroup::Member(arg1,(std::string const &)*arg2,arg3);
  
  *(std::shared_ptr<  floo::BMXGroup::Member > **)&jresult = result ? new std::shared_ptr<  floo::BMXGroup::Member >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroup_1Member(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXGroup::Member *arg1 = (floo::BMXGroup::Member *) 0 ;
  std::shared_ptr< floo::BMXGroup::Member > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Member > **)&jarg1;
  arg1 = (floo::BMXGroup::Member *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Member_1mUid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::Member *arg1 = (floo::BMXGroup::Member *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::Member > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Member > **)&jarg1;
  arg1 = (floo::BMXGroup::Member *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mUid = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Member_1mUid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::Member *arg1 = (floo::BMXGroup::Member *) 0 ;
  std::shared_ptr< floo::BMXGroup::Member > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Member > **)&jarg1;
  arg1 = (floo::BMXGroup::Member *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mUid);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Member_1mGroupNickname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXGroup::Member *arg1 = (floo::BMXGroup::Member *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXGroup::Member > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Member > **)&jarg1;
  arg1 = (floo::BMXGroup::Member *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mGroupNickname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Member_1mGroupNickname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup::Member *arg1 = (floo::BMXGroup::Member *) 0 ;
  std::shared_ptr< floo::BMXGroup::Member > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Member > **)&jarg1;
  arg1 = (floo::BMXGroup::Member *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->mGroupNickname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Member_1mCreateTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::Member *arg1 = (floo::BMXGroup::Member *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::Member > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Member > **)&jarg1;
  arg1 = (floo::BMXGroup::Member *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mCreateTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Member_1mCreateTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::Member *arg1 = (floo::BMXGroup::Member *) 0 ;
  std::shared_ptr< floo::BMXGroup::Member > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Member > **)&jarg1;
  arg1 = (floo::BMXGroup::Member *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mCreateTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroup_1BannedMember(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXGroup::BannedMember *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXGroup::BannedMember *)new floo::BMXGroup::BannedMember();
  
  *(std::shared_ptr<  floo::BMXGroup::BannedMember > **)&jresult = result ? new std::shared_ptr<  floo::BMXGroup::BannedMember >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroup_1BannedMember(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXGroup::BannedMember *arg1 = (floo::BMXGroup::BannedMember *) 0 ;
  std::shared_ptr< floo::BMXGroup::BannedMember > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::BannedMember > **)&jarg1;
  arg1 = (floo::BMXGroup::BannedMember *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1BannedMember_1mUid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::BannedMember *arg1 = (floo::BMXGroup::BannedMember *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::BannedMember > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::BannedMember > **)&jarg1;
  arg1 = (floo::BMXGroup::BannedMember *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mUid = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1BannedMember_1mUid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::BannedMember *arg1 = (floo::BMXGroup::BannedMember *) 0 ;
  std::shared_ptr< floo::BMXGroup::BannedMember > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::BannedMember > **)&jarg1;
  arg1 = (floo::BMXGroup::BannedMember *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mUid);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1BannedMember_1mGroupNickname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXGroup::BannedMember *arg1 = (floo::BMXGroup::BannedMember *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXGroup::BannedMember > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::BannedMember > **)&jarg1;
  arg1 = (floo::BMXGroup::BannedMember *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mGroupNickname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1BannedMember_1mGroupNickname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup::BannedMember *arg1 = (floo::BMXGroup::BannedMember *) 0 ;
  std::shared_ptr< floo::BMXGroup::BannedMember > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::BannedMember > **)&jarg1;
  arg1 = (floo::BMXGroup::BannedMember *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->mGroupNickname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1BannedMember_1mCreateTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::BannedMember *arg1 = (floo::BMXGroup::BannedMember *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::BannedMember > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::BannedMember > **)&jarg1;
  arg1 = (floo::BMXGroup::BannedMember *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mCreateTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1BannedMember_1mCreateTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::BannedMember *arg1 = (floo::BMXGroup::BannedMember *) 0 ;
  std::shared_ptr< floo::BMXGroup::BannedMember > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::BannedMember > **)&jarg1;
  arg1 = (floo::BMXGroup::BannedMember *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mCreateTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1BannedMember_1mExpired_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::BannedMember *arg1 = (floo::BMXGroup::BannedMember *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::BannedMember > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::BannedMember > **)&jarg1;
  arg1 = (floo::BMXGroup::BannedMember *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mExpired = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1BannedMember_1mExpired_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::BannedMember *arg1 = (floo::BMXGroup::BannedMember *) 0 ;
  std::shared_ptr< floo::BMXGroup::BannedMember > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::BannedMember > **)&jarg1;
  arg1 = (floo::BMXGroup::BannedMember *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mExpired);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroup_1SharedFile(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXGroup::SharedFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXGroup::SharedFile *)new floo::BMXGroup::SharedFile();
  
  *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jresult = result ? new std::shared_ptr<  floo::BMXGroup::SharedFile >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroup_1SharedFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mFileId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mFileId = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mFileId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mFileId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mGroupId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mGroupId = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mGroupId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mGroupId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mUploader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mUploader = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mUploader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mUploader);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  int arg2 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mSize = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int) ((arg1)->mSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mCreateTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mCreateTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mCreateTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mCreateTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mUpdateTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mUpdateTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mUpdateTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mUpdateTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mRatelUrl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mRatelUrl = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mRatelUrl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->mRatelUrl);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mUrl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mUrl = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mUrl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->mUrl);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mPath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mPath = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mPath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->mPath);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mDisplayName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mDisplayName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mDisplayName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->mDisplayName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mType = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SharedFile_1mType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup::SharedFile *arg1 = (floo::BMXGroup::SharedFile *) 0 ;
  std::shared_ptr< floo::BMXGroup::SharedFile > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::SharedFile > **)&jarg1;
  arg1 = (floo::BMXGroup::SharedFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->mType);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroup_1Announcement(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXGroup::Announcement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXGroup::Announcement *)new floo::BMXGroup::Announcement();
  
  *(std::shared_ptr<  floo::BMXGroup::Announcement > **)&jresult = result ? new std::shared_ptr<  floo::BMXGroup::Announcement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroup_1Announcement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXGroup::Announcement *arg1 = (floo::BMXGroup::Announcement *) 0 ;
  std::shared_ptr< floo::BMXGroup::Announcement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Announcement > **)&jarg1;
  arg1 = (floo::BMXGroup::Announcement *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Announcement_1mTitle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXGroup::Announcement *arg1 = (floo::BMXGroup::Announcement *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXGroup::Announcement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Announcement > **)&jarg1;
  arg1 = (floo::BMXGroup::Announcement *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mTitle = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Announcement_1mTitle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup::Announcement *arg1 = (floo::BMXGroup::Announcement *) 0 ;
  std::shared_ptr< floo::BMXGroup::Announcement > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Announcement > **)&jarg1;
  arg1 = (floo::BMXGroup::Announcement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->mTitle);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Announcement_1mContent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXGroup::Announcement *arg1 = (floo::BMXGroup::Announcement *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXGroup::Announcement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Announcement > **)&jarg1;
  arg1 = (floo::BMXGroup::Announcement *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mContent = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Announcement_1mContent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup::Announcement *arg1 = (floo::BMXGroup::Announcement *) 0 ;
  std::shared_ptr< floo::BMXGroup::Announcement > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Announcement > **)&jarg1;
  arg1 = (floo::BMXGroup::Announcement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->mContent);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Announcement_1mAuthor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::Announcement *arg1 = (floo::BMXGroup::Announcement *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::Announcement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Announcement > **)&jarg1;
  arg1 = (floo::BMXGroup::Announcement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mAuthor = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Announcement_1mAuthor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::Announcement *arg1 = (floo::BMXGroup::Announcement *) 0 ;
  std::shared_ptr< floo::BMXGroup::Announcement > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Announcement > **)&jarg1;
  arg1 = (floo::BMXGroup::Announcement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mAuthor);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Announcement_1mCreateTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::Announcement *arg1 = (floo::BMXGroup::Announcement *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::Announcement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Announcement > **)&jarg1;
  arg1 = (floo::BMXGroup::Announcement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mCreateTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Announcement_1mCreateTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::Announcement *arg1 = (floo::BMXGroup::Announcement *) 0 ;
  std::shared_ptr< floo::BMXGroup::Announcement > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Announcement > **)&jarg1;
  arg1 = (floo::BMXGroup::Announcement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mCreateTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Announcement_1mId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::Announcement *arg1 = (floo::BMXGroup::Announcement *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::Announcement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Announcement > **)&jarg1;
  arg1 = (floo::BMXGroup::Announcement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mId = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Announcement_1mId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::Announcement *arg1 = (floo::BMXGroup::Announcement *) 0 ;
  std::shared_ptr< floo::BMXGroup::Announcement > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Announcement > **)&jarg1;
  arg1 = (floo::BMXGroup::Announcement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroup_1Invitation(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXGroup::Invitation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXGroup::Invitation *)new floo::BMXGroup::Invitation();
  
  *(std::shared_ptr<  floo::BMXGroup::Invitation > **)&jresult = result ? new std::shared_ptr<  floo::BMXGroup::Invitation >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroup_1Invitation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXGroup::Invitation *arg1 = (floo::BMXGroup::Invitation *) 0 ;
  std::shared_ptr< floo::BMXGroup::Invitation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Invitation > **)&jarg1;
  arg1 = (floo::BMXGroup::Invitation *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Invitation_1mGroupId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::Invitation *arg1 = (floo::BMXGroup::Invitation *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::Invitation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Invitation > **)&jarg1;
  arg1 = (floo::BMXGroup::Invitation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mGroupId = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Invitation_1mGroupId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::Invitation *arg1 = (floo::BMXGroup::Invitation *) 0 ;
  std::shared_ptr< floo::BMXGroup::Invitation > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Invitation > **)&jarg1;
  arg1 = (floo::BMXGroup::Invitation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mGroupId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Invitation_1mInviterId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::Invitation *arg1 = (floo::BMXGroup::Invitation *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::Invitation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Invitation > **)&jarg1;
  arg1 = (floo::BMXGroup::Invitation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mInviterId = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Invitation_1mInviterId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::Invitation *arg1 = (floo::BMXGroup::Invitation *) 0 ;
  std::shared_ptr< floo::BMXGroup::Invitation > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Invitation > **)&jarg1;
  arg1 = (floo::BMXGroup::Invitation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mInviterId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Invitation_1mReason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXGroup::Invitation *arg1 = (floo::BMXGroup::Invitation *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXGroup::Invitation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Invitation > **)&jarg1;
  arg1 = (floo::BMXGroup::Invitation *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mReason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Invitation_1mReason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup::Invitation *arg1 = (floo::BMXGroup::Invitation *) 0 ;
  std::shared_ptr< floo::BMXGroup::Invitation > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Invitation > **)&jarg1;
  arg1 = (floo::BMXGroup::Invitation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->mReason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Invitation_1mStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXGroup::Invitation *arg1 = (floo::BMXGroup::Invitation *) 0 ;
  floo::BMXGroup::InvitationStatus arg2 ;
  std::shared_ptr< floo::BMXGroup::Invitation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Invitation > **)&jarg1;
  arg1 = (floo::BMXGroup::Invitation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXGroup::InvitationStatus)jarg2; 
  if (arg1) (arg1)->mStatus = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Invitation_1mStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup::Invitation *arg1 = (floo::BMXGroup::Invitation *) 0 ;
  std::shared_ptr< floo::BMXGroup::Invitation > *smartarg1 = 0 ;
  floo::BMXGroup::InvitationStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Invitation > **)&jarg1;
  arg1 = (floo::BMXGroup::Invitation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXGroup::InvitationStatus) ((arg1)->mStatus);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Invitation_1mExpired_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::Invitation *arg1 = (floo::BMXGroup::Invitation *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::Invitation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Invitation > **)&jarg1;
  arg1 = (floo::BMXGroup::Invitation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mExpired = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Invitation_1mExpired_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::Invitation *arg1 = (floo::BMXGroup::Invitation *) 0 ;
  std::shared_ptr< floo::BMXGroup::Invitation > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Invitation > **)&jarg1;
  arg1 = (floo::BMXGroup::Invitation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mExpired);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroup_1Application(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXGroup::Application *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXGroup::Application *)new floo::BMXGroup::Application();
  
  *(std::shared_ptr<  floo::BMXGroup::Application > **)&jresult = result ? new std::shared_ptr<  floo::BMXGroup::Application >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroup_1Application(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXGroup::Application *arg1 = (floo::BMXGroup::Application *) 0 ;
  std::shared_ptr< floo::BMXGroup::Application > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Application > **)&jarg1;
  arg1 = (floo::BMXGroup::Application *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Application_1mGroupId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::Application *arg1 = (floo::BMXGroup::Application *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::Application > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Application > **)&jarg1;
  arg1 = (floo::BMXGroup::Application *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mGroupId = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Application_1mGroupId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::Application *arg1 = (floo::BMXGroup::Application *) 0 ;
  std::shared_ptr< floo::BMXGroup::Application > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Application > **)&jarg1;
  arg1 = (floo::BMXGroup::Application *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mGroupId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Application_1mApplicationId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::Application *arg1 = (floo::BMXGroup::Application *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::Application > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Application > **)&jarg1;
  arg1 = (floo::BMXGroup::Application *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mApplicationId = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Application_1mApplicationId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::Application *arg1 = (floo::BMXGroup::Application *) 0 ;
  std::shared_ptr< floo::BMXGroup::Application > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Application > **)&jarg1;
  arg1 = (floo::BMXGroup::Application *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mApplicationId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Application_1mReason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXGroup::Application *arg1 = (floo::BMXGroup::Application *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXGroup::Application > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Application > **)&jarg1;
  arg1 = (floo::BMXGroup::Application *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mReason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Application_1mReason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup::Application *arg1 = (floo::BMXGroup::Application *) 0 ;
  std::shared_ptr< floo::BMXGroup::Application > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Application > **)&jarg1;
  arg1 = (floo::BMXGroup::Application *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->mReason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Application_1mStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXGroup::Application *arg1 = (floo::BMXGroup::Application *) 0 ;
  floo::BMXGroup::ApplicationStatus arg2 ;
  std::shared_ptr< floo::BMXGroup::Application > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Application > **)&jarg1;
  arg1 = (floo::BMXGroup::Application *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXGroup::ApplicationStatus)jarg2; 
  if (arg1) (arg1)->mStatus = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Application_1mStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup::Application *arg1 = (floo::BMXGroup::Application *) 0 ;
  std::shared_ptr< floo::BMXGroup::Application > *smartarg1 = 0 ;
  floo::BMXGroup::ApplicationStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Application > **)&jarg1;
  arg1 = (floo::BMXGroup::Application *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXGroup::ApplicationStatus) ((arg1)->mStatus);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Application_1mExpired_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXGroup::Application *arg1 = (floo::BMXGroup::Application *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXGroup::Application > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Application > **)&jarg1;
  arg1 = (floo::BMXGroup::Application *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mExpired = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1Application_1mExpired_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup::Application *arg1 = (floo::BMXGroup::Application *) 0 ;
  std::shared_ptr< floo::BMXGroup::Application > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Application > **)&jarg1;
  arg1 = (floo::BMXGroup::Application *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mExpired);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1groupId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->groupId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1groupType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  floo::BMXGroup::GroupType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXGroup::GroupType)(arg1)->groupType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1myNickname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->myNickname();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->description();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1avatarRatelUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarRatelUrl();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1avatarUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarUrl();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1avatarPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1avatarThumbnailUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarThumbnailUrl();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1avatarThumbnailPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarThumbnailPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1createTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->createTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1extension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  floo::JSON *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::JSON *) &(arg1)->extension();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1ownerId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->ownerId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->capacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1membersCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->membersCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1adminsCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->adminsCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1blockListSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->blockListSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1bannedListSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->bannedListSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1sharedFilesCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->sharedFilesCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1latestAnnouncementId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->latestAnnouncementId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1msgPushMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  floo::BMXGroup::MsgPushMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXGroup::MsgPushMode)(arg1)->msgPushMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1modifyMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  floo::BMXGroup::ModifyMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXGroup::ModifyMode)(arg1)->modifyMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1joinAuthMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  floo::BMXGroup::JoinAuthMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXGroup::JoinAuthMode)(arg1)->joinAuthMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1inviteMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  floo::BMXGroup::InviteMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXGroup::InviteMode)(arg1)->inviteMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1msgMuteMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  floo::BMXGroup::MsgMuteMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXGroup::MsgMuteMode)(arg1)->msgMuteMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1groupStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  floo::BMXGroup::GroupStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXGroup::GroupStatus)(arg1)->groupStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1isMember(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isMember();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1enableReadAck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->enableReadAck();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1historyVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->historyVisible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1roleType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  floo::BMXGroup::MemberRoleType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXGroup::MemberRoleType)(arg1)->roleType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1banExpireTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroup *arg1 = (floo::BMXGroup *) 0 ;
  std::shared_ptr< floo::BMXGroup > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXGroup > **)&jarg1;
  arg1 = (floo::BMXGroup *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->banExpireTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupService_1CreateGroupOptions_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXGroupService::CreateGroupOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXGroupService::CreateGroupOptions *)new floo::BMXGroupService::CreateGroupOptions();
  *(floo::BMXGroupService::CreateGroupOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupService_1CreateGroupOptions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  floo::BMXGroupService::CreateGroupOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (floo::BMXGroupService::CreateGroupOptions *)new floo::BMXGroupService::CreateGroupOptions((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4);
  *(floo::BMXGroupService::CreateGroupOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupService_1CreateGroupOptions_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  floo::BMXGroupService::CreateGroupOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (floo::BMXGroupService::CreateGroupOptions *)new floo::BMXGroupService::CreateGroupOptions((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  *(floo::BMXGroupService::CreateGroupOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupService_1CreateGroupOptions_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  floo::BMXGroupService::CreateGroupOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXGroupService::CreateGroupOptions *)new floo::BMXGroupService::CreateGroupOptions((std::string const &)*arg1,(std::string const &)*arg2);
  *(floo::BMXGroupService::CreateGroupOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1CreateGroupOptions_1mName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXGroupService::CreateGroupOptions *arg1 = (floo::BMXGroupService::CreateGroupOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupService::CreateGroupOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1CreateGroupOptions_1mName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroupService::CreateGroupOptions *arg1 = (floo::BMXGroupService::CreateGroupOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupService::CreateGroupOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->mName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1CreateGroupOptions_1mDescription_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXGroupService::CreateGroupOptions *arg1 = (floo::BMXGroupService::CreateGroupOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupService::CreateGroupOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mDescription = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1CreateGroupOptions_1mDescription_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroupService::CreateGroupOptions *arg1 = (floo::BMXGroupService::CreateGroupOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupService::CreateGroupOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->mDescription);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1CreateGroupOptions_1mIsPublic_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXGroupService::CreateGroupOptions *arg1 = (floo::BMXGroupService::CreateGroupOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupService::CreateGroupOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mIsPublic = arg2;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1CreateGroupOptions_1mIsPublic_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXGroupService::CreateGroupOptions *arg1 = (floo::BMXGroupService::CreateGroupOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupService::CreateGroupOptions **)&jarg1; 
  result = (bool) ((arg1)->mIsPublic);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1CreateGroupOptions_1mIsChatroom_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXGroupService::CreateGroupOptions *arg1 = (floo::BMXGroupService::CreateGroupOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupService::CreateGroupOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mIsChatroom = arg2;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1CreateGroupOptions_1mIsChatroom_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXGroupService::CreateGroupOptions *arg1 = (floo::BMXGroupService::CreateGroupOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupService::CreateGroupOptions **)&jarg1; 
  result = (bool) ((arg1)->mIsChatroom);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1CreateGroupOptions_1mMessage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXGroupService::CreateGroupOptions *arg1 = (floo::BMXGroupService::CreateGroupOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupService::CreateGroupOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mMessage = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1CreateGroupOptions_1mMessage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXGroupService::CreateGroupOptions *arg1 = (floo::BMXGroupService::CreateGroupOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupService::CreateGroupOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->mMessage);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1CreateGroupOptions_1mMembers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXGroupService::CreateGroupOptions *arg1 = (floo::BMXGroupService::CreateGroupOptions *) 0 ;
  std::vector< int64_t > *arg2 = (std::vector< int64_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService::CreateGroupOptions **)&jarg1; 
  arg2 = *(std::vector< int64_t > **)&jarg2; 
  if (arg1) (arg1)->mMembers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1CreateGroupOptions_1mMembers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXGroupService::CreateGroupOptions *arg1 = (floo::BMXGroupService::CreateGroupOptions *) 0 ;
  std::vector< int64_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupService::CreateGroupOptions **)&jarg1; 
  result = (std::vector< int64_t > *)& ((arg1)->mMembers);
  *(std::vector< int64_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroupService_1CreateGroupOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXGroupService::CreateGroupOptions *arg1 = (floo::BMXGroupService::CreateGroupOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXGroupService::CreateGroupOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroupService(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupList *arg2 = 0 ;
  bool arg3 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  arg2 = *(floo::BMXGroupList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupList & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->get(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1search_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupList *arg2 = 0 ;
  bool arg3 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  arg2 = *(floo::BMXGroupList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupList & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->search(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1fetchGroupsByIdList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  floo::BMXGroupList *arg3 = 0 ;
  bool arg4 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  arg2 = *(std::vector< int64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return 0;
  } 
  arg3 = *(floo::BMXGroupList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupList & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->fetchGroupsByIdList((std::vector< int64_t > const &)*arg2,*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1search_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  floo::BMXGroupList *arg3 = 0 ;
  bool arg4 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  arg2 = *(std::vector< int64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return 0;
  } 
  arg3 = *(floo::BMXGroupList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupList & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->search((std::vector< int64_t > const &)*arg2,*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1fetchGroupById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  int64_t arg2 ;
  floo::BMXGroupPtr *arg3 = 0 ;
  bool arg4 ;
  floo::BMXGroupPtr tempnull3 ;
  floo::BMXErrorCode result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1;
  arg2 = (int64_t)jarg2;
  floo::BMXGroupPtr tmpPtr = floo::BMXGroupPtr();
  arg4 = jarg4 ? true : false;
  result = (floo::BMXErrorCode)(arg1)->fetchGroupById(arg2,tmpPtr,arg4);

  GET_INT_VECTOR(jarg3);
  jlong jPtr = 0;

  *(floo::BMXGroupPtr **)&jPtr = tmpPtr ? new floo::BMXGroupPtr(tmpPtr) : 0;
  PUSH_INT_INTO_VECTOR;
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1search_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  int64_t arg2 ;
  floo::BMXGroupPtr *arg3 = 0 ;
  bool arg4 ;
  floo::BMXGroupPtr tempnull3 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  floo::BMXGroupPtr tmpPtr = floo::BMXGroupPtr();
  arg4 = jarg4 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->search(arg2,tmpPtr,arg4);

  GET_INT_VECTOR(jarg3);
  jlong jPtr = 0;
  *(floo::BMXGroupPtr **)&jPtr = tmpPtr ? new floo::BMXGroupPtr(tmpPtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1fetchLocalGroupsByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupList *arg2 = 0 ;
  std::string *arg3 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  arg2 = *(floo::BMXGroupList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupList & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->fetchLocalGroupsByName(*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1search_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupList *arg2 = 0 ;
  std::string *arg3 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  arg2 = *(floo::BMXGroupList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupList & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->search(*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupService::CreateGroupOptions *arg2 = 0 ;
  floo::BMXGroupPtr *arg3 = 0 ;
  floo::BMXGroupPtr tempnull3 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  arg2 = *(floo::BMXGroupService::CreateGroupOptions **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupService::CreateGroupOptions const & reference is null");
    return 0;
  } 

  floo::BMXGroupPtr tmpPtr = floo::BMXGroupPtr();
  result = (floo::BMXErrorCode)(arg1)->create((floo::BMXGroupService::CreateGroupOptions const &)*arg2,tmpPtr);

  GET_INT_VECTOR(jarg3);
  jlong jPtr = 0;
  *(floo::BMXGroupPtr **)&jPtr = tmpPtr ? new floo::BMXGroupPtr(tmpPtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (floo::BMXErrorCode)(arg1)->destroy(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1join(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::string *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->join(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1leave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (floo::BMXErrorCode)(arg1)->leave(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (floo::BMXErrorCode)(arg1)->getInfo(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getMembersNickname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXGroup::MemberList *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return 0;
  } 
  arg4 = *(floo::BMXGroup::MemberList **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroup::MemberList & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->getMembersNickname(arg2,(std::vector< int64_t > const &)*arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getInvitationList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupInvitationPagePtr *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4;

  floo::BMXGroupInvitationPagePtr tmpPtr = floo::BMXGroupInvitationPagePtr();
  result = (floo::BMXErrorCode)(arg1)->getInvitationList(tmpPtr,(std::string const &)*arg3,arg4);

  GET_INT_VECTOR(jarg2);
  jlong jPtr = 0;
  *(floo::BMXGroupInvitationPagePtr **)&jPtr = tmpPtr ? new floo::BMXGroupInvitationPagePtr(tmpPtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getInvitationList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupInvitationPagePtr *arg2 = 0 ;
  std::string *arg3 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  arg2 = *(floo::BMXGroupInvitationPagePtr **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupInvitationPagePtr & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->getInvitationList(*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getInvitationList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupInvitationPagePtr *arg2 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  arg2 = *(floo::BMXGroupInvitationPagePtr **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupInvitationPagePtr & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->getInvitationList(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getApplicationList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupList arg2 ;
  floo::BMXGroupApplicationPagePtr *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  floo::BMXGroupList *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupList **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null floo::BMXGroupList");
    return 0;
  }
  arg2 = *argp2; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5;

  floo::BMXGroupApplicationPagePtr tmpPtr = floo::BMXGroupApplicationPagePtr();
  result = (floo::BMXErrorCode)(arg1)->getApplicationList(arg2,tmpPtr,(std::string const &)*arg4,arg5);

  GET_INT_VECTOR(jarg3);
  jlong jPtr = 0;
  *(floo::BMXGroupApplicationPagePtr **)&jPtr = tmpPtr ? new floo::BMXGroupApplicationPagePtr(tmpPtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getApplicationList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupList arg2 ;
  floo::BMXGroupApplicationPagePtr *arg3 = 0 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupList *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupList **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null floo::BMXGroupList");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(floo::BMXGroupApplicationPagePtr **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupApplicationPagePtr & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (floo::BMXErrorCode)(arg1)->getApplicationList(arg2,*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getApplicationList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupList arg2 ;
  floo::BMXGroupApplicationPagePtr *arg3 = 0 ;
  floo::BMXGroupList *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupList **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null floo::BMXGroupList");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(floo::BMXGroupApplicationPagePtr **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupApplicationPagePtr & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->getApplicationList(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getMembers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupMemberResultPagePtr *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5;

  floo::BMXGroupMemberResultPagePtr tmpPtr = floo::BMXGroupMemberResultPagePtr();
  result = (floo::BMXErrorCode)(arg1)->getMembers(arg2,tmpPtr,(std::string const &)*arg4,arg5);

  GET_INT_VECTOR(jarg3);
  jlong jPtr = 0;
  *(floo::BMXGroupMemberResultPagePtr **)&jPtr = tmpPtr ? new floo::BMXGroupMemberResultPagePtr(tmpPtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getMembers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupMemberResultPagePtr *arg3 = 0 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(floo::BMXGroupMemberResultPagePtr **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupMemberResultPagePtr & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (floo::BMXErrorCode)(arg1)->getMembers(arg2,*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getMembers_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupMemberResultPagePtr *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(floo::BMXGroupMemberResultPagePtr **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupMemberResultPagePtr & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->getMembers(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getMembers_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::MemberList *arg3 = 0 ;
  bool arg4 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(floo::BMXGroup::MemberList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroup::MemberList & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->getMembers(arg2,*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1addMembers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (floo::BMXErrorCode)(arg1)->addMembers(arg2,(std::vector< int64_t > const &)*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1removeMembers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (floo::BMXErrorCode)(arg1)->removeMembers(arg2,(std::vector< int64_t > const &)*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1addAdmins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (floo::BMXErrorCode)(arg1)->addAdmins(arg2,(std::vector< int64_t > const &)*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1removeAdmins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (floo::BMXErrorCode)(arg1)->removeAdmins(arg2,(std::vector< int64_t > const &)*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getAdmins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::MemberList *arg3 = 0 ;
  bool arg4 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(floo::BMXGroup::MemberList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroup::MemberList & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->getAdmins(arg2,*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1blockMembers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->blockMembers(arg2,(std::vector< int64_t > const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1unblockMembers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->unblockMembers(arg2,(std::vector< int64_t > const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getBlockList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupMemberResultPagePtr *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5;

  floo::BMXGroupMemberResultPagePtr tmpPtr = floo::BMXGroupMemberResultPagePtr();
  result = (floo::BMXErrorCode)(arg1)->getBlockList(arg2,tmpPtr,(std::string const &)*arg4,arg5);

  GET_INT_VECTOR(jarg3);
  jlong jPtr = 0;
  *(floo::BMXGroupMemberResultPagePtr **)&jPtr = tmpPtr ? new floo::BMXGroupMemberResultPagePtr(tmpPtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getBlockList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupMemberResultPagePtr *arg3 = 0 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(floo::BMXGroupMemberResultPagePtr **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupMemberResultPagePtr & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (floo::BMXErrorCode)(arg1)->getBlockList(arg2,*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getBlockList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupMemberResultPagePtr *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(floo::BMXGroupMemberResultPagePtr **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupMemberResultPagePtr & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->getBlockList(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getBlockList_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::MemberList *arg3 = 0 ;
  bool arg4 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(floo::BMXGroup::MemberList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroup::MemberList & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->getBlockList(arg2,*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1banMembers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jstring jarg5) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  int64_t arg4 ;
  std::string *arg5 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return 0;
  } 
  arg4 = (int64_t)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (floo::BMXErrorCode)(arg1)->banMembers(arg2,(std::vector< int64_t > const &)*arg3,arg4,(std::string const &)*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1banMembers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  int64_t arg4 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return 0;
  } 
  arg4 = (int64_t)jarg4; 
  result = (floo::BMXErrorCode)(arg1)->banMembers(arg2,(std::vector< int64_t > const &)*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1banGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  result = (floo::BMXErrorCode)(arg1)->banGroup(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1unbanMembers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->unbanMembers(arg2,(std::vector< int64_t > const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1unbanGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (floo::BMXErrorCode)(arg1)->unbanGroup(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getBannedMembers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupBannedMemberResultPagePtr *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5;

  floo::BMXGroupBannedMemberResultPagePtr tmpPtr = floo::BMXGroupBannedMemberResultPagePtr();
  result = (floo::BMXErrorCode)(arg1)->getBannedMembers(arg2,tmpPtr,(std::string const &)*arg4,arg5);

  GET_INT_VECTOR(jarg3);
  jlong jPtr = 0;
  *(floo::BMXGroupBannedMemberResultPagePtr **)&jPtr = tmpPtr ? new floo::BMXGroupBannedMemberResultPagePtr(tmpPtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getBannedMembers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupBannedMemberResultPagePtr *arg3 = 0 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(floo::BMXGroupBannedMemberResultPagePtr **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupBannedMemberResultPagePtr & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (floo::BMXErrorCode)(arg1)->getBannedMembers(arg2,*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getBannedMembers_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupBannedMemberResultPagePtr *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(floo::BMXGroupBannedMemberResultPagePtr **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupBannedMemberResultPagePtr & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->getBannedMembers(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getBannedMembers_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::BannedMemberList *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(floo::BMXGroup::BannedMemberList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroup::BannedMemberList & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->getBannedMembers(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1muteMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::MsgMuteMode arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXGroup::MsgMuteMode)jarg3; 
  result = (floo::BMXErrorCode)(arg1)->muteMessage(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1acceptApplication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  result = (floo::BMXErrorCode)(arg1)->acceptApplication(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1declineApplication_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (floo::BMXErrorCode)(arg1)->declineApplication(arg2,arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1declineApplication_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  result = (floo::BMXErrorCode)(arg1)->declineApplication(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1acceptInvitation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  result = (floo::BMXErrorCode)(arg1)->acceptInvitation(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1declineInvitation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (floo::BMXErrorCode)(arg1)->declineInvitation(arg2,arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1declineInvitation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  result = (floo::BMXErrorCode)(arg1)->declineInvitation(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1transferOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  result = (floo::BMXErrorCode)(arg1)->transferOwner(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}

SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1uploadSharedFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jstring jarg5, jobject jarg6) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  floo::BMXGroupService::Callback arg6 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroupService::Callback *argp6 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
//  argp6 = *(floo::BMXGroupService::Callback **)&jarg6;
//  if (!argp6) {
//    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null floo::BMXGroupService::Callback");
//    return 0;
//  }
//  arg6 = *argp6;
  jenv->GetJavaVM(&g_VM);
  result = (floo::BMXErrorCode)(arg1)->uploadSharedFile(arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,createCallback(jenv, jarg6));
  jresult = (jint)result; 
  return jresult;
}

SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1cancelUploadSharedFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::string *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1;
  argp2 = *(floo::BMXGroupPtr **)&jarg2;
  if (argp2) arg2 = *argp2;
  if(!jarg3) {
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
  return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);
  result = (floo::BMXErrorCode)(arg1)->cancelUploadSharedFile(arg2,(std::string const &)*arg3);
  jresult = (jint)result;
  return jresult;
}

SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1removeSharedFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::SharedFilePtr arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroup::SharedFilePtr *argp3 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(floo::BMXGroup::SharedFilePtr **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (floo::BMXErrorCode)(arg1)->removeSharedFile(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}

SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1downloadSharedFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::SharedFilePtr arg3 ;
  floo::BMXGroupService::Callback arg4 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroup::SharedFilePtr *argp3 ;
  floo::BMXGroupService::Callback *argp4 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(floo::BMXGroup::SharedFilePtr **)&jarg3; 
  if (argp3) arg3 = *argp3; 
//  argp4 = *(floo::BMXGroupService::Callback **)&jarg4;
//  if (!argp4) {
//    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null floo::BMXGroupService::Callback");
//    return 0;
//  }
//  arg4 = *argp4;
  jenv->GetJavaVM(&g_VM);
  result = (floo::BMXErrorCode)(arg1)->downloadSharedFile(arg2,arg3,createCallback(jenv, jarg4));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1cancelDownloadSharedFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
jint jresult = 0 ;
floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
floo::BMXGroupPtr arg2 ;
floo::BMXGroup::SharedFilePtr arg3 ;
floo::BMXGroupPtr *argp2 ;
floo::BMXGroup::SharedFilePtr *argp3 ;
floo::BMXErrorCode result;

(void)jenv;
(void)jcls;
(void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1;
  argp2 = *(floo::BMXGroupPtr **)&jarg2;
  if (argp2) arg2 = *argp2;
  argp3 = *(floo::BMXGroup::SharedFilePtr **)&jarg3;
  if (argp3) arg3 = *argp3;
  result = (floo::BMXErrorCode)(arg1)->cancelDownloadSharedFile(arg2,arg3);
  jresult = (jint)result;
  return jresult;
}

SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getSharedFilesList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::SharedFileList *arg3 = 0 ;
  bool arg4 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(floo::BMXGroup::SharedFileList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroup::SharedFileList & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->getSharedFilesList(arg2,*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1changeSharedFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::SharedFilePtr arg3 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroup::SharedFilePtr *argp3 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(floo::BMXGroup::SharedFilePtr **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (floo::BMXErrorCode)(arg1)->changeSharedFileName(arg2,arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getLatestAnnouncement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::AnnouncementPtr *arg3 = 0 ;
  bool arg4 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroup::AnnouncementPtr tempnull3 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? *(floo::BMXGroup::AnnouncementPtr **)&jarg3 : &tempnull3; 
  arg4 = jarg4 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->getLatestAnnouncement(arg2,*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1getAnnouncementList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::AnnouncementList *arg3 = 0 ;
  bool arg4 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(floo::BMXGroup::AnnouncementList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroup::AnnouncementList & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->getAnnouncementList(arg2,*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1editAnnouncement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (floo::BMXErrorCode)(arg1)->editAnnouncement(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1deleteAnnouncement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  result = (floo::BMXErrorCode)(arg1)->deleteAnnouncement(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::string *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setName(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::string *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setDescription(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1setExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::string *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setExtension(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1setMyNickname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::string *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setMyNickname(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1setMsgPushMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::MsgPushMode arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXGroup::MsgPushMode)jarg3; 
  result = (floo::BMXErrorCode)(arg1)->setMsgPushMode(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1setJoinAuthMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::JoinAuthMode arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXGroup::JoinAuthMode)jarg3; 
  result = (floo::BMXErrorCode)(arg1)->setJoinAuthMode(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1setInviteMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::InviteMode arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXGroup::InviteMode)jarg3; 
  result = (floo::BMXErrorCode)(arg1)->setInviteMode(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1setAllowMemberModify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  bool arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setAllowMemberModify(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1setEnableReadAck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  bool arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setEnableReadAck(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1setHistoryVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  bool arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setHistoryVisible(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1setAvatar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jobject jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::string *arg3 = 0 ;
  floo::BMXGroupService::Callback arg4 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroupService::Callback *argp4 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
//  argp4 = *(floo::BMXGroupService::Callback **)&jarg4;
//  if (!argp4) {
//    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null floo::BMXGroupService::Callback");
//    return 0;
//  }
//  arg4 = *argp4;
  result = (floo::BMXErrorCode)(arg1)->setAvatar(arg2,(std::string const &)*arg3,createCallback(jenv, jarg4));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1downloadAvatar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jobject jarg4) {
  jint jresult = 0 ;
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupPtr arg2 ;
  bool arg3 ;
  floo::BMXGroupService::Callback arg4 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroupService::Callback *argp4 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
//  argp4 = *(floo::BMXGroupService::Callback **)&jarg4;
//  if (!argp4) {
//    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null floo::BMXGroupService::Callback");
//    return 0;
//  }
//  arg4 = *argp4;
  jenv->GetJavaVM(&g_VM);
  result = (floo::BMXErrorCode)(arg1)->downloadAvatar(arg2,arg3,createCallback(jenv, jarg4));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1addGroupListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupServiceListener *arg2 = (floo::BMXGroupServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  arg2 = *(floo::BMXGroupServiceListener **)&jarg2; 
  (arg1)->addGroupListener(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupService_1removeGroupListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXGroupService *arg1 = (floo::BMXGroupService *) 0 ;
  floo::BMXGroupServiceListener *arg2 = (floo::BMXGroupServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupService **)&jarg1; 
  arg2 = *(floo::BMXGroupServiceListener **)&jarg2; 
  (arg1)->removeGroupListener(arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXImageAttachment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  floo::BMXMessageAttachment::Size *arg2 = 0 ;
  std::string *arg3 = 0 ;
  floo::BMXImageAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(floo::BMXMessageAttachment::Size **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageAttachment::Size const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXImageAttachment *)new floo::BMXImageAttachment((std::string const &)*arg1,(floo::BMXMessageAttachment::Size const &)*arg2,(std::string const &)*arg3);
  
  *(std::shared_ptr<  floo::BMXImageAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXImageAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXImageAttachment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  floo::BMXMessageAttachment::Size *arg2 = 0 ;
  floo::BMXImageAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(floo::BMXMessageAttachment::Size **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageAttachment::Size const & reference is null");
    return 0;
  } 
  result = (floo::BMXImageAttachment *)new floo::BMXImageAttachment((std::string const &)*arg1,(floo::BMXMessageAttachment::Size const &)*arg2);
  
  *(std::shared_ptr<  floo::BMXImageAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXImageAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXImageAttachment_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  floo::BMXMessageAttachment::Size *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t arg4 ;
  floo::BMXImageAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(floo::BMXMessageAttachment::Size **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageAttachment::Size const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int64_t)jarg4; 
  result = (floo::BMXImageAttachment *)new floo::BMXImageAttachment((std::string const &)*arg1,(floo::BMXMessageAttachment::Size const &)*arg2,(std::string const &)*arg3,arg4);
  
  *(std::shared_ptr<  floo::BMXImageAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXImageAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXImageAttachment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXImageAttachment *arg1 = (floo::BMXImageAttachment *) 0 ;
  std::shared_ptr< floo::BMXImageAttachment > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXImageAttachment > **)&jarg1;
  arg1 = (floo::BMXImageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXImageAttachment_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXImageAttachment *arg1 = (floo::BMXImageAttachment *) 0 ;
  std::shared_ptr< floo::BMXImageAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachment::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXImageAttachment > **)&jarg1;
  arg1 = (floo::BMXImageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessageAttachment::Type)((floo::BMXImageAttachment const *)arg1)->type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXImageAttachment_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXImageAttachment *arg1 = (floo::BMXImageAttachment *) 0 ;
  std::shared_ptr< floo::BMXImageAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachmentPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXImageAttachment > **)&jarg1;
  arg1 = (floo::BMXImageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((floo::BMXImageAttachment const *)arg1)->clone();
  *(floo::BMXMessageAttachmentPtr **)&jresult = result ? new floo::BMXMessageAttachmentPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXImageAttachment_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXImageAttachment *arg1 = (floo::BMXImageAttachment *) 0 ;
  std::shared_ptr< floo::BMXImageAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachment::Size *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXImageAttachment > **)&jarg1;
  arg1 = (floo::BMXImageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessageAttachment::Size *) &((floo::BMXImageAttachment const *)arg1)->size();
  *(floo::BMXMessageAttachment::Size **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXImageAttachment_1thumbnailUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXImageAttachment *arg1 = (floo::BMXImageAttachment *) 0 ;
  std::shared_ptr< floo::BMXImageAttachment const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXImageAttachment > **)&jarg1;
  arg1 = (floo::BMXImageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((floo::BMXImageAttachment const *)arg1)->thumbnailUrl();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXImageAttachment_1setThumbnail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXImageAttachment *arg1 = (floo::BMXImageAttachment *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXImageAttachment > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXImageAttachment > **)&jarg1;
  arg1 = (floo::BMXImageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setThumbnail((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXImageAttachment_1thumbnailPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXImageAttachment *arg1 = (floo::BMXImageAttachment *) 0 ;
  std::shared_ptr< floo::BMXImageAttachment const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXImageAttachment > **)&jarg1;
  arg1 = (floo::BMXImageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((floo::BMXImageAttachment const *)arg1)->thumbnailPath();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXImageAttachment_1thumbnailDownloadStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXImageAttachment *arg1 = (floo::BMXImageAttachment *) 0 ;
  std::shared_ptr< floo::BMXImageAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachment::DownloadStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXImageAttachment > **)&jarg1;
  arg1 = (floo::BMXImageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessageAttachment::DownloadStatus)((floo::BMXImageAttachment const *)arg1)->thumbnailDownloadStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXImageAttachment_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessageAttachment *arg1 = (floo::BMXMessageAttachment *) 0 ;
  std::shared_ptr< floo::BMXMessageAttachment > *smartarg1 = 0 ;
  floo::BMXImageAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageAttachment > **)&jarg1;
  arg1 = (floo::BMXMessageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  {
    result = (floo::BMXImageAttachment *)floo_BMXImageAttachment_dynamic_cast(arg1);
    if (!result) {
      jclass excep = jenv->FindClass("java/lang/ClassCastException");
      if (excep) {
        jenv->ThrowNew(excep, "dynamic_cast exception");
      }
    }
  }
  
  *(std::shared_ptr<  floo::BMXImageAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXImageAttachment >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXLocationAttachment(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  floo::BMXLocationAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXLocationAttachment *)new floo::BMXLocationAttachment(arg1,arg2,(std::string const &)*arg3);
  
  *(std::shared_ptr<  floo::BMXLocationAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXLocationAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXLocationAttachment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXLocationAttachment *arg1 = (floo::BMXLocationAttachment *) 0 ;
  std::shared_ptr< floo::BMXLocationAttachment > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXLocationAttachment > **)&jarg1;
  arg1 = (floo::BMXLocationAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXLocationAttachment_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXLocationAttachment *arg1 = (floo::BMXLocationAttachment *) 0 ;
  std::shared_ptr< floo::BMXLocationAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachment::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXLocationAttachment > **)&jarg1;
  arg1 = (floo::BMXLocationAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessageAttachment::Type)((floo::BMXLocationAttachment const *)arg1)->type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXLocationAttachment_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXLocationAttachment *arg1 = (floo::BMXLocationAttachment *) 0 ;
  std::shared_ptr< floo::BMXLocationAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachmentPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXLocationAttachment > **)&jarg1;
  arg1 = (floo::BMXLocationAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((floo::BMXLocationAttachment const *)arg1)->clone();
  *(floo::BMXMessageAttachmentPtr **)&jresult = result ? new floo::BMXMessageAttachmentPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_im_floo_floolib_flooJNI_BMXLocationAttachment_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  floo::BMXLocationAttachment *arg1 = (floo::BMXLocationAttachment *) 0 ;
  std::shared_ptr< floo::BMXLocationAttachment const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXLocationAttachment > **)&jarg1;
  arg1 = (floo::BMXLocationAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((floo::BMXLocationAttachment const *)arg1)->latitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_im_floo_floolib_flooJNI_BMXLocationAttachment_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  floo::BMXLocationAttachment *arg1 = (floo::BMXLocationAttachment *) 0 ;
  std::shared_ptr< floo::BMXLocationAttachment const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXLocationAttachment > **)&jarg1;
  arg1 = (floo::BMXLocationAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((floo::BMXLocationAttachment const *)arg1)->longitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXLocationAttachment_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXLocationAttachment *arg1 = (floo::BMXLocationAttachment *) 0 ;
  std::shared_ptr< floo::BMXLocationAttachment const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXLocationAttachment > **)&jarg1;
  arg1 = (floo::BMXLocationAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((floo::BMXLocationAttachment const *)arg1)->address();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXLocationAttachment_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessageAttachment *arg1 = (floo::BMXMessageAttachment *) 0 ;
  std::shared_ptr< floo::BMXMessageAttachment > *smartarg1 = 0 ;
  floo::BMXLocationAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageAttachment > **)&jarg1;
  arg1 = (floo::BMXMessageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  {
    result = (floo::BMXLocationAttachment *)floo_BMXLocationAttachment_dynamic_cast(arg1);
    if (!result) {
      jclass excep = jenv->FindClass("java/lang/ClassCastException");
      if (excep) {
        jenv->ThrowNew(excep, "dynamic_cast exception");
      }
    }
  }
  
  *(std::shared_ptr<  floo::BMXLocationAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXLocationAttachment >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXMessagePage_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > >();
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXMessagePage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > > *arg1 = 0 ;
  int64_t arg2 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXMessage > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< floo::BMXMessage > > const & reference is null");
    return 0;
  } 
  arg2 = (int64_t)jarg2; 
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > >((std::vector< std::shared_ptr< floo::BMXMessage > > const &)*arg1,arg2);
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXMessagePage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > > *arg1 = 0 ;
  std::string arg2 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXMessage > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< floo::BMXMessage > > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > >((std::vector< std::shared_ptr< floo::BMXMessage > > const &)*arg1,arg2);
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXMessagePage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > *arg1 = 0 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > const & reference is null");
    return 0;
  } 
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > >((floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > const &)*arg1);
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXMessagePage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > *arg1 = (floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > *) 0 ;
  std::shared_ptr< floo::BMXMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  smartarg1 = *(std::shared_ptr<  floo::BMXMessage > **)&jarg1;
  arg1 = *(floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > **)&jarg1; 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessagePage_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > >*arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > >>**)&jarg1; 
  result = (arg1)->get()->count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessagePage_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > >*arg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > >>**)&jarg1; 
  result = (int64_t)(arg1)->get()->offset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXMessagePage_1cursor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > >*arg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > >>**)&jarg1; 
  result = (std::string *) &(arg1)->get()->cursor();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessagePage_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > >*arg1 = 0 ;
  std::vector< std::shared_ptr< floo::BMXMessage > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > >>**)&jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXMessage > > *) &(arg1)->get()->result();
  *(std::vector< std::shared_ptr< floo::BMXMessage > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupMemberResultPage_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXResultPage< floo::BMXGroup::MemberPtr > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXResultPage< floo::BMXGroup::MemberPtr > *)new floo::BMXResultPage< floo::BMXGroup::MemberPtr >();
  *(floo::BMXResultPage< floo::BMXGroup::MemberPtr > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupMemberResultPage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > > *arg1 = 0 ;
  int64_t arg2 ;
  floo::BMXResultPage< floo::BMXGroup::MemberPtr > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Member > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< floo::BMXGroup::Member > > const & reference is null");
    return 0;
  } 
  arg2 = (int64_t)jarg2; 
  result = (floo::BMXResultPage< floo::BMXGroup::MemberPtr > *)new floo::BMXResultPage< floo::BMXGroup::MemberPtr >((std::vector< std::shared_ptr< floo::BMXGroup::Member > > const &)*arg1,arg2);
  *(floo::BMXResultPage< floo::BMXGroup::MemberPtr > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupMemberResultPage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > > *arg1 = 0 ;
  std::string arg2 ;
  floo::BMXResultPage< floo::BMXGroup::MemberPtr > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Member > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< floo::BMXGroup::Member > > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXResultPage< floo::BMXGroup::MemberPtr > *)new floo::BMXResultPage< floo::BMXGroup::MemberPtr >((std::vector< std::shared_ptr< floo::BMXGroup::Member > > const &)*arg1,arg2);
  *(floo::BMXResultPage< floo::BMXGroup::MemberPtr > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupMemberResultPage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXResultPage< floo::BMXGroup::MemberPtr > *arg1 = 0 ;
  floo::BMXResultPage< floo::BMXGroup::MemberPtr > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXResultPage< floo::BMXGroup::MemberPtr > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXResultPage< floo::BMXGroup::MemberPtr > const & reference is null");
    return 0;
  } 
  result = (floo::BMXResultPage< floo::BMXGroup::MemberPtr > *)new floo::BMXResultPage< floo::BMXGroup::MemberPtr >((floo::BMXResultPage< floo::BMXGroup::MemberPtr > const &)*arg1);
  *(floo::BMXResultPage< floo::BMXGroup::MemberPtr > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroupMemberResultPage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXResultPage< floo::BMXGroup::MemberPtr > *arg1 = (floo::BMXResultPage< floo::BMXGroup::MemberPtr > *) 0 ;
  std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::MemberPtr > > *smartarg1 = 0 ;

  (void)jenv;
  (void)jcls;
  smartarg1 = *(std::shared_ptr<  floo::BMXResultPage< floo::BMXGroup::MemberPtr > > **)&jarg1;
  arg1 = *(floo::BMXResultPage< floo::BMXGroup::MemberPtr > **)&jarg1;
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupMemberResultPage_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::MemberPtr > >*arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::MemberPtr >>**)&jarg1; 
  result = (arg1)->get()->count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupMemberResultPage_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::MemberPtr > >*arg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::MemberPtr >>**)&jarg1; 
  result = (int64_t)(arg1)->get()->offset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroupMemberResultPage_1cursor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::MemberPtr > >*arg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::MemberPtr >>**)&jarg1; 
  result = (std::string *) &(arg1)->get()->cursor();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupMemberResultPage_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::MemberPtr > >*arg1 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Member > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::MemberPtr >>**)&jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXGroup::Member > > *) &(arg1)->get()->result();
  *(std::vector< std::shared_ptr< floo::BMXGroup::Member > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupBannedMemberResultPage_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > *)new floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr >();
  *(floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupBannedMemberResultPage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *arg1 = 0 ;
  int64_t arg2 ;
  floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > const & reference is null");
    return 0;
  } 
  arg2 = (int64_t)jarg2; 
  result = (floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > *)new floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr >((std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > const &)*arg1,arg2);
  *(floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupBannedMemberResultPage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *arg1 = 0 ;
  std::string arg2 ;
  floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > *)new floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr >((std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > const &)*arg1,arg2);
  *(floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupBannedMemberResultPage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > *arg1 = 0 ;
  floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > const & reference is null");
    return 0;
  } 
  result = (floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > *)new floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr >((floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > const &)*arg1);
  *(floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroupBannedMemberResultPage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > *arg1 = (floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > *) 0 ;
  std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > > *smartarg1 = 0 ;

  (void)jenv;
  (void)jcls;
  smartarg1 = *(std::shared_ptr<  floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > > **)&jarg1;
  arg1 = *(floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > **)&jarg1;
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupBannedMemberResultPage_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > >*arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr >>**)&jarg1; 
  result = (arg1)->get()->count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupBannedMemberResultPage_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > >*arg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr >>**)&jarg1; 
  result = (int64_t)(arg1)->get()->offset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXGroupBannedMemberResultPage_1cursor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > >*arg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr >>**)&jarg1; 
  result = (std::string *) &(arg1)->get()->cursor();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupBannedMemberResultPage_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > >*arg1 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr >>**)&jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > *) &(arg1)->get()->result();
  *(std::vector< std::shared_ptr< floo::BMXGroup::BannedMember > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1ApplicationPage_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > >();
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1ApplicationPage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *arg1 = 0 ;
  int64_t arg2 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< floo::BMXRosterService::Application > > const & reference is null");
    return 0;
  } 
  arg2 = (int64_t)jarg2; 
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > >((std::vector< std::shared_ptr< floo::BMXRosterService::Application > > const &)*arg1,arg2);
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1ApplicationPage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *arg1 = 0 ;
  std::string arg2 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< floo::BMXRosterService::Application > > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > >((std::vector< std::shared_ptr< floo::BMXRosterService::Application > > const &)*arg1,arg2);
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1ApplicationPage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > *arg1 = 0 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > const & reference is null");
    return 0;
  } 
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > >((floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > const &)*arg1);
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1ApplicationPage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > *arg1 = (floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > *) 0 ;
  std::shared_ptr< floo::BMXResultPage< floo::BMXRosterService::Application > > *smartarg1 = 0 ;

  (void)jenv;
  (void)jcls;
  smartarg1 = *(std::shared_ptr<  floo::BMXResultPage< floo::BMXRosterService::Application > > **)&jarg1;
  arg1 = *(floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > **)&jarg1;
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_ApplicationPage_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > >*arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > >>**)&jarg1; 
  result = (arg1)->get()->count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_ApplicationPage_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > >*arg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > >>**)&jarg1; 
  result = (int64_t)(arg1)->get()->offset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_ApplicationPage_1cursor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > >*arg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > >>**)&jarg1; 
  result = (std::string *) &(arg1)->get()->cursor();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_ApplicationPage_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > >*arg1 = 0 ;
  std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > >>**)&jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXRosterService::Application > > *) &(arg1)->get()->result();
  *(std::vector< std::shared_ptr< floo::BMXRosterService::Application > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1GroupApplicationPage_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > >();
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1GroupApplicationPage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > > *arg1 = 0 ;
  int64_t arg2 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Application > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< floo::BMXGroup::Application > > const & reference is null");
    return 0;
  } 
  arg2 = (int64_t)jarg2; 
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > >((std::vector< std::shared_ptr< floo::BMXGroup::Application > > const &)*arg1,arg2);
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1GroupApplicationPage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > > *arg1 = 0 ;
  std::string arg2 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Application > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< floo::BMXGroup::Application > > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > >((std::vector< std::shared_ptr< floo::BMXGroup::Application > > const &)*arg1,arg2);
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1GroupApplicationPage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > *arg1 = 0 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > const & reference is null");
    return 0;
  } 
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > >((floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > const &)*arg1);
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1GroupApplicationPage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > *arg1 = (floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > *) 0 ;
  std::shared_ptr< floo::BMXGroup::Application > *smartarg1 = 0 ;

  (void)jenv;
  (void)jcls;

  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Application > **)&jarg1;
  arg1 = *(floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > **)&jarg1;
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_GroupApplicationPage_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > >*arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > >>**)&jarg1; 
  result = (arg1)->get()->count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_GroupApplicationPage_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > >*arg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > >>**)&jarg1; 
  result = (int64_t)(arg1)->get()->offset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_GroupApplicationPage_1cursor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > >*arg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > >>**)&jarg1; 
  result = (std::string *) &(arg1)->get()->cursor();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_GroupApplicationPage_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > >*arg1 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Application > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > >>**)&jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXGroup::Application > > *) &(arg1)->get()->result();
  *(std::vector< std::shared_ptr< floo::BMXGroup::Application > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1GroupInvitaionPage_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > >();
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1GroupInvitaionPage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *arg1 = 0 ;
  int64_t arg2 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > const & reference is null");
    return 0;
  } 
  arg2 = (int64_t)jarg2; 
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > >((std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > const &)*arg1,arg2);
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1GroupInvitaionPage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *arg1 = 0 ;
  std::string arg2 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > >((std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > const &)*arg1,arg2);
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1GroupInvitaionPage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > *arg1 = 0 ;
  floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > const & reference is null");
    return 0;
  } 
  result = (floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > *)new floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > >((floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > const &)*arg1);
  *(floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1GroupInvitaionPage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > *arg1 = (floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > *) 0 ;
  std::shared_ptr< floo::BMXGroup::Invitation > *smartarg1 = 0 ;

  (void)jenv;
  (void)jcls;

  smartarg1 = *(std::shared_ptr<  floo::BMXGroup::Invitation > **)&jarg1;
  arg1 = *(floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jarg1;
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_GroupInvitaionPage_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > >*arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > >>**)&jarg1; 
  result = (arg1)->get()->count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_GroupInvitaionPage_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > >*arg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > >>**)&jarg1; 
  result = (int64_t)(arg1)->get()->offset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_GroupInvitaionPage_1cursor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > >*arg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > >>**)&jarg1; 
  result = (std::string *) &(arg1)->get()->cursor();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_GroupInvitaionPage_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > >*arg1 = 0 ;
  std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::shared_ptr< floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > >>**)&jarg1; 
  result = (std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > *) &(arg1)->get()->result();
  *(std::vector< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXMessageListList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *)new std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >();
  *(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXMessageListList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::size_type arg1 ;
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::size_type)jarg1; 
  result = (std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *)new std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >(arg1);
  *(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessageListList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *arg1 = (std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *) 0 ;
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > **)&jarg1; 
  result = ((std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessageListList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *arg1 = (std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *) 0 ;
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > **)&jarg1; 
  result = ((std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageListList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *arg1 = (std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *) 0 ;
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > **)&jarg1; 
  arg2 = (std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXMessageListList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *arg1 = (std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > **)&jarg1; 
  result = (bool)((std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageListList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *arg1 = (std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageListList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *arg1 = (std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *) 0 ;
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessageListList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *arg1 = (std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::value_type *) &std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_floo_BMXMessage_Sg__Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXMessageListList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *arg1 = (std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_floo_BMXMessage_Sg__Sg__Sg__set(arg1,arg2,(std::vector< std::shared_ptr< floo::BMXMessage > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXMessageListList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *arg1 = (std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< std::shared_ptr< floo::BMXMessage > > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXRosterItem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1rosterId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->rosterId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1username(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->username();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1nickname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->nickname();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1avatarRatelUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarRatelUrl();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1avatarUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarUrl();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1avatarPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1avatarThumbnailUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarThumbnailUrl();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1avatarThumbnailPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarThumbnailPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1publicInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  floo::JSON *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::JSON *) &(arg1)->publicInfo();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1alias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  floo::JSON *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::JSON *) &(arg1)->alias();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1ext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  floo::JSON *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::JSON *) &(arg1)->ext();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1localExt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  floo::JSON *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::JSON *) &(arg1)->localExt();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1relation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  floo::BMXRosterItem::RosterRelation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXRosterItem::RosterRelation)(arg1)->relation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1isMuteNotification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isMuteNotification();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1addFriendAuthMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  floo::BMXRosterItem::AddFriendAuthMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXRosterItem::AddFriendAuthMode)(arg1)->addFriendAuthMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1authQuestion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXRosterItem *arg1 = (floo::BMXRosterItem *) 0 ;
  std::shared_ptr< floo::BMXRosterItem > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterItem > **)&jarg1;
  arg1 = (floo::BMXRosterItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->authQuestion();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXRosterService_1Application(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXRosterService::Application *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXRosterService::Application *)new floo::BMXRosterService::Application();
  
  *(std::shared_ptr<  floo::BMXRosterService::Application > **)&jresult = result ? new std::shared_ptr<  floo::BMXRosterService::Application >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXRosterService_1Application(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXRosterService::Application *arg1 = (floo::BMXRosterService::Application *) 0 ;
  std::shared_ptr< floo::BMXRosterService::Application > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterService::Application > **)&jarg1;
  arg1 = (floo::BMXRosterService::Application *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1Application_1mRosterId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXRosterService::Application *arg1 = (floo::BMXRosterService::Application *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXRosterService::Application > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterService::Application > **)&jarg1;
  arg1 = (floo::BMXRosterService::Application *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mRosterId = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1Application_1mRosterId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXRosterService::Application *arg1 = (floo::BMXRosterService::Application *) 0 ;
  std::shared_ptr< floo::BMXRosterService::Application > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterService::Application > **)&jarg1;
  arg1 = (floo::BMXRosterService::Application *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mRosterId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1Application_1mReason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXRosterService::Application *arg1 = (floo::BMXRosterService::Application *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXRosterService::Application > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterService::Application > **)&jarg1;
  arg1 = (floo::BMXRosterService::Application *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mReason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1Application_1mReason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXRosterService::Application *arg1 = (floo::BMXRosterService::Application *) 0 ;
  std::shared_ptr< floo::BMXRosterService::Application > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterService::Application > **)&jarg1;
  arg1 = (floo::BMXRosterService::Application *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->mReason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1Application_1mStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXRosterService::Application *arg1 = (floo::BMXRosterService::Application *) 0 ;
  floo::BMXRosterService::ApplicationStatus arg2 ;
  std::shared_ptr< floo::BMXRosterService::Application > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterService::Application > **)&jarg1;
  arg1 = (floo::BMXRosterService::Application *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXRosterService::ApplicationStatus)jarg2; 
  if (arg1) (arg1)->mStatus = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1Application_1mStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXRosterService::Application *arg1 = (floo::BMXRosterService::Application *) 0 ;
  std::shared_ptr< floo::BMXRosterService::Application > *smartarg1 = 0 ;
  floo::BMXRosterService::ApplicationStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterService::Application > **)&jarg1;
  arg1 = (floo::BMXRosterService::Application *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXRosterService::ApplicationStatus) ((arg1)->mStatus);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1Application_1mExpire_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::BMXRosterService::Application *arg1 = (floo::BMXRosterService::Application *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::BMXRosterService::Application > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterService::Application > **)&jarg1;
  arg1 = (floo::BMXRosterService::Application *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->mExpire = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1Application_1mExpire_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXRosterService::Application *arg1 = (floo::BMXRosterService::Application *) 0 ;
  std::shared_ptr< floo::BMXRosterService::Application > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXRosterService::Application > **)&jarg1;
  arg1 = (floo::BMXRosterService::Application *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->mExpire);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXRosterService(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  bool arg3 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  arg2 = *(std::vector< int64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->get(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1fetchRosterById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  int64_t arg2 ;
  bool arg3 ;
  floo::BMXRosterItemPtr *arg4 = 0 ;
  floo::BMXRosterItemPtr tempnull4 ;
  floo::BMXErrorCode result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(floo::BMXRosterService **)&jarg1;
  arg2 = (int64_t)jarg2;
  arg3 = jarg3 ? true : false;
  floo::BMXRosterItemPtr tmpPtr = floo::BMXRosterItemPtr();
  result = (floo::BMXErrorCode)(arg1)->fetchRosterById(arg2,arg3,tmpPtr);

  GET_INT_VECTOR(jarg4);
  jlong jPtr = 0;
  *(floo::BMXRosterItemPtr **)&jPtr = tmpPtr ? new floo::BMXRosterItemPtr(tmpPtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1search_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  int64_t arg2 ;
  bool arg3 ;
  floo::BMXRosterItemPtr *arg4 = 0 ;
  floo::BMXRosterItemPtr tempnull4 ;
  floo::BMXErrorCode result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(floo::BMXRosterService **)&jarg1;
  arg2 = (int64_t)jarg2;
  arg3 = jarg3 ? true : false;
  floo::BMXRosterItemPtr tmpPtr = floo::BMXRosterItemPtr();
  result = (floo::BMXErrorCode)(arg1)->search(arg2,arg3,tmpPtr);

  GET_INT_VECTOR(jarg4);
  jlong jPtr = 0;
  *(floo::BMXRosterItemPtr **)&jPtr = tmpPtr ? new floo::BMXRosterItemPtr(tmpPtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result;
  return jresult;
}

SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1fetchRosterByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  floo::BMXRosterItemPtr *arg4 = 0 ;
  floo::BMXRosterItemPtr tempnull4 ;
  floo::BMXErrorCode result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(floo::BMXRosterService **)&jarg1;
  if(!jarg2) {
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
  return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);
  arg3 = jarg3 ? true : false;
  floo::BMXRosterItemPtr tmpPtr = floo::BMXRosterItemPtr();
  result = (floo::BMXErrorCode)(arg1)->fetchRosterByName((std::string const &)*arg2,arg3,tmpPtr);

  GET_INT_VECTOR(jarg4);
  jlong jPtr = 0;
  *(floo::BMXRosterItemPtr **)&jPtr = tmpPtr ? new floo::BMXRosterItemPtr(tmpPtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1search_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  floo::BMXRosterItemPtr *arg4 = 0 ;
  floo::BMXRosterItemPtr tempnull4 ;
  floo::BMXErrorCode result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(floo::BMXRosterService **)&jarg1;
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);
  arg3 = jarg3 ? true : false;
  floo::BMXRosterItemPtr tmpPtr = floo::BMXRosterItemPtr();
  result = (floo::BMXErrorCode)(arg1)->search((std::string const &)*arg2,arg3,tmpPtr);

  GET_INT_VECTOR(jarg4);
  jlong jPtr = 0;
  *(floo::BMXRosterItemPtr **)&jPtr = tmpPtr ? new floo::BMXRosterItemPtr(tmpPtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1fetchRostersByIdList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  floo::BMXRosterList *arg3 = 0 ;
  bool arg4 ;
  floo::BMXErrorCode result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXRosterService **)&jarg1;
  arg2 = *(std::vector< int64_t > **)&jarg2;
  if (!arg2) {
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
  return 0;
  }
  arg3 = *(floo::BMXRosterList **)&jarg3;
  if (!arg3) {
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXRosterList & reference is null");
  return 0;
  }
  arg4 = jarg4 ? true : false;
  result = (floo::BMXErrorCode)(arg1)->fetchRostersByIdList((std::vector< int64_t > const &)*arg2,*arg3,arg4);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1search_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  floo::BMXRosterList *arg3 = 0 ;
  bool arg4 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  arg2 = *(std::vector< int64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return 0;
  } 
  arg3 = *(floo::BMXRosterList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXRosterList & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->search((std::vector< int64_t > const &)*arg2,*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1setItemLocalExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  floo::BMXRosterItemPtr arg2 ;
  floo::JSON *arg3 = 0 ;
  floo::BMXRosterItemPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  argp2 = *(floo::BMXRosterItemPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  floo::JSON arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setItemLocalExtension(arg2,(floo::JSON const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1setItemExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  floo::BMXRosterItemPtr arg2 ;
  floo::JSON *arg3 = 0 ;
  floo::BMXRosterItemPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  argp2 = *(floo::BMXRosterItemPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  floo::JSON arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setItemExtension(arg2,(floo::JSON const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1setItemAlias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  floo::BMXRosterItemPtr arg2 ;
  floo::JSON *arg3 = 0 ;
  floo::BMXRosterItemPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  argp2 = *(floo::BMXRosterItemPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  floo::JSON arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setItemAlias(arg2,(floo::JSON const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1setItemMuteNotification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  floo::BMXRosterItemPtr arg2 ;
  bool arg3 ;
  floo::BMXRosterItemPtr *argp2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  argp2 = *(floo::BMXRosterItemPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setItemMuteNotification(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1getApplicationList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  floo::BMXRosterService::BMXRosterApplicationResultPagePtr *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  floo::BMXRosterService::BMXRosterApplicationResultPagePtr tempnull2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 

  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);

  arg4 = (int)jarg4;

  floo::BMXRosterService::BMXRosterApplicationResultPagePtr tmpPtr = floo::BMXRosterService::BMXRosterApplicationResultPagePtr();
  result = (floo::BMXErrorCode)(arg1)->getApplicationList(tmpPtr,(std::string const &)*arg3,arg4);

  GET_INT_VECTOR(jarg2);
  jlong jPtr = 0;
  *(floo::BMXRosterService::BMXRosterApplicationResultPagePtr **)&jPtr = tmpPtr ? new floo::BMXRosterService::BMXRosterApplicationResultPagePtr(tmpPtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1getApplicationList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  floo::BMXRosterService::BMXRosterApplicationResultPagePtr *arg2 = 0 ;
  std::string *arg3 = 0 ;
  floo::BMXRosterService::BMXRosterApplicationResultPagePtr tempnull2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  arg2 = jarg2 ? *(floo::BMXRosterService::BMXRosterApplicationResultPagePtr **)&jarg2 : &tempnull2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
//  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);
//  if (!arg3_pstr) return 0;
//  std::string arg3_str(arg3_pstr);
//  arg3 = &arg3_str;
//  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);
  std::string cursor;
  result = (floo::BMXErrorCode)(arg1)->getApplicationList(*arg2,cursor);
  jresult = (jint)result; 
  return jresult;
}

SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1apply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  int64_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (floo::BMXErrorCode)(arg1)->apply(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1apply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  int64_t arg2 ;
  std::string *arg3 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->apply(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  int64_t arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (floo::BMXErrorCode)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  int64_t arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (floo::BMXErrorCode)(arg1)->accept(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1decline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  int64_t arg2 ;
  std::string *arg3 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->decline(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1block(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  int64_t arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (floo::BMXErrorCode)(arg1)->block(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1unblock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  int64_t arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (floo::BMXErrorCode)(arg1)->unblock(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1getBlockList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  bool arg3 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  arg2 = *(std::vector< int64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->getBlockList(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}

SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1downloadAvatar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jobject jarg4) {
  jint jresult = 0 ;
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  floo::BMXRosterItemPtr arg2 ;
  bool arg3 ;
  floo::BMXRosterService::Callback arg4 ;
  floo::BMXRosterItemPtr *argp2 ;
  floo::BMXRosterService::Callback *argp4 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  argp2 = *(floo::BMXRosterItemPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
//  argp4 = *(floo::BMXRosterService::Callback **)&jarg4;
//  if (!argp4) {
//    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null floo::BMXRosterService::Callback");
//    return 0;
//  }
//  arg4 = *argp4;
  jenv->GetJavaVM(&g_VM);
  result = (floo::BMXErrorCode)(arg1)->downloadAvatar(arg2,arg3,createCallback(jenv, jarg4));

  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1addRosterListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  floo::BMXRosterServiceListener *arg2 = (floo::BMXRosterServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  arg2 = *(floo::BMXRosterServiceListener **)&jarg2; 
  (arg1)->addRosterListener(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterService_1removeRosterListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXRosterService *arg1 = (floo::BMXRosterService *) 0 ;
  floo::BMXRosterServiceListener *arg2 = (floo::BMXRosterServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXRosterService **)&jarg1; 
  arg2 = *(floo::BMXRosterServiceListener **)&jarg2; 
  (arg1)->removeRosterListener(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXRosterServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onFriendAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->onFriendAdded(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onFriendAddedSwigExplicitBMXRosterServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->floo::BMXRosterServiceListener::onFriendAdded(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onFriendRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->onFriendRemoved(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onFriendRemovedSwigExplicitBMXRosterServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->floo::BMXRosterServiceListener::onFriendRemoved(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onApplied(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->onApplied(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onAppliedSwigExplicitBMXRosterServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->floo::BMXRosterServiceListener::onApplied(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onApplicationAccepted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->onApplicationAccepted(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onApplicationAcceptedSwigExplicitBMXRosterServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->floo::BMXRosterServiceListener::onApplicationAccepted(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onApplicationDeclined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->onApplicationDeclined(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onApplicationDeclinedSwigExplicitBMXRosterServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->floo::BMXRosterServiceListener::onApplicationDeclined(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onBlockListAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->onBlockListAdded(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onBlockListAddedSwigExplicitBMXRosterServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->floo::BMXRosterServiceListener::onBlockListAdded(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onBlockListRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->onBlockListRemoved(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onBlockListRemovedSwigExplicitBMXRosterServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->floo::BMXRosterServiceListener::onBlockListRemoved(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onRosterInfoUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  floo::BMXRosterItemPtr arg2 ;
  floo::BMXRosterItemPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  argp2 = *(floo::BMXRosterItemPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->onRosterInfoUpdate(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onRosterInfoUpdateSwigExplicitBMXRosterServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  floo::BMXRosterItemPtr arg2 ;
  floo::BMXRosterItemPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  argp2 = *(floo::BMXRosterItemPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->floo::BMXRosterServiceListener::onRosterInfoUpdate(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onRosterListUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  (arg1)->onRosterListUpdate();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1onRosterListUpdateSwigExplicitBMXRosterServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXRosterServiceListener *arg1 = (floo::BMXRosterServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXRosterServiceListener **)&jarg1; 
  (arg1)->floo::BMXRosterServiceListener::onRosterListUpdate();
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXRosterServiceListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXRosterServiceListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXRosterServiceListener *)new SwigDirector_BMXRosterServiceListener(jenv);
  *(floo::BMXRosterServiceListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  floo::BMXRosterServiceListener *obj = *((floo::BMXRosterServiceListener **)&objarg);
  (void)jcls;
  SwigDirector_BMXRosterServiceListener *director = dynamic_cast<SwigDirector_BMXRosterServiceListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXRosterServiceListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  floo::BMXRosterServiceListener *obj = *((floo::BMXRosterServiceListener **)&objarg);
  SwigDirector_BMXRosterServiceListener *director = dynamic_cast<SwigDirector_BMXRosterServiceListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXUserProfile_1AuthQuestion(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXUserProfile::AuthQuestion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXUserProfile::AuthQuestion *)new floo::BMXUserProfile::AuthQuestion();
  *(floo::BMXUserProfile::AuthQuestion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1AuthQuestion_1mQuestion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXUserProfile::AuthQuestion *arg1 = (floo::BMXUserProfile::AuthQuestion *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::AuthQuestion **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mQuestion = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1AuthQuestion_1mQuestion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXUserProfile::AuthQuestion *arg1 = (floo::BMXUserProfile::AuthQuestion *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::AuthQuestion **)&jarg1; 
  result = (std::string *) & ((arg1)->mQuestion);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1AuthQuestion_1mAnswer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXUserProfile::AuthQuestion *arg1 = (floo::BMXUserProfile::AuthQuestion *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::AuthQuestion **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mAnswer = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1AuthQuestion_1mAnswer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXUserProfile::AuthQuestion *arg1 = (floo::BMXUserProfile::AuthQuestion *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::AuthQuestion **)&jarg1; 
  result = (std::string *) & ((arg1)->mAnswer);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXUserProfile_1AuthQuestion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXUserProfile::AuthQuestion *arg1 = (floo::BMXUserProfile::AuthQuestion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXUserProfile::AuthQuestion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXUserProfile_1MessageSetting(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXUserProfile::MessageSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXUserProfile::MessageSetting *)new floo::BMXUserProfile::MessageSetting();
  *(floo::BMXUserProfile::MessageSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mPushEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mPushEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mPushEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  result = (bool) ((arg1)->mPushEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mPushDetail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mPushDetail = arg2;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mPushDetail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  result = (bool) ((arg1)->mPushDetail);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mPushNickname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mPushNickname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mPushNickname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  result = (std::string *) & ((arg1)->mPushNickname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mNotificationSound_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mNotificationSound = arg2;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mNotificationSound_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  result = (bool) ((arg1)->mNotificationSound);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mNotificationVibrate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mNotificationVibrate = arg2;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mNotificationVibrate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  result = (bool) ((arg1)->mNotificationVibrate);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mAutoDownloadAttachment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mAutoDownloadAttachment = arg2;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mAutoDownloadAttachment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  result = (bool) ((arg1)->mAutoDownloadAttachment);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mSilenceStartTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mSilenceStartTime = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mSilenceStartTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  result = (int) ((arg1)->mSilenceStartTime);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mSilenceEndTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mSilenceEndTime = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mSilenceEndTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  result = (int) ((arg1)->mSilenceEndTime);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mPushStartTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mPushStartTime = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mPushStartTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  result = (int) ((arg1)->mPushStartTime);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mPushEndTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mPushEndTime = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1MessageSetting_1mPushEndTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  result = (int) ((arg1)->mPushEndTime);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXUserProfile_1MessageSetting(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXUserProfile::MessageSetting *arg1 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXUserProfile::MessageSetting **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXUserProfile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1userId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->userId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  floo::BMXUserProfile::UserCategory result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXUserProfile::UserCategory)(arg1)->category();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1username(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->username();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1nickname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->nickname();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1avatarRatelUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarRatelUrl();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1avatarUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarUrl();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1avatarPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1avatarThumbnailPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarThumbnailPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1mobilePhone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->mobilePhone();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1email(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->email();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1publicInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  floo::JSON *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::JSON *) &(arg1)->publicInfo();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1privateInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  floo::JSON *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::JSON *) &(arg1)->privateInfo();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1addFriendAuthMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  floo::BMXUserProfile::AddFriendAuthMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXUserProfile::AddFriendAuthMode)(arg1)->addFriendAuthMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1authQuestion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  floo::BMXUserProfile::AuthQuestion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXUserProfile::AuthQuestion *) &(arg1)->authQuestion();
  *(floo::BMXUserProfile::AuthQuestion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1messageSetting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  floo::BMXUserProfile::MessageSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXUserProfile::MessageSetting *) &(arg1)->messageSetting();
  *(floo::BMXUserProfile::MessageSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1isAutoAcceptGroupInvite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXUserProfile *arg1 = (floo::BMXUserProfile *) 0 ;
  std::shared_ptr< floo::BMXUserProfile > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXUserProfile > **)&jarg1;
  arg1 = (floo::BMXUserProfile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isAutoAcceptGroupInvite();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1UserProfileImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  floo::UserProfileImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  result = (floo::UserProfileImpl *)new floo::UserProfileImpl(arg1);
  
  *(std::shared_ptr<  floo::UserProfileImpl > **)&jresult = result ? new std::shared_ptr<  floo::UserProfileImpl >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1UserProfileImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1userId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t)(arg1)->userId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  floo::BMXUserProfile::UserCategory result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXUserProfile::UserCategory)(arg1)->category();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1username(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->username();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1nickname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->nickname();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1avatarRatelUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarRatelUrl();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1avatarUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarUrl();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1avatarPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1avatarThumbnailPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->avatarThumbnailPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1mobilePhone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->mobilePhone();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1email(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->email();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1publicInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  floo::JSON *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::JSON *) &(arg1)->publicInfo();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1privateInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  floo::JSON *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::JSON *) &(arg1)->privateInfo();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1addFriendAuthMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  floo::BMXUserProfile::AddFriendAuthMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXUserProfile::AddFriendAuthMode)(arg1)->addFriendAuthMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1authQuestion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  floo::BMXUserProfile::AuthQuestion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXUserProfile::AuthQuestion *) &(arg1)->authQuestion();
  *(floo::BMXUserProfile::AuthQuestion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1messageSetting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  floo::BMXUserProfile::MessageSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXUserProfile::MessageSetting *) &(arg1)->messageSetting();
  *(floo::BMXUserProfile::MessageSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1isAutoAcceptGroupInvite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isAutoAcceptGroupInvite();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1calculateUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->calculateUrl((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1userId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->_userId = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1userId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->_userId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1category_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  floo::BMXUserProfile::UserCategory arg2 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXUserProfile::UserCategory)jarg2; 
  if (arg1) (arg1)->_category = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1category_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  floo::BMXUserProfile::UserCategory result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXUserProfile::UserCategory) ((arg1)->_category);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1username_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_username = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1username_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_username);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1nickname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_nickname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1nickname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_nickname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1avatarRatelUrl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_avatarRatelUrl = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1avatarRatelUrl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_avatarRatelUrl);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1avatarUrl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_avatarUrl = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1avatarUrl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_avatarUrl);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1avatarPath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_avatarPath = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1avatarPath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_avatarPath);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1avatarThumbnailPath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_avatarThumbnailPath = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1avatarThumbnailPath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_avatarThumbnailPath);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1mobilePhone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_mobilePhone = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1mobilePhone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_mobilePhone);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1email_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_email = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1email_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_email);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1publicInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  floo::JSON *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  floo::JSON arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_publicInfo = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1publicInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  floo::JSON *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::JSON *) & ((arg1)->_publicInfo);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1privateInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  floo::JSON *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  floo::JSON arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_privateInfo = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1privateInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  floo::JSON *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::JSON *) & ((arg1)->_privateInfo);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1addFriendAuthMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  floo::BMXUserProfile::AddFriendAuthMode arg2 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (floo::BMXUserProfile::AddFriendAuthMode)jarg2; 
  if (arg1) (arg1)->_addFriendAuthMode = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1addFriendAuthMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  floo::BMXUserProfile::AddFriendAuthMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXUserProfile::AddFriendAuthMode) ((arg1)->_addFriendAuthMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1authQuestion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  floo::BMXUserProfile::AuthQuestion *arg2 = (floo::BMXUserProfile::AuthQuestion *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(floo::BMXUserProfile::AuthQuestion **)&jarg2; 
  if (arg1) (arg1)->_authQuestion = *arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1authQuestion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  floo::BMXUserProfile::AuthQuestion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXUserProfile::AuthQuestion *)& ((arg1)->_authQuestion);
  *(floo::BMXUserProfile::AuthQuestion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1messageSetting_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  floo::BMXUserProfile::MessageSetting *arg2 = (floo::BMXUserProfile::MessageSetting *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(floo::BMXUserProfile::MessageSetting **)&jarg2; 
  if (arg1) (arg1)->_messageSetting = *arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1messageSetting_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  floo::BMXUserProfile::MessageSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXUserProfile::MessageSetting *)& ((arg1)->_messageSetting);
  *(floo::BMXUserProfile::MessageSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1isAutoAcceptGroupInvite_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  bool arg2 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->_isAutoAcceptGroupInvite = arg2;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1isAutoAcceptGroupInvite_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool) ((arg1)->_isAutoAcceptGroupInvite);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1token_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_token = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1token_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_token);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1tokenExpireTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->_tokenExpireTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1tokenExpireTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->_tokenExpireTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1rosterVersion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  int64_t arg2 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->_rosterVersion = arg2;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1rosterVersion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->_rosterVersion);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1encryptPubKey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_encryptPubKey = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1encryptPubKey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_encryptPubKey);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1encryptType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  int32_t arg2 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->_encryptType = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1encryptType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int32_t) ((arg1)->_encryptType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1deviceGUID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_deviceGUID = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1deviceGUID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_deviceGUID);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1deviceToken_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_deviceToken = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1deviceToken_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_deviceToken);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1cacheBaseDir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_cacheBaseDir = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1cacheBaseDir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_cacheBaseDir);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1appId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_appId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1appId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_appId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1storeToken_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_storeToken = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1storeToken_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_storeToken);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1accessKeySecret_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_accessKeySecret = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1accessKeySecret_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_accessKeySecret);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1appSecret_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_appSecret = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1appSecret_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_appSecret);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1pushAlias_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_pushAlias = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1pushAlias_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_pushAlias);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1pushToken_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_pushToken = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1pushToken_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_pushToken);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1pushCertName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_pushCertName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1pushCertName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_pushCertName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1pushCertContent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_pushCertContent = *arg2;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1pushCertContent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->_pushCertContent);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1deviceSN_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  int32_t arg2 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->_deviceSN = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1_1deviceSN_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::UserProfileImpl *arg1 = (floo::UserProfileImpl *) 0 ;
  std::shared_ptr< floo::UserProfileImpl > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::UserProfileImpl > **)&jarg1;
  arg1 = (floo::UserProfileImpl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int32_t) ((arg1)->_deviceSN);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXUserService(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1bindDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  std::string *arg2 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXErrorCode)(arg1)->bindDevice((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1getDeviceList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  floo::BMXDeviceList *arg2 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  arg2 = *(floo::BMXDeviceList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXDeviceList & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->getDeviceList(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1deleteDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  int32_t arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (floo::BMXErrorCode)(arg1)->deleteDevice(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1getProfile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  floo::BMXUserProfilePtr *arg2 = 0 ;
  bool arg3 ;
  floo::BMXUserProfilePtr tempnull2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  arg3 = jarg3 ? true : false;
  floo::BMXUserProfilePtr tmpPtr = floo::BMXUserProfilePtr();
  result = (floo::BMXErrorCode)(arg1)->getProfile(tmpPtr,arg3);

  GET_INT_VECTOR(jarg2);
  jlong jPtr = 0;
  *(floo::BMXUserProfilePtr **)&jPtr = tmpPtr ? new floo::BMXUserProfilePtr(tmpPtr) : 0;
  PUSH_INT_INTO_VECTOR;

  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1setNickname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  std::string *arg2 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setNickname((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}

SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1uploadAvatar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  std::string *arg2 = 0 ;
  floo::BMXUserService::Callback arg3 ;
  floo::BMXUserService::Callback *argp3 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
//  argp3 = *(floo::BMXUserService::Callback **)&jarg3;
//  if (!argp3) {
//    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null floo::BMXUserService::Callback");
//    return 0;
//  }
//  arg3 = *argp3;
  jenv->GetJavaVM(&g_VM);
  result = (floo::BMXErrorCode)(arg1)->uploadAvatar((std::string const &)*arg2,createCallback(jenv, jarg3));
  jresult = (jint)result; 
  return jresult;
}

SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1downloadAvatar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jobject jarg4) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  floo::BMXUserProfilePtr arg2 ;
  bool arg3 ;
  floo::BMXUserService::Callback arg4 ;
  floo::BMXUserProfilePtr *argp2 ;
  floo::BMXUserService::Callback *argp4 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  argp2 = *(floo::BMXUserProfilePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
//  argp4 = *(floo::BMXUserService::Callback **)&jarg4;
//  if (!argp4) {
//    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null floo::BMXUserService::Callback");
//    return 0;
//  }
//  arg4 = *argp4;
  jenv->GetJavaVM(&g_VM);
  result = (floo::BMXErrorCode)(arg1)->downloadAvatar(arg2,arg3,createCallback(jenv, jarg4));
  jresult = (jint)result; 
  return jresult;
}



SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1setPublicInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  std::string *arg2 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setPublicInfo((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1setPrivateInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  std::string *arg2 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setPrivateInfo((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1setAddFriendAuthMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  floo::BMXUserProfile::AddFriendAuthMode arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  arg2 = (floo::BMXUserProfile::AddFriendAuthMode)jarg2; 
  result = (floo::BMXErrorCode)(arg1)->setAddFriendAuthMode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1setAuthQuestion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  floo::BMXUserProfile::AuthQuestion *arg2 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  arg2 = *(floo::BMXUserProfile::AuthQuestion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXUserProfile::AuthQuestion const & reference is null");
    return 0;
  } 
  result = (floo::BMXErrorCode)(arg1)->setAuthQuestion((floo::BMXUserProfile::AuthQuestion const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1setEnablePush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  bool arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setEnablePush(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1setEnablePushDetaile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  bool arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setEnablePushDetaile(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1setPushNickname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  std::string *arg2 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setPushNickname((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1setPushAlias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXErrorCode)(arg1)->setPushAlias((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1setNotificationSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  bool arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setNotificationSound(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1setNotificationVibrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  bool arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setNotificationVibrate(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1setAutoDownloadAttachment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  bool arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setAutoDownloadAttachment(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1setAutoAcceptGroupInvite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  bool arg2 ;
  floo::BMXErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (floo::BMXErrorCode)(arg1)->setAutoAcceptGroupInvite(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1addUserListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  floo::BMXUserServiceListener *arg2 = (floo::BMXUserServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  arg2 = *(floo::BMXUserServiceListener **)&jarg2; 
  (arg1)->addUserListener(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserService_1removeUserListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXUserService *arg1 = (floo::BMXUserService *) 0 ;
  floo::BMXUserServiceListener *arg2 = (floo::BMXUserServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXUserService **)&jarg1; 
  arg2 = *(floo::BMXUserServiceListener **)&jarg2; 
  (arg1)->removeUserListener(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXUserServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXUserServiceListener *arg1 = (floo::BMXUserServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXUserServiceListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserServiceListener_1onConnectStatusChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXUserServiceListener *arg1 = (floo::BMXUserServiceListener *) 0 ;
  floo::BMXConnectStatus arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserServiceListener **)&jarg1; 
  arg2 = (floo::BMXConnectStatus)jarg2; 
  (arg1)->onConnectStatusChanged(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserServiceListener_1onConnectStatusChangedSwigExplicitBMXUserServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXUserServiceListener *arg1 = (floo::BMXUserServiceListener *) 0 ;
  floo::BMXConnectStatus arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserServiceListener **)&jarg1; 
  arg2 = (floo::BMXConnectStatus)jarg2; 
  (arg1)->floo::BMXUserServiceListener::onConnectStatusChanged(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserServiceListener_1onUserSignIn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXUserServiceListener *arg1 = (floo::BMXUserServiceListener *) 0 ;
  floo::BMXUserProfilePtr arg2 ;
  floo::BMXUserProfilePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXUserServiceListener **)&jarg1; 
  argp2 = *(floo::BMXUserProfilePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->onUserSignIn(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserServiceListener_1onUserSignInSwigExplicitBMXUserServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXUserServiceListener *arg1 = (floo::BMXUserServiceListener *) 0 ;
  floo::BMXUserProfilePtr arg2 ;
  floo::BMXUserProfilePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXUserServiceListener **)&jarg1; 
  argp2 = *(floo::BMXUserProfilePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->floo::BMXUserServiceListener::onUserSignIn(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserServiceListener_1onUserSignOut(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  floo::BMXUserServiceListener *arg1 = (floo::BMXUserServiceListener *) 0 ;
  floo::BMXErrorCode arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserServiceListener **)&jarg1; 
  arg2 = (floo::BMXErrorCode)jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->onUserSignOut(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserServiceListener_1onUserSignOutSwigExplicitBMXUserServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  floo::BMXUserServiceListener *arg1 = (floo::BMXUserServiceListener *) 0 ;
  floo::BMXErrorCode arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserServiceListener **)&jarg1; 
  arg2 = (floo::BMXErrorCode)jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->floo::BMXUserServiceListener::onUserSignOut(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserServiceListener_1onInfoUpdated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXUserServiceListener *arg1 = (floo::BMXUserServiceListener *) 0 ;
  floo::BMXUserProfilePtr arg2 ;
  floo::BMXUserProfilePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXUserServiceListener **)&jarg1; 
  argp2 = *(floo::BMXUserProfilePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->onInfoUpdated(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserServiceListener_1onInfoUpdatedSwigExplicitBMXUserServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXUserServiceListener *arg1 = (floo::BMXUserServiceListener *) 0 ;
  floo::BMXUserProfilePtr arg2 ;
  floo::BMXUserProfilePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXUserServiceListener **)&jarg1; 
  argp2 = *(floo::BMXUserProfilePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->floo::BMXUserServiceListener::onInfoUpdated(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserServiceListener_1onOtherDeviceSingIn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXUserServiceListener *arg1 = (floo::BMXUserServiceListener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserServiceListener **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->onOtherDeviceSingIn(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserServiceListener_1onOtherDeviceSingInSwigExplicitBMXUserServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXUserServiceListener *arg1 = (floo::BMXUserServiceListener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserServiceListener **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->floo::BMXUserServiceListener::onOtherDeviceSingIn(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserServiceListener_1onOtherDeviceSingOut(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXUserServiceListener *arg1 = (floo::BMXUserServiceListener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserServiceListener **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->onOtherDeviceSingOut(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserServiceListener_1onOtherDeviceSingOutSwigExplicitBMXUserServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXUserServiceListener *arg1 = (floo::BMXUserServiceListener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXUserServiceListener **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->floo::BMXUserServiceListener::onOtherDeviceSingOut(arg2);
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXUserServiceListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXUserServiceListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXUserServiceListener *)new SwigDirector_BMXUserServiceListener(jenv);
  *(floo::BMXUserServiceListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserServiceListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  floo::BMXUserServiceListener *obj = *((floo::BMXUserServiceListener **)&objarg);
  (void)jcls;
  SwigDirector_BMXUserServiceListener *director = dynamic_cast<SwigDirector_BMXUserServiceListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXUserServiceListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  floo::BMXUserServiceListener *obj = *((floo::BMXUserServiceListener **)&objarg);
  SwigDirector_BMXUserServiceListener *director = dynamic_cast<SwigDirector_BMXUserServiceListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXVideoAttachment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  floo::BMXMessageAttachment::Size *arg3 = 0 ;
  std::string *arg4 = 0 ;
  floo::BMXVideoAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  arg3 = *(floo::BMXMessageAttachment::Size **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageAttachment::Size const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (floo::BMXVideoAttachment *)new floo::BMXVideoAttachment((std::string const &)*arg1,arg2,(floo::BMXMessageAttachment::Size const &)*arg3,(std::string const &)*arg4);
  
  *(std::shared_ptr<  floo::BMXVideoAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXVideoAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXVideoAttachment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  floo::BMXMessageAttachment::Size *arg3 = 0 ;
  floo::BMXVideoAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  arg3 = *(floo::BMXMessageAttachment::Size **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageAttachment::Size const & reference is null");
    return 0;
  } 
  result = (floo::BMXVideoAttachment *)new floo::BMXVideoAttachment((std::string const &)*arg1,arg2,(floo::BMXMessageAttachment::Size const &)*arg3);
  
  *(std::shared_ptr<  floo::BMXVideoAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXVideoAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXVideoAttachment_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  floo::BMXMessageAttachment::Size *arg4 = 0 ;
  std::string *arg5 = 0 ;
  floo::BMXVideoAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = *(floo::BMXMessageAttachment::Size **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageAttachment::Size const & reference is null");
    return 0;
  } 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (floo::BMXVideoAttachment *)new floo::BMXVideoAttachment((std::string const &)*arg1,(std::string const &)*arg2,arg3,(floo::BMXMessageAttachment::Size const &)*arg4,(std::string const &)*arg5);
  
  *(std::shared_ptr<  floo::BMXVideoAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXVideoAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXVideoAttachment_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  floo::BMXMessageAttachment::Size *arg4 = 0 ;
  floo::BMXVideoAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = *(floo::BMXMessageAttachment::Size **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageAttachment::Size const & reference is null");
    return 0;
  } 
  result = (floo::BMXVideoAttachment *)new floo::BMXVideoAttachment((std::string const &)*arg1,(std::string const &)*arg2,arg3,(floo::BMXMessageAttachment::Size const &)*arg4);
  
  *(std::shared_ptr<  floo::BMXVideoAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXVideoAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXVideoAttachment_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jstring jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  floo::BMXMessageAttachment::Size *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t arg5 ;
  floo::BMXVideoAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  arg3 = *(floo::BMXMessageAttachment::Size **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageAttachment::Size const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int64_t)jarg5; 
  result = (floo::BMXVideoAttachment *)new floo::BMXVideoAttachment((std::string const &)*arg1,arg2,(floo::BMXMessageAttachment::Size const &)*arg3,(std::string const &)*arg4,arg5);
  
  *(std::shared_ptr<  floo::BMXVideoAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXVideoAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXVideoAttachment_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  floo::BMXMessageAttachment::Size *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int64_t arg6 ;
  floo::BMXVideoAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = *(floo::BMXMessageAttachment::Size **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXMessageAttachment::Size const & reference is null");
    return 0;
  } 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (int64_t)jarg6; 
  result = (floo::BMXVideoAttachment *)new floo::BMXVideoAttachment((std::string const &)*arg1,(std::string const &)*arg2,arg3,(floo::BMXMessageAttachment::Size const &)*arg4,(std::string const &)*arg5,arg6);
  
  *(std::shared_ptr<  floo::BMXVideoAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXVideoAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXVideoAttachment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXVideoAttachment *arg1 = (floo::BMXVideoAttachment *) 0 ;
  std::shared_ptr< floo::BMXVideoAttachment > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXVideoAttachment > **)&jarg1;
  arg1 = (floo::BMXVideoAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXVideoAttachment_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXVideoAttachment *arg1 = (floo::BMXVideoAttachment *) 0 ;
  std::shared_ptr< floo::BMXVideoAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachment::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXVideoAttachment > **)&jarg1;
  arg1 = (floo::BMXVideoAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessageAttachment::Type)((floo::BMXVideoAttachment const *)arg1)->type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXVideoAttachment_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXVideoAttachment *arg1 = (floo::BMXVideoAttachment *) 0 ;
  std::shared_ptr< floo::BMXVideoAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachmentPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXVideoAttachment > **)&jarg1;
  arg1 = (floo::BMXVideoAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((floo::BMXVideoAttachment const *)arg1)->clone();
  *(floo::BMXMessageAttachmentPtr **)&jresult = result ? new floo::BMXMessageAttachmentPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXVideoAttachment_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXVideoAttachment *arg1 = (floo::BMXVideoAttachment *) 0 ;
  std::shared_ptr< floo::BMXVideoAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachment::Size *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXVideoAttachment > **)&jarg1;
  arg1 = (floo::BMXVideoAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessageAttachment::Size *) &((floo::BMXVideoAttachment const *)arg1)->size();
  *(floo::BMXMessageAttachment::Size **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXVideoAttachment_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXVideoAttachment *arg1 = (floo::BMXVideoAttachment *) 0 ;
  std::shared_ptr< floo::BMXVideoAttachment const > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXVideoAttachment > **)&jarg1;
  arg1 = (floo::BMXVideoAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int32_t)((floo::BMXVideoAttachment const *)arg1)->duration();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXVideoAttachment_1setThumbnail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXVideoAttachment *arg1 = (floo::BMXVideoAttachment *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXVideoAttachment > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXVideoAttachment > **)&jarg1;
  arg1 = (floo::BMXVideoAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setThumbnail((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXVideoAttachment_1thumbnailPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXVideoAttachment *arg1 = (floo::BMXVideoAttachment *) 0 ;
  std::shared_ptr< floo::BMXVideoAttachment const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXVideoAttachment > **)&jarg1;
  arg1 = (floo::BMXVideoAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((floo::BMXVideoAttachment const *)arg1)->thumbnailPath();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXVideoAttachment_1thumbnailUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXVideoAttachment *arg1 = (floo::BMXVideoAttachment *) 0 ;
  std::shared_ptr< floo::BMXVideoAttachment const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXVideoAttachment > **)&jarg1;
  arg1 = (floo::BMXVideoAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((floo::BMXVideoAttachment const *)arg1)->thumbnailUrl();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXVideoAttachment_1setThumbnailRatelUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  floo::BMXVideoAttachment *arg1 = (floo::BMXVideoAttachment *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< floo::BMXVideoAttachment > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXVideoAttachment > **)&jarg1;
  arg1 = (floo::BMXVideoAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setThumbnailRatelUrl((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXVideoAttachment_1thumbnailRatelUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXVideoAttachment *arg1 = (floo::BMXVideoAttachment *) 0 ;
  std::shared_ptr< floo::BMXVideoAttachment const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXVideoAttachment > **)&jarg1;
  arg1 = (floo::BMXVideoAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((floo::BMXVideoAttachment const *)arg1)->thumbnailRatelUrl();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXVideoAttachment_1thumbnailDownloadStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXVideoAttachment *arg1 = (floo::BMXVideoAttachment *) 0 ;
  std::shared_ptr< floo::BMXVideoAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachment::DownloadStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXVideoAttachment > **)&jarg1;
  arg1 = (floo::BMXVideoAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessageAttachment::DownloadStatus)((floo::BMXVideoAttachment const *)arg1)->thumbnailDownloadStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXVideoAttachment_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessageAttachment *arg1 = (floo::BMXMessageAttachment *) 0 ;
  std::shared_ptr< floo::BMXMessageAttachment > *smartarg1 = 0 ;
  floo::BMXVideoAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageAttachment > **)&jarg1;
  arg1 = (floo::BMXMessageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  {
    result = (floo::BMXVideoAttachment *)floo_BMXVideoAttachment_dynamic_cast(arg1);
    if (!result) {
      jclass excep = jenv->FindClass("java/lang/ClassCastException");
      if (excep) {
        jenv->ThrowNew(excep, "dynamic_cast exception");
      }
    }
  }
  
  *(std::shared_ptr<  floo::BMXVideoAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXVideoAttachment >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXVoiceAttachment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  floo::BMXVoiceAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (floo::BMXVoiceAttachment *)new floo::BMXVoiceAttachment((std::string const &)*arg1,arg2,(std::string const &)*arg3);
  
  *(std::shared_ptr<  floo::BMXVoiceAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXVoiceAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXVoiceAttachment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  floo::BMXVoiceAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  result = (floo::BMXVoiceAttachment *)new floo::BMXVoiceAttachment((std::string const &)*arg1,arg2);
  
  *(std::shared_ptr<  floo::BMXVoiceAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXVoiceAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXVoiceAttachment_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int64_t arg4 ;
  floo::BMXVoiceAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int64_t)jarg4; 
  result = (floo::BMXVoiceAttachment *)new floo::BMXVoiceAttachment((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4);
  
  *(std::shared_ptr<  floo::BMXVoiceAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXVoiceAttachment >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXVoiceAttachment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXVoiceAttachment *arg1 = (floo::BMXVoiceAttachment *) 0 ;
  std::shared_ptr< floo::BMXVoiceAttachment > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXVoiceAttachment > **)&jarg1;
  arg1 = (floo::BMXVoiceAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXVoiceAttachment_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXVoiceAttachment *arg1 = (floo::BMXVoiceAttachment *) 0 ;
  std::shared_ptr< floo::BMXVoiceAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachment::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXVoiceAttachment > **)&jarg1;
  arg1 = (floo::BMXVoiceAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (floo::BMXMessageAttachment::Type)((floo::BMXVoiceAttachment const *)arg1)->type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXVoiceAttachment_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXVoiceAttachment *arg1 = (floo::BMXVoiceAttachment *) 0 ;
  std::shared_ptr< floo::BMXVoiceAttachment const > *smartarg1 = 0 ;
  floo::BMXMessageAttachmentPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXVoiceAttachment > **)&jarg1;
  arg1 = (floo::BMXVoiceAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((floo::BMXVoiceAttachment const *)arg1)->clone();
  *(floo::BMXMessageAttachmentPtr **)&jresult = result ? new floo::BMXMessageAttachmentPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXVoiceAttachment_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXVoiceAttachment *arg1 = (floo::BMXVoiceAttachment *) 0 ;
  std::shared_ptr< floo::BMXVoiceAttachment const > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const floo::BMXVoiceAttachment > **)&jarg1;
  arg1 = (floo::BMXVoiceAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int32_t)((floo::BMXVoiceAttachment const *)arg1)->duration();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXVoiceAttachment_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXMessageAttachment *arg1 = (floo::BMXMessageAttachment *) 0 ;
  std::shared_ptr< floo::BMXMessageAttachment > *smartarg1 = 0 ;
  floo::BMXVoiceAttachment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  floo::BMXMessageAttachment > **)&jarg1;
  arg1 = (floo::BMXMessageAttachment *)(smartarg1 ? smartarg1->get() : 0); 
  {
    result = (floo::BMXVoiceAttachment *)floo_BMXVoiceAttachment_dynamic_cast(arg1);
    if (!result) {
      jclass excep = jenv->FindClass("java/lang/ClassCastException");
      if (excep) {
        jenv->ThrowNew(excep, "dynamic_cast exception");
      }
    }
  }
  
  *(std::shared_ptr<  floo::BMXVoiceAttachment > **)&jresult = result ? new std::shared_ptr<  floo::BMXVoiceAttachment >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onGroupCreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->onGroupCreate(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onGroupCreateSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->floo::BMXGroupServiceListener::onGroupCreate(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onGroupListUpdate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  arg2 = *(floo::BMXGroupList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupList const & reference is null");
    return ;
  } 
  (arg1)->onGroupListUpdate((floo::BMXGroupList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onGroupListUpdateSwigExplicitBMXGroupServiceListener_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  arg2 = *(floo::BMXGroupList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "floo::BMXGroupList const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXGroupServiceListener::onGroupListUpdate((floo::BMXGroupList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onGroupJoined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->onGroupJoined(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onGroupJoinedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->floo::BMXGroupServiceListener::onGroupJoined(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onGroupLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::string *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->onGroupLeft(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onGroupLeftSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::string *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->floo::BMXGroupServiceListener::onGroupLeft(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onInvitated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->onInvitated(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onInvitatedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->floo::BMXGroupServiceListener::onInvitated(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onInvitationAccepted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->onInvitationAccepted(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onInvitationAcceptedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->floo::BMXGroupServiceListener::onInvitationAccepted(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onInvitationDeclined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->onInvitationDeclined(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onInvitationDeclinedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->floo::BMXGroupServiceListener::onInvitationDeclined(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onApplied(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->onApplied(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onAppliedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->floo::BMXGroupServiceListener::onApplied(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onApplicationAccepted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->onApplicationAccepted(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onApplicationAcceptedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->floo::BMXGroupServiceListener::onApplicationAccepted(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onApplicationDeclined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->onApplicationDeclined(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onApplicationDeclinedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->floo::BMXGroupServiceListener::onApplicationDeclined(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onMembersBanned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  int64_t arg4 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return ;
  } 
  arg4 = (int64_t)jarg4; 
  (arg1)->onMembersBanned(arg2,(std::vector< int64_t > const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onMembersBannedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  int64_t arg4 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return ;
  } 
  arg4 = (int64_t)jarg4; 
  (arg1)->floo::BMXGroupServiceListener::onMembersBanned(arg2,(std::vector< int64_t > const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onMembersUnbanned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return ;
  } 
  (arg1)->onMembersUnbanned(arg2,(std::vector< int64_t > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onMembersUnbannedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXGroupServiceListener::onMembersUnbanned(arg2,(std::vector< int64_t > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onMemberJoined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  (arg1)->onMemberJoined(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onMemberJoinedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  (arg1)->floo::BMXGroupServiceListener::onMemberJoined(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onMemberLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->onMemberLeft(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onMemberLeftSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->floo::BMXGroupServiceListener::onMemberLeft(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onAdminsAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return ;
  } 
  (arg1)->onAdminsAdded(arg2,(std::vector< int64_t > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onAdminsAddedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXGroupServiceListener::onAdminsAdded(arg2,(std::vector< int64_t > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onAdminsRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return ;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->onAdminsRemoved(arg2,(std::vector< int64_t > const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onAdminsRemovedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return ;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->floo::BMXGroupServiceListener::onAdminsRemoved(arg2,(std::vector< int64_t > const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onOwnerAssigned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->onOwnerAssigned(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onOwnerAssignedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->floo::BMXGroupServiceListener::onOwnerAssigned(arg2);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onGroupInfoUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::UpdateInfoType arg3 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXGroup::UpdateInfoType)jarg3; 
  (arg1)->onGroupInfoUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onGroupInfoUpdateSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::UpdateInfoType arg3 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (floo::BMXGroup::UpdateInfoType)jarg3; 
  (arg1)->floo::BMXGroupServiceListener::onGroupInfoUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onMemberChangeNickName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->onMemberChangeNickName(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onMemberChangeNickNameSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (int64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->floo::BMXGroupServiceListener::onMemberChangeNickName(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onAnnouncementUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::AnnouncementPtr arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroup::AnnouncementPtr *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(floo::BMXGroup::AnnouncementPtr **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->onAnnouncementUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onAnnouncementUpdateSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::AnnouncementPtr arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroup::AnnouncementPtr *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(floo::BMXGroup::AnnouncementPtr **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->floo::BMXGroupServiceListener::onAnnouncementUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onSharedFileUploaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::SharedFilePtr arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroup::SharedFilePtr *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(floo::BMXGroup::SharedFilePtr **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->onSharedFileUploaded(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onSharedFileUploadedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::SharedFilePtr arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroup::SharedFilePtr *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(floo::BMXGroup::SharedFilePtr **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->floo::BMXGroupServiceListener::onSharedFileUploaded(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onSharedFileDeleted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::SharedFilePtr arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroup::SharedFilePtr *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(floo::BMXGroup::SharedFilePtr **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->onSharedFileDeleted(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onSharedFileDeletedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::SharedFilePtr arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroup::SharedFilePtr *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(floo::BMXGroup::SharedFilePtr **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->floo::BMXGroupServiceListener::onSharedFileDeleted(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onSharedFileUpdated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::SharedFilePtr arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroup::SharedFilePtr *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(floo::BMXGroup::SharedFilePtr **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->onSharedFileUpdated(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onSharedFileUpdatedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  floo::BMXGroup::SharedFilePtr arg3 ;
  floo::BMXGroupPtr *argp2 ;
  floo::BMXGroup::SharedFilePtr *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(floo::BMXGroup::SharedFilePtr **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->floo::BMXGroupServiceListener::onSharedFileUpdated(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onBlockListAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return ;
  } 
  (arg1)->onBlockListAdded(arg2,(std::vector< int64_t > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onBlockListAddedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXGroupServiceListener::onBlockListAdded(arg2,(std::vector< int64_t > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onBlockListRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return ;
  } 
  (arg1)->onBlockListRemoved(arg2,(std::vector< int64_t > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onBlockListRemovedSwigExplicitBMXGroupServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  floo::BMXGroupPtr arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  floo::BMXGroupPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  argp2 = *(floo::BMXGroupPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = *(std::vector< int64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int64_t > const & reference is null");
    return ;
  } 
  (arg1)->floo::BMXGroupServiceListener::onBlockListRemoved(arg2,(std::vector< int64_t > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onGroupListUpdate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  (arg1)->onGroupListUpdate();
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1onGroupListUpdateSwigExplicitBMXGroupServiceListener_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  floo::BMXGroupServiceListener *arg1 = (floo::BMXGroupServiceListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXGroupServiceListener **)&jarg1; 
  (arg1)->floo::BMXGroupServiceListener::onGroupListUpdate();
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXGroupServiceListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXGroupServiceListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXGroupServiceListener *)new SwigDirector_BMXGroupServiceListener(jenv);
  *(floo::BMXGroupServiceListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  floo::BMXGroupServiceListener *obj = *((floo::BMXGroupServiceListener **)&objarg);
  (void)jcls;
  SwigDirector_BMXGroupServiceListener *director = dynamic_cast<SwigDirector_BMXGroupServiceListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXGroupServiceListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  floo::BMXGroupServiceListener *obj = *((floo::BMXGroupServiceListener **)&objarg);
  SwigDirector_BMXGroupServiceListener *director = dynamic_cast<SwigDirector_BMXGroupServiceListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_new_1BMXPushUserProfile_1MessagePushSetting(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floo::BMXPushUserProfile::MessagePushSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (floo::BMXPushUserProfile::MessagePushSetting *)new floo::BMXPushUserProfile::MessagePushSetting();
  *(floo::BMXPushUserProfile::MessagePushSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1MessagePushSetting_1mPushEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  floo::BMXPushUserProfile::MessagePushSetting *arg1 = (floo::BMXPushUserProfile::MessagePushSetting *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushUserProfile::MessagePushSetting **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mPushEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1MessagePushSetting_1mPushEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  floo::BMXPushUserProfile::MessagePushSetting *arg1 = (floo::BMXPushUserProfile::MessagePushSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushUserProfile::MessagePushSetting **)&jarg1; 
  result = (bool) ((arg1)->mPushEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1MessagePushSetting_1mSilenceStartTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXPushUserProfile::MessagePushSetting *arg1 = (floo::BMXPushUserProfile::MessagePushSetting *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushUserProfile::MessagePushSetting **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mSilenceStartTime = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1MessagePushSetting_1mSilenceStartTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXPushUserProfile::MessagePushSetting *arg1 = (floo::BMXPushUserProfile::MessagePushSetting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushUserProfile::MessagePushSetting **)&jarg1; 
  result = (int) ((arg1)->mSilenceStartTime);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1MessagePushSetting_1mSilenceEndTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXPushUserProfile::MessagePushSetting *arg1 = (floo::BMXPushUserProfile::MessagePushSetting *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushUserProfile::MessagePushSetting **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mSilenceEndTime = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1MessagePushSetting_1mSilenceEndTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXPushUserProfile::MessagePushSetting *arg1 = (floo::BMXPushUserProfile::MessagePushSetting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushUserProfile::MessagePushSetting **)&jarg1; 
  result = (int) ((arg1)->mSilenceEndTime);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1MessagePushSetting_1mPushStartTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXPushUserProfile::MessagePushSetting *arg1 = (floo::BMXPushUserProfile::MessagePushSetting *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushUserProfile::MessagePushSetting **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mPushStartTime = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1MessagePushSetting_1mPushStartTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXPushUserProfile::MessagePushSetting *arg1 = (floo::BMXPushUserProfile::MessagePushSetting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushUserProfile::MessagePushSetting **)&jarg1; 
  result = (int) ((arg1)->mPushStartTime);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1MessagePushSetting_1mPushEndTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floo::BMXPushUserProfile::MessagePushSetting *arg1 = (floo::BMXPushUserProfile::MessagePushSetting *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushUserProfile::MessagePushSetting **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mPushEndTime = arg2;
}


SWIGEXPORT jint JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1MessagePushSetting_1mPushEndTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floo::BMXPushUserProfile::MessagePushSetting *arg1 = (floo::BMXPushUserProfile::MessagePushSetting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floo::BMXPushUserProfile::MessagePushSetting **)&jarg1; 
  result = (int) ((arg1)->mPushEndTime);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXPushUserProfile_1MessagePushSetting(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXPushUserProfile::MessagePushSetting *arg1 = (floo::BMXPushUserProfile::MessagePushSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floo::BMXPushUserProfile::MessagePushSetting **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_delete_1BMXPushUserProfile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floo::BMXPushUserProfile *arg1 = (floo::BMXPushUserProfile *) 0 ;
  std::shared_ptr< floo::BMXPushUserProfile > *smartarg1 = 0 ;

  (void)jenv;
  (void)jcls;
  smartarg1 = *(std::shared_ptr<  floo::BMXPushUserProfile > **)&jarg1;
  arg1 = (floo::BMXPushUserProfile *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1userId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXPushUserProfile *arg1 = (floo::BMXPushUserProfile *) 0 ;
  std::shared_ptr< floo::BMXPushUserProfile > *smartarg1 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  smartarg1 = *(std::shared_ptr<  floo::BMXPushUserProfile > **)&jarg1;
  arg1 = (floo::BMXPushUserProfile *)(smartarg1 ? smartarg1->get() : 0);
  result = (int64_t)(arg1)->userId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1pushAlias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXPushUserProfile *arg1 = (floo::BMXPushUserProfile *) 0 ;
  std::shared_ptr< floo::BMXPushUserProfile > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  smartarg1 = *(std::shared_ptr<  floo::BMXPushUserProfile > **)&jarg1;
  arg1 = (floo::BMXPushUserProfile *)(smartarg1 ? smartarg1->get() : 0);
  result = (arg1)->pushAlias();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1pushToken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  floo::BMXPushUserProfile *arg1 = (floo::BMXPushUserProfile *) 0 ;
  std::shared_ptr< floo::BMXPushUserProfile > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  smartarg1 = *(std::shared_ptr<  floo::BMXPushUserProfile > **)&jarg1;
  arg1 = (floo::BMXPushUserProfile *)(smartarg1 ? smartarg1->get() : 0);
  result = (arg1)->pushToken();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1messagePushSetting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floo::BMXPushUserProfile *arg1 = (floo::BMXPushUserProfile *) 0 ;
  std::shared_ptr< floo::BMXPushUserProfile > *smartarg1 = 0 ;
  floo::BMXPushUserProfile::MessagePushSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  smartarg1 = *(std::shared_ptr<  floo::BMXPushUserProfile > **)&jarg1;
  arg1 = (floo::BMXPushUserProfile *)(smartarg1 ? smartarg1->get() : 0);
  result = (floo::BMXPushUserProfile::MessagePushSetting *) &(arg1)->messagePushSetting();
  *(floo::BMXPushUserProfile::MessagePushSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessageAttachment_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< floo::BMXMessageAttachment > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< floo::BMXMessageAttachment > **)&jarg1;
    *(std::shared_ptr< floo::BMXBaseObject > **)&baseptr = argp1 ? new std::shared_ptr< floo::BMXBaseObject >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessageConfig_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< floo::BMXMessageConfig > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< floo::BMXMessageConfig > **)&jarg1;
    *(std::shared_ptr< floo::BMXBaseObject > **)&baseptr = argp1 ? new std::shared_ptr< floo::BMXBaseObject >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessage_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< floo::BMXMessage > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< floo::BMXMessage > **)&jarg1;
    *(std::shared_ptr< floo::BMXBaseObject > **)&baseptr = argp1 ? new std::shared_ptr< floo::BMXBaseObject >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXConversation_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< floo::BMXConversation > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< floo::BMXConversation > **)&jarg1;
    *(std::shared_ptr< floo::BMXBaseObject > **)&baseptr = argp1 ? new std::shared_ptr< floo::BMXBaseObject >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXClient_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< floo::BMXClient > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< floo::BMXClient > **)&jarg1;
    *(std::shared_ptr< floo::BMXNetworkListener > **)&baseptr = argp1 ? new std::shared_ptr< floo::BMXNetworkListener >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXFileAttachment_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< floo::BMXFileAttachment > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< floo::BMXFileAttachment > **)&jarg1;
    *(std::shared_ptr< floo::BMXMessageAttachment > **)&baseptr = argp1 ? new std::shared_ptr< floo::BMXMessageAttachment >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroup_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< floo::BMXGroup > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< floo::BMXGroup > **)&jarg1;
    *(std::shared_ptr< floo::BMXBaseObject > **)&baseptr = argp1 ? new std::shared_ptr< floo::BMXBaseObject >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXImageAttachment_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< floo::BMXImageAttachment > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< floo::BMXImageAttachment > **)&jarg1;
    *(std::shared_ptr< floo::BMXFileAttachment > **)&baseptr = argp1 ? new std::shared_ptr< floo::BMXFileAttachment >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXLocationAttachment_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< floo::BMXLocationAttachment > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< floo::BMXLocationAttachment > **)&jarg1;
    *(std::shared_ptr< floo::BMXMessageAttachment > **)&baseptr = argp1 ? new std::shared_ptr< floo::BMXMessageAttachment >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXMessagePage_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(floo::BMXBaseObject **)&baseptr = *(floo::BMXResultPage< std::shared_ptr< floo::BMXMessage > > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupMemberResultPage_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(floo::BMXBaseObject **)&baseptr = *(floo::BMXResultPage< floo::BMXGroup::MemberPtr > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXGroupBannedMemberResultPage_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(floo::BMXBaseObject **)&baseptr = *(floo::BMXResultPage< floo::BMXGroup::BannedMemberPtr > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_ApplicationPage_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(floo::BMXBaseObject **)&baseptr = *(floo::BMXResultPage< std::shared_ptr< floo::BMXRosterService::Application > > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_GroupApplicationPage_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(floo::BMXBaseObject **)&baseptr = *(floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Application > > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_GroupInvitaionPage_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(floo::BMXBaseObject **)&baseptr = *(floo::BMXResultPage< std::shared_ptr< floo::BMXGroup::Invitation > > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXRosterItem_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< floo::BMXRosterItem > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< floo::BMXRosterItem > **)&jarg1;
    *(std::shared_ptr< floo::BMXBaseObject > **)&baseptr = argp1 ? new std::shared_ptr< floo::BMXBaseObject >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXUserProfile_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< floo::BMXUserProfile > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< floo::BMXUserProfile > **)&jarg1;
    *(std::shared_ptr< floo::BMXBaseObject > **)&baseptr = argp1 ? new std::shared_ptr< floo::BMXBaseObject >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_UserProfileImpl_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< floo::UserProfileImpl > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< floo::UserProfileImpl > **)&jarg1;
    *(std::shared_ptr< floo::BMXUserProfile > **)&baseptr = argp1 ? new std::shared_ptr< floo::BMXUserProfile >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXVideoAttachment_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< floo::BMXVideoAttachment > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< floo::BMXVideoAttachment > **)&jarg1;
    *(std::shared_ptr< floo::BMXFileAttachment > **)&baseptr = argp1 ? new std::shared_ptr< floo::BMXFileAttachment >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXVoiceAttachment_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< floo::BMXVoiceAttachment > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< floo::BMXVoiceAttachment > **)&jarg1;
    *(std::shared_ptr< floo::BMXFileAttachment > **)&baseptr = argp1 ? new std::shared_ptr< floo::BMXFileAttachment >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_im_floo_floolib_flooJNI_BMXPushUserProfile_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(floo::BMXBaseObject **)&baseptr = *(floo::BMXPushUserProfile **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_im_floo_floolib_flooJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[71] = {
    {
      "SwigDirector_BMXNetworkListener_onNetworkChanged", "(Lim/floo/floolib/BMXNetworkListener;IZ)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onStatusChanged", "(Lim/floo/floolib/BMXChatServiceListener;JI)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onAttachmentUploadProgressChanged", "(Lim/floo/floolib/BMXChatServiceListener;JI)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onRecallStatusChanged", "(Lim/floo/floolib/BMXChatServiceListener;JI)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onReceive", "(Lim/floo/floolib/BMXChatServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onReceiveCommandMessages", "(Lim/floo/floolib/BMXChatServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onReceiveSystemMessages", "(Lim/floo/floolib/BMXChatServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onReceiveReadAcks", "(Lim/floo/floolib/BMXChatServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onReceiveDeliverAcks", "(Lim/floo/floolib/BMXChatServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onReceiveRecallMessages", "(Lim/floo/floolib/BMXChatServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onReceiveReadCancels", "(Lim/floo/floolib/BMXChatServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onReceiveReadAllMessages", "(Lim/floo/floolib/BMXChatServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onReceiveDeleteMessages", "(Lim/floo/floolib/BMXChatServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onReceivePlayAcks", "(Lim/floo/floolib/BMXChatServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onAttachmentStatusChanged", "(Lim/floo/floolib/BMXChatServiceListener;JII)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onAttachmentDownloadByUrlStatusChanged", "(Lim/floo/floolib/BMXChatServiceListener;JII)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onRetrieveHistoryMessages", "(Lim/floo/floolib/BMXChatServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onLoadAllConversation", "(Lim/floo/floolib/BMXChatServiceListener;)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onConversationCreate", "(Lim/floo/floolib/BMXChatServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onConversationDelete", "(Lim/floo/floolib/BMXChatServiceListener;JI)V" 
    },
    {
      "SwigDirector_BMXChatServiceListener_onTotalUnreadCountChanged", "(Lim/floo/floolib/BMXChatServiceListener;I)V" 
    },
    {
      "SwigDirector_BMXPushServiceListener_onPushStart", "(Lim/floo/floolib/BMXPushServiceListener;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXPushServiceListener_onPushStop", "(Lim/floo/floolib/BMXPushServiceListener;)V" 
    },
    {
      "SwigDirector_BMXPushServiceListener_onCertRetrieved", "(Lim/floo/floolib/BMXPushServiceListener;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXPushServiceListener_onSetTags", "(Lim/floo/floolib/BMXPushServiceListener;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXPushServiceListener_onGetTags", "(Lim/floo/floolib/BMXPushServiceListener;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXPushServiceListener_onDeleteTags", "(Lim/floo/floolib/BMXPushServiceListener;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXPushServiceListener_onClearTags", "(Lim/floo/floolib/BMXPushServiceListener;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXPushServiceListener_onReceivePush", "(Lim/floo/floolib/BMXPushServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXPushServiceListener_onStatusChanged", "(Lim/floo/floolib/BMXPushServiceListener;JI)V" 
    },
    {
      "SwigDirector_BMXRosterServiceListener_onFriendAdded", "(Lim/floo/floolib/BMXRosterServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXRosterServiceListener_onFriendRemoved", "(Lim/floo/floolib/BMXRosterServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXRosterServiceListener_onApplied", "(Lim/floo/floolib/BMXRosterServiceListener;JJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXRosterServiceListener_onApplicationAccepted", "(Lim/floo/floolib/BMXRosterServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXRosterServiceListener_onApplicationDeclined", "(Lim/floo/floolib/BMXRosterServiceListener;JJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXRosterServiceListener_onBlockListAdded", "(Lim/floo/floolib/BMXRosterServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXRosterServiceListener_onBlockListRemoved", "(Lim/floo/floolib/BMXRosterServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXRosterServiceListener_onRosterInfoUpdate", "(Lim/floo/floolib/BMXRosterServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXRosterServiceListener_onRosterListUpdate", "(Lim/floo/floolib/BMXRosterServiceListener;)V" 
    },
    {
      "SwigDirector_BMXUserServiceListener_onConnectStatusChanged", "(Lim/floo/floolib/BMXUserServiceListener;I)V" 
    },
    {
      "SwigDirector_BMXUserServiceListener_onUserSignIn", "(Lim/floo/floolib/BMXUserServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXUserServiceListener_onUserSignOut", "(Lim/floo/floolib/BMXUserServiceListener;IJ)V" 
    },
    {
      "SwigDirector_BMXUserServiceListener_onInfoUpdated", "(Lim/floo/floolib/BMXUserServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXUserServiceListener_onOtherDeviceSingIn", "(Lim/floo/floolib/BMXUserServiceListener;I)V" 
    },
    {
      "SwigDirector_BMXUserServiceListener_onOtherDeviceSingOut", "(Lim/floo/floolib/BMXUserServiceListener;I)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onGroupCreate", "(Lim/floo/floolib/BMXGroupServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onGroupListUpdate__SWIG_0", "(Lim/floo/floolib/BMXGroupServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onGroupJoined", "(Lim/floo/floolib/BMXGroupServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onGroupLeft", "(Lim/floo/floolib/BMXGroupServiceListener;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onInvitated", "(Lim/floo/floolib/BMXGroupServiceListener;JJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onInvitationAccepted", "(Lim/floo/floolib/BMXGroupServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onInvitationDeclined", "(Lim/floo/floolib/BMXGroupServiceListener;JJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onApplied", "(Lim/floo/floolib/BMXGroupServiceListener;JJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onApplicationAccepted", "(Lim/floo/floolib/BMXGroupServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onApplicationDeclined", "(Lim/floo/floolib/BMXGroupServiceListener;JJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onMembersBanned", "(Lim/floo/floolib/BMXGroupServiceListener;JJJ)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onMembersUnbanned", "(Lim/floo/floolib/BMXGroupServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onMemberJoined", "(Lim/floo/floolib/BMXGroupServiceListener;JJJ)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onMemberLeft", "(Lim/floo/floolib/BMXGroupServiceListener;JJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onAdminsAdded", "(Lim/floo/floolib/BMXGroupServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onAdminsRemoved", "(Lim/floo/floolib/BMXGroupServiceListener;JJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onOwnerAssigned", "(Lim/floo/floolib/BMXGroupServiceListener;J)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onGroupInfoUpdate", "(Lim/floo/floolib/BMXGroupServiceListener;JI)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onMemberChangeNickName", "(Lim/floo/floolib/BMXGroupServiceListener;JJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onAnnouncementUpdate", "(Lim/floo/floolib/BMXGroupServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onSharedFileUploaded", "(Lim/floo/floolib/BMXGroupServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onSharedFileDeleted", "(Lim/floo/floolib/BMXGroupServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onSharedFileUpdated", "(Lim/floo/floolib/BMXGroupServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onBlockListAdded", "(Lim/floo/floolib/BMXGroupServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onBlockListRemoved", "(Lim/floo/floolib/BMXGroupServiceListener;JJ)V" 
    },
    {
      "SwigDirector_BMXGroupServiceListener_onGroupListUpdate__SWIG_1", "(Lim/floo/floolib/BMXGroupServiceListener;)V" 
    }
  };
  Swig::jclass_flooJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_flooJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

