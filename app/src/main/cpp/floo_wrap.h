/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_floo_WRAP_H_
#define SWIG_floo_WRAP_H_

class SwigDirector_BMXNetworkListener : public floo::BMXNetworkListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_BMXNetworkListener(JNIEnv *jenv);
    virtual ~SwigDirector_BMXNetworkListener();
    virtual void onNetworkChanged(floo::BMXNetworkType type, bool reconnect);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_BMXChatServiceListener : public floo::BMXChatServiceListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_BMXChatServiceListener(JNIEnv *jenv);
    virtual ~SwigDirector_BMXChatServiceListener();
    virtual void onStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error);
    virtual void onAttachmentUploadProgressChanged(floo::BMXMessagePtr msg, int percent);
    virtual void onRecallStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error);
    virtual void onReceive(floo::BMXMessageList const &list);
    virtual void onReceiveCommandMessages(floo::BMXMessageList const &list);
    virtual void onReceiveSystemMessages(floo::BMXMessageList const &list);
    virtual void onReceiveReadAcks(floo::BMXMessageList const &list);
    virtual void onReceiveDeliverAcks(floo::BMXMessageList const &list);
    virtual void onReceiveRecallMessages(floo::BMXMessageList const &list);
    virtual void onReceiveReadCancels(floo::BMXMessageList const &list);
    virtual void onReceiveReadAllMessages(floo::BMXMessageList const &list);
    virtual void onReceiveDeleteMessages(floo::BMXMessageList const &list);
    virtual void onReceivePlayAcks(floo::BMXMessageList const &list);
    virtual void onAttachmentStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error, int percent);
    virtual void onAttachmentDownloadByUrlStatusChanged(int64_t msgId, floo::BMXErrorCode error, int percent);
    virtual void onRetrieveHistoryMessages(floo::BMXConversationPtr conversation);
    virtual void onLoadAllConversation();
    virtual void onConversationCreate(floo::BMXConversationPtr conversation, floo::BMXMessagePtr msg);
    virtual void onConversationDelete(int64_t conversationId, floo::BMXErrorCode error);
    virtual void onTotalUnreadCountChanged(int unreadCount);
public:
    bool swig_overrides(int n) {
      return (n < 20 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<20> swig_override;
};

class SwigDirector_BMXPushServiceListener : public floo::BMXPushServiceListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_BMXPushServiceListener(JNIEnv *jenv);
    virtual ~SwigDirector_BMXPushServiceListener();
    virtual void onPushStart(std::string const bmxToken);
    virtual void onPushStop();
    virtual void onCertRetrieved(std::string const cert);
    virtual void onSetTags(std::string const &operationId);
    virtual void onGetTags(std::string const &operationId);
    virtual void onDeleteTags(std::string const &operationId);
    virtual void onClearTags(std::string const &operationId);
    virtual void onReceivePush(floo::BMXMessageList const &list);
    virtual void onStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error);
public:
    bool swig_overrides(int n) {
      return (n < 9 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<9> swig_override;
};

class SwigDirector_BMXRosterServiceListener : public floo::BMXRosterServiceListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_BMXRosterServiceListener(JNIEnv *jenv);
    virtual ~SwigDirector_BMXRosterServiceListener();
    virtual void onFriendAdded(int64_t sponsorId, int64_t recipientId);
    virtual void onFriendRemoved(int64_t sponsorId, int64_t recipientId);
    virtual void onApplied(int64_t sponsorId, int64_t recipientId, std::string const &message);
    virtual void onApplicationAccepted(int64_t sponsorId, int64_t recipientId);
    virtual void onApplicationDeclined(int64_t sponsorId, int64_t recipientId, std::string const &reason);
    virtual void onBlockListAdded(int64_t sponsorId, int64_t recipientId);
    virtual void onBlockListRemoved(int64_t sponsorId, int64_t recipientId);
    virtual void onRosterInfoUpdate(floo::BMXRosterItemPtr item);
    virtual void onRosterListUpdate();
public:
    bool swig_overrides(int n) {
      return (n < 9 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<9> swig_override;
};

class SwigDirector_BMXUserServiceListener : public floo::BMXUserServiceListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_BMXUserServiceListener(JNIEnv *jenv);
    virtual ~SwigDirector_BMXUserServiceListener();
    virtual void onConnectStatusChanged(floo::BMXConnectStatus status);
    virtual void onUserSignIn(floo::BMXUserProfilePtr profile);
    virtual void onUserSignOut(floo::BMXErrorCode error, int64_t userId);
    virtual void onInfoUpdated(floo::BMXUserProfilePtr profile);
    virtual void onOtherDeviceSingIn(int deviceSN);
    virtual void onOtherDeviceSingOut(int deviceSN);
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<6> swig_override;
};

class SwigDirector_BMXGroupServiceListener : public floo::BMXGroupServiceListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_BMXGroupServiceListener(JNIEnv *jenv);
    virtual ~SwigDirector_BMXGroupServiceListener();
    virtual void onGroupCreate(floo::BMXGroupPtr group);
    virtual void onGroupListUpdate(floo::BMXGroupList const &list);
    virtual void onGroupJoined(floo::BMXGroupPtr group);
    virtual void onGroupLeft(floo::BMXGroupPtr group, std::string const &reason);
    virtual void onInvitated(int64_t groupId, int64_t inviter, std::string const &message);
    virtual void onInvitationAccepted(floo::BMXGroupPtr group, int64_t inviteeId);
    virtual void onInvitationDeclined(floo::BMXGroupPtr group, int64_t inviteeId, std::string const &reason);
    virtual void onApplied(floo::BMXGroupPtr group, int64_t applicantId, std::string const &message);
    virtual void onApplicationAccepted(floo::BMXGroupPtr group, int64_t approver);
    virtual void onApplicationDeclined(floo::BMXGroupPtr group, int64_t approver, std::string const &reason);
    virtual void onMembersBanned(floo::BMXGroupPtr group, std::vector< int64_t > const &members, int64_t duration);
    virtual void onMembersUnbanned(floo::BMXGroupPtr group, std::vector< int64_t > const &members);
    virtual void onMemberJoined(floo::BMXGroupPtr group, int64_t memberId, int64_t inviter);
    virtual void onMemberLeft(floo::BMXGroupPtr group, int64_t memberId, std::string const &reason);
    virtual void onAdminsAdded(floo::BMXGroupPtr group, std::vector< int64_t > const &members);
    virtual void onAdminsRemoved(floo::BMXGroupPtr group, std::vector< int64_t > const &members, std::string const &reason);
    virtual void onOwnerAssigned(floo::BMXGroupPtr group);
    virtual void onGroupInfoUpdate(floo::BMXGroupPtr group, floo::BMXGroup::UpdateInfoType type);
    virtual void onMemberChangeNickName(floo::BMXGroupPtr group, int64_t memberId, std::string const &nickName);
    virtual void onAnnouncementUpdate(floo::BMXGroupPtr group, floo::BMXGroup::AnnouncementPtr announcement);
    virtual void onSharedFileUploaded(floo::BMXGroupPtr group, floo::BMXGroup::SharedFilePtr sharedFile);
    virtual void onSharedFileDeleted(floo::BMXGroupPtr group, floo::BMXGroup::SharedFilePtr sharedFile);
    virtual void onSharedFileUpdated(floo::BMXGroupPtr group, floo::BMXGroup::SharedFilePtr sharedFile);
    virtual void onBlockListAdded(floo::BMXGroupPtr group, std::vector< int64_t > const &members);
    virtual void onBlockListRemoved(floo::BMXGroupPtr group, std::vector< int64_t > const &members);
    virtual void onGroupListUpdate();
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<26> swig_override;
};


#endif
